/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Apps {

    public class AppBundleCountry: Codable {

        /// Unique identifier
        public var id: String?
        public var price: Int64?
        public var pricePerDevice: Int64?
        /// The country of the app bundle country
        public var country: String?
        /// DB reference to app bundle that contains this app bundle country.
        public var appBundle: Int64?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case price
            case pricePerDevice
            case country
            case appBundle
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.price = try rootContainer.decodeIfPresent(Int64.self, forKey: .price)
            } catch {
                decodeError.append(error)
            }
            do {
                self.pricePerDevice = try rootContainer.decodeIfPresent(Int64.self, forKey: .pricePerDevice)
            } catch {
                decodeError.append(error)
            }
            do {
                self.country = try rootContainer.decodeIfPresent(String.self, forKey: .country)
            } catch {
                decodeError.append(error)
            }
            do {
                self.appBundle = try rootContainer.decodeIfPresent(Int64.self, forKey: .appBundle)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (price != nil) { try container.encode(price, forKey: .price) }
            if (pricePerDevice != nil) { try container.encode(pricePerDevice, forKey: .pricePerDevice) }
            if (country != nil) { try container.encode(country, forKey: .country) }
            if (appBundle != nil) { try container.encode(appBundle, forKey: .appBundle) }
        }
    }

}