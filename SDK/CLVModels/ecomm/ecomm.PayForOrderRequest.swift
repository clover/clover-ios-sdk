/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Ecomm {

    public class PayForOrderRequest: Codable {

        /// ID of the customer this order is for if one exists.
        public var customer: CLVModels.Variant?
        /// A payment source to be charged. This can be a token
        public var source: String?
        /// Amount paid in tips
        public var tip_amount: CLVModels.Variant?
        /// Amount paid in convenience fees
        public var convenience_fee: CLVModels.Variant?
        /// Customer email address.
        public var email: CLVModels.Variant?
        /// An id such as an Invoice PO number that can be passed to the merchant's gateway, and ultimately appear in settlement records.
        public var external_reference_id: String?
        /// Details about the stored credentials.
        public var stored_credentials: CLVModels.Ecomm.StoredCredentials?
        /// This is an optional value. This field indicates whether it's ECOMM, MOTO or RECURRING transaction
        public var ecomind: CLVModels.Ecomm.EcommerceIndicator?
        /// Purchase card L2 data
        public var level2: CLVModels.Ecomm.PurchaseCardLevel2?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case customer
            case source
            case tip_amount
            case convenience_fee
            case email
            case external_reference_id
            case stored_credentials
            case ecomind
            case level2
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.customer = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .customer)
            } catch {
                decodeError.append(error)
            }
            do {
                self.source = try rootContainer.decodeIfPresent(String.self, forKey: .source)
            } catch {
                decodeError.append(error)
            }
            do {
                self.tip_amount = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .tip_amount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.convenience_fee = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .convenience_fee)
            } catch {
                decodeError.append(error)
            }
            do {
                self.email = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .email)
            } catch {
                decodeError.append(error)
            }
            do {
                self.external_reference_id = try rootContainer.decodeIfPresent(String.self, forKey: .external_reference_id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.stored_credentials = try rootContainer.decodeIfPresent(CLVModels.Ecomm.StoredCredentials.self, forKey: .stored_credentials)
            } catch {
                decodeError.append(error)
            }
            do {
                self.ecomind = try rootContainer.decodeIfPresent(CLVModels.Ecomm.EcommerceIndicator.self, forKey: .ecomind)
            } catch {
                decodeError.append(error)
            }
            do {
                self.level2 = try rootContainer.decodeIfPresent(CLVModels.Ecomm.PurchaseCardLevel2.self, forKey: .level2)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (customer != nil) { try container.encode(customer, forKey: .customer) }
            if (source != nil) { try container.encode(source, forKey: .source) }
            if (tip_amount != nil) { try container.encode(tip_amount, forKey: .tip_amount) }
            if (convenience_fee != nil) { try container.encode(convenience_fee, forKey: .convenience_fee) }
            if (email != nil) { try container.encode(email, forKey: .email) }
            if (external_reference_id != nil) { try container.encode(external_reference_id, forKey: .external_reference_id) }
            if (stored_credentials != nil) { try container.encode(stored_credentials, forKey: .stored_credentials) }
            if (ecomind != nil) { try container.encode(ecomind, forKey: .ecomind) }
            if (level2 != nil) { try container.encode(level2, forKey: .level2) }
        }
    }

}