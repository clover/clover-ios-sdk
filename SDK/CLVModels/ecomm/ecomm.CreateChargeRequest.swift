/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Ecomm {

    public class CreateChargeRequest: Codable {

        /// A positive integer in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency) representing how much to charge. The minimum amount is $0.50 US or equivalent in charge currency.
        public var amount: Int64?
        /// Three-letter ISO currency code. Must be a supported currency.
        public var currency: CLVModels.Variant?
        /// Amount paid in tips
        public var tip_amount: CLVModels.Variant?
        /// Amount paid in taxes
        public var tax_amount: CLVModels.Variant?
        /// Tax rate uuid that was passed by VT only
        public var tax_rate_uuid: CLVModels.Variant?
        /// Amount paid in convenience fees
        public var convenience_fee: CLVModels.Variant?
        /// Whether to immediately capture the charge. Defaults to true. When false, the charge issues an authorization (or pre-authorization), and will need to be captured later.
        public var capture: Bool?
        /// An arbitrary string attached to the object. Often useful for displaying to users.
        public var description_: CLVModels.Variant?
        /// The email address to which this charge’s receipt will be sent..
        public var receipt_email: CLVModels.Variant?
        /// A payment source to be charged. This can be a token
        public var source: String?
        /// An id such as an Invoice PO number that can be passed to the merchant's gateway, and ultimately appear in settlement records.
        public var external_reference_id: String?
        /// Additional descriptor information for the charge
        public var soft_descriptor: CLVModels.Ecomm.SoftDescriptor?
        /// This is an optional value. This field indicates whether it's ECOMM, MOTO or RECURRING transaction
        public var ecomind: CLVModels.Ecomm.EcommerceIndicator?
        public var level2: CLVModels.Ecomm.PurchaseCardLevel2?
        /// Details about the stored credentials.
        public var stored_credentials: CLVModels.Ecomm.StoredCredentials?
        public var metadata: [String:String]?
        public var customer: CLVModels.Ecomm.CustomerRequest?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case amount
            case currency
            case tip_amount
            case tax_amount
            case tax_rate_uuid
            case convenience_fee
            case capture
            case description
            case receipt_email
            case source
            case external_reference_id
            case soft_descriptor
            case ecomind
            case level2
            case stored_credentials
            case metadata
            case customer
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.amount = try rootContainer.decodeIfPresent(Int64.self, forKey: .amount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.currency = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .currency)
            } catch {
                decodeError.append(error)
            }
            do {
                self.tip_amount = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .tip_amount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.tax_amount = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .tax_amount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.tax_rate_uuid = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .tax_rate_uuid)
            } catch {
                decodeError.append(error)
            }
            do {
                self.convenience_fee = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .convenience_fee)
            } catch {
                decodeError.append(error)
            }
            do {
                self.capture = try rootContainer.decodeIfPresent(Bool.self, forKey: .capture)
            } catch {
                decodeError.append(error)
            }
            do {
                self.description_ = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .description)
            } catch {
                decodeError.append(error)
            }
            do {
                self.receipt_email = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .receipt_email)
            } catch {
                decodeError.append(error)
            }
            do {
                self.source = try rootContainer.decodeIfPresent(String.self, forKey: .source)
            } catch {
                decodeError.append(error)
            }
            do {
                self.external_reference_id = try rootContainer.decodeIfPresent(String.self, forKey: .external_reference_id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.soft_descriptor = try rootContainer.decodeIfPresent(CLVModels.Ecomm.SoftDescriptor.self, forKey: .soft_descriptor)
            } catch {
                decodeError.append(error)
            }
            do {
                self.ecomind = try rootContainer.decodeIfPresent(CLVModels.Ecomm.EcommerceIndicator.self, forKey: .ecomind)
            } catch {
                decodeError.append(error)
            }
            do {
                self.level2 = try rootContainer.decodeIfPresent(CLVModels.Ecomm.PurchaseCardLevel2.self, forKey: .level2)
            } catch {
                decodeError.append(error)
            }
            do {
                self.stored_credentials = try rootContainer.decodeIfPresent(CLVModels.Ecomm.StoredCredentials.self, forKey: .stored_credentials)
            } catch {
                decodeError.append(error)
            }
            do {
                self.metadata = try rootContainer.decodeIfPresent([String:String].self, forKey: .metadata)
            } catch {
                decodeError.append(error)
            }
            do {
                self.customer = try rootContainer.decodeIfPresent(CLVModels.Ecomm.CustomerRequest.self, forKey: .customer)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (amount != nil) { try container.encode(amount, forKey: .amount) }
            if (currency != nil) { try container.encode(currency, forKey: .currency) }
            if (tip_amount != nil) { try container.encode(tip_amount, forKey: .tip_amount) }
            if (tax_amount != nil) { try container.encode(tax_amount, forKey: .tax_amount) }
            if (tax_rate_uuid != nil) { try container.encode(tax_rate_uuid, forKey: .tax_rate_uuid) }
            if (convenience_fee != nil) { try container.encode(convenience_fee, forKey: .convenience_fee) }
            if (capture != nil) { try container.encode(capture, forKey: .capture) }
            if (description_ != nil) { try container.encode(description_, forKey: .description) }
            if (receipt_email != nil) { try container.encode(receipt_email, forKey: .receipt_email) }
            if (source != nil) { try container.encode(source, forKey: .source) }
            if (external_reference_id != nil) { try container.encode(external_reference_id, forKey: .external_reference_id) }
            if (soft_descriptor != nil) { try container.encode(soft_descriptor, forKey: .soft_descriptor) }
            if (ecomind != nil) { try container.encode(ecomind, forKey: .ecomind) }
            if (level2 != nil) { try container.encode(level2, forKey: .level2) }
            if (stored_credentials != nil) { try container.encode(stored_credentials, forKey: .stored_credentials) }
            if (metadata != nil) { try container.encode(metadata, forKey: .metadata) }
            if (customer != nil) { try container.encode(customer, forKey: .customer) }
        }
    }

}