/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Ecomm {

    public class Address: Codable {

        /// Address line 1 (Street address/PO Box/Company name).
        public var line1: CLVModels.Variant?
        /// Address line 2 (Street address/PO Box/Company name).
        public var line2: CLVModels.Variant?
        /// City/District/Suburb/Town/Village.
        public var city: CLVModels.Variant?
        /// State/County/Province/Region.
        public var state: CLVModels.Variant?
        /// ZIP or postal code.
        public var postal_code: CLVModels.Variant?
        /// Country code.
        public var country: CLVModels.Variant?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case line1
            case line2
            case city
            case state
            case postal_code
            case country
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.line1 = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .line1)
            } catch {
                decodeError.append(error)
            }
            do {
                self.line2 = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .line2)
            } catch {
                decodeError.append(error)
            }
            do {
                self.city = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .city)
            } catch {
                decodeError.append(error)
            }
            do {
                self.state = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .state)
            } catch {
                decodeError.append(error)
            }
            do {
                self.postal_code = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .postal_code)
            } catch {
                decodeError.append(error)
            }
            do {
                self.country = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .country)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (line1 != nil) { try container.encode(line1, forKey: .line1) }
            if (line2 != nil) { try container.encode(line2, forKey: .line2) }
            if (city != nil) { try container.encode(city, forKey: .city) }
            if (state != nil) { try container.encode(state, forKey: .state) }
            if (postal_code != nil) { try container.encode(postal_code, forKey: .postal_code) }
            if (country != nil) { try container.encode(country, forKey: .country) }
        }
    }

}