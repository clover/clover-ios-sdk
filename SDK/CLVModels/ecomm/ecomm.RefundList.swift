/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Ecomm {

    public class RefundList: Codable {

        /// List of Refunds
        public var data: [CLVModels.Ecomm.Refund]?
        public var object: String?
        public var url: String?
        public var has_more: Bool?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case data
            case object
            case url
            case has_more
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            if (rootContainer.contains(.data)) {
                do {
                    let dataContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .data)
                    self.data = try dataContainer.decodeIfPresent([CLVModels.Ecomm.Refund].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            do {
                self.object = try rootContainer.decodeIfPresent(String.self, forKey: .object)
            } catch {
                decodeError.append(error)
            }
            do {
                self.url = try rootContainer.decodeIfPresent(String.self, forKey: .url)
            } catch {
                decodeError.append(error)
            }
            do {
                self.has_more = try rootContainer.decodeIfPresent(Bool.self, forKey: .has_more)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (data != nil) { try container.encode(data, forKey: .data) }
            if (object != nil) { try container.encode(object, forKey: .object) }
            if (url != nil) { try container.encode(url, forKey: .url) }
            if (has_more != nil) { try container.encode(has_more, forKey: .has_more) }
        }
    }

}