/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Ecomm {

    public class CreateOrderRequest: Codable {

        /// Three-letter ISO currency code. Must be a supported currency.
        public var currency: String?
        /// Customer email address.
        public var email: CLVModels.Variant?
        /// ID of the customer this order is for if one exists.
        public var customer: CLVModels.Variant?
        /// A coupon code that represents a discount to be applied to this order
        public var coupon: CLVModels.Variant?
        /// List of items constituting the order
        public var items: [CLVModels.Ecomm.OrderItem]?
        /// Order shipping information such as customer name and address
        public var shipping: CLVModels.Ecomm.Shipping?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case currency
            case email
            case customer
            case coupon
            case items
            case shipping
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.currency = try rootContainer.decodeIfPresent(String.self, forKey: .currency)
            } catch {
                decodeError.append(error)
            }
            do {
                self.email = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .email)
            } catch {
                decodeError.append(error)
            }
            do {
                self.customer = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .customer)
            } catch {
                decodeError.append(error)
            }
            do {
                self.coupon = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .coupon)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.items)) {
                do {
                    let itemsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .items)
                    self.items = try itemsContainer.decodeIfPresent([CLVModels.Ecomm.OrderItem].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            do {
                self.shipping = try rootContainer.decodeIfPresent(CLVModels.Ecomm.Shipping.self, forKey: .shipping)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (currency != nil) { try container.encode(currency, forKey: .currency) }
            if (email != nil) { try container.encode(email, forKey: .email) }
            if (customer != nil) { try container.encode(customer, forKey: .customer) }
            if (coupon != nil) { try container.encode(coupon, forKey: .coupon) }
            if (items != nil) { try container.encode(items, forKey: .items) }
            if (shipping != nil) { try container.encode(shipping, forKey: .shipping) }
        }
    }

}