/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Ecomm {

    public class CustomerRequest: Codable {

        /// first/given name of customer.
        public var first_name: CLVModels.Variant?
        /// last name/sur name of customer.
        public var last_name: CLVModels.Variant?
        /// Email address.
        public var email: CLVModels.Variant?
        /// Billing phone number.
        public var phone: CLVModels.Variant?
        public var address: CLVModels.Ecomm.Address?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case first_name
            case last_name
            case email
            case phone
            case address
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.first_name = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .first_name)
            } catch {
                decodeError.append(error)
            }
            do {
                self.last_name = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .last_name)
            } catch {
                decodeError.append(error)
            }
            do {
                self.email = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .email)
            } catch {
                decodeError.append(error)
            }
            do {
                self.phone = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .phone)
            } catch {
                decodeError.append(error)
            }
            do {
                self.address = try rootContainer.decodeIfPresent(CLVModels.Ecomm.Address.self, forKey: .address)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (first_name != nil) { try container.encode(first_name, forKey: .first_name) }
            if (last_name != nil) { try container.encode(last_name, forKey: .last_name) }
            if (email != nil) { try container.encode(email, forKey: .email) }
            if (phone != nil) { try container.encode(phone, forKey: .phone) }
            if (address != nil) { try container.encode(address, forKey: .address) }
        }
    }

}