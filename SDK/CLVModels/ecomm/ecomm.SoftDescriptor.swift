/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Ecomm {

    public class SoftDescriptor: Codable {

        /// Merchant doing business as name
        public var dba_name: CLVModels.Variant?
        /// Street address of the merchant
        public var street: CLVModels.Variant?
        /// City of the merchant
        public var city: CLVModels.Variant?
        /// Region where merchant is located such as state
        public var region: CLVModels.Variant?
        /// Merchant postal code
        public var postal_code: CLVModels.Variant?
        /// Merchant country code
        public var country_code: CLVModels.Variant?
        /// Merchant contact info such as email
        public var merchant_contact_info: CLVModels.Variant?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case dba_name
            case street
            case city
            case region
            case postal_code
            case country_code
            case merchant_contact_info
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.dba_name = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .dba_name)
            } catch {
                decodeError.append(error)
            }
            do {
                self.street = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .street)
            } catch {
                decodeError.append(error)
            }
            do {
                self.city = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .city)
            } catch {
                decodeError.append(error)
            }
            do {
                self.region = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .region)
            } catch {
                decodeError.append(error)
            }
            do {
                self.postal_code = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .postal_code)
            } catch {
                decodeError.append(error)
            }
            do {
                self.country_code = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .country_code)
            } catch {
                decodeError.append(error)
            }
            do {
                self.merchant_contact_info = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .merchant_contact_info)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (dba_name != nil) { try container.encode(dba_name, forKey: .dba_name) }
            if (street != nil) { try container.encode(street, forKey: .street) }
            if (city != nil) { try container.encode(city, forKey: .city) }
            if (region != nil) { try container.encode(region, forKey: .region) }
            if (postal_code != nil) { try container.encode(postal_code, forKey: .postal_code) }
            if (country_code != nil) { try container.encode(country_code, forKey: .country_code) }
            if (merchant_contact_info != nil) { try container.encode(merchant_contact_info, forKey: .merchant_contact_info) }
        }
    }

}