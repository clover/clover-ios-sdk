/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Ecomm {

    public class CreateCustomerRequest: Codable {

        /// first/given name of customer.
        public var firstName: CLVModels.Variant?
        /// last name/sur name of customer.
        public var lastName: CLVModels.Variant?
        /// Full name of customer.
        public var name: CLVModels.Variant?
        /// Email address.
        public var email: String?
        /// Billing phone number.
        public var phone: CLVModels.Variant?
        /// Shipping information such as customer name and address
        public var shipping: CLVModels.Ecomm.Shipping?
        /// A payment source to be associated with this customer. This can be a token
        public var source: String?
        /// Customer Business Name
        public var businessName: CLVModels.Variant?
        /// This is an optional value. This field indicates whether it's ECOMM, MOTO or RECURRING transaction
        public var ecomind: CLVModels.Ecomm.EcommerceIndicator?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case firstName
            case lastName
            case name
            case email
            case phone
            case shipping
            case source
            case businessName
            case ecomind
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.firstName = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .firstName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.lastName = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .lastName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.name = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .name)
            } catch {
                decodeError.append(error)
            }
            do {
                self.email = try rootContainer.decodeIfPresent(String.self, forKey: .email)
            } catch {
                decodeError.append(error)
            }
            do {
                self.phone = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .phone)
            } catch {
                decodeError.append(error)
            }
            do {
                self.shipping = try rootContainer.decodeIfPresent(CLVModels.Ecomm.Shipping.self, forKey: .shipping)
            } catch {
                decodeError.append(error)
            }
            do {
                self.source = try rootContainer.decodeIfPresent(String.self, forKey: .source)
            } catch {
                decodeError.append(error)
            }
            do {
                self.businessName = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .businessName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.ecomind = try rootContainer.decodeIfPresent(CLVModels.Ecomm.EcommerceIndicator.self, forKey: .ecomind)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (firstName != nil) { try container.encode(firstName, forKey: .firstName) }
            if (lastName != nil) { try container.encode(lastName, forKey: .lastName) }
            if (name != nil) { try container.encode(name, forKey: .name) }
            if (email != nil) { try container.encode(email, forKey: .email) }
            if (phone != nil) { try container.encode(phone, forKey: .phone) }
            if (shipping != nil) { try container.encode(shipping, forKey: .shipping) }
            if (source != nil) { try container.encode(source, forKey: .source) }
            if (businessName != nil) { try container.encode(businessName, forKey: .businessName) }
            if (ecomind != nil) { try container.encode(ecomind, forKey: .ecomind) }
        }
    }

}