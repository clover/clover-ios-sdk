/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Ecomm {

    public class PurchaseCardLevel2: Codable {

        /// This field contains the portion of the transaction amount that represents the Sales tax.
        public var tax_amount: Int64?
        /// Taxable status
        public var tax_indicator: CLVModels.Ecomm.PcTaxIndicator?
        /// This field represents the data used by the merchant or customer to identify the purchase.
        public var purchase_identifier: String?
        /// The reference number or order number to be reported as part of the Purchase Card data.
        public var pc_order_number: String?
        /// This field contains the discount amount for the purchase.
        public var discount_amount: Int64?
        /// This field contains the amount for freight included in this purchase.
        public var freight_amount: Int64?
        /// This field contains the duty amount for this purchase.
        public var duty_amount: Int64?
        /// This field contains the postal or zip code of the location the item(s) in this purchase are being delivered to.
        public var destination_postal_code: String?
        /// The postal or zip code the item(s) in this purchase are to be shipped from.
        public var ship_from_postal_code: String?
        /// This field represents the country code of the location the items in this purchase are being delivered to.
        public var destination_country_code: String?
        /// This field should contain the Tax ID collected by the merchant for this transaction.
        public var merchant_tax_id: String?
        /// This field should contain a description of an item purchased with this card.
        public var product_description: String?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case tax_amount
            case tax_indicator
            case purchase_identifier
            case pc_order_number
            case discount_amount
            case freight_amount
            case duty_amount
            case destination_postal_code
            case ship_from_postal_code
            case destination_country_code
            case merchant_tax_id
            case product_description
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.tax_amount = try rootContainer.decodeIfPresent(Int64.self, forKey: .tax_amount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.tax_indicator = try rootContainer.decodeIfPresent(CLVModels.Ecomm.PcTaxIndicator.self, forKey: .tax_indicator)
            } catch {
                decodeError.append(error)
            }
            do {
                self.purchase_identifier = try rootContainer.decodeIfPresent(String.self, forKey: .purchase_identifier)
            } catch {
                decodeError.append(error)
            }
            do {
                self.pc_order_number = try rootContainer.decodeIfPresent(String.self, forKey: .pc_order_number)
            } catch {
                decodeError.append(error)
            }
            do {
                self.discount_amount = try rootContainer.decodeIfPresent(Int64.self, forKey: .discount_amount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.freight_amount = try rootContainer.decodeIfPresent(Int64.self, forKey: .freight_amount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.duty_amount = try rootContainer.decodeIfPresent(Int64.self, forKey: .duty_amount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.destination_postal_code = try rootContainer.decodeIfPresent(String.self, forKey: .destination_postal_code)
            } catch {
                decodeError.append(error)
            }
            do {
                self.ship_from_postal_code = try rootContainer.decodeIfPresent(String.self, forKey: .ship_from_postal_code)
            } catch {
                decodeError.append(error)
            }
            do {
                self.destination_country_code = try rootContainer.decodeIfPresent(String.self, forKey: .destination_country_code)
            } catch {
                decodeError.append(error)
            }
            do {
                self.merchant_tax_id = try rootContainer.decodeIfPresent(String.self, forKey: .merchant_tax_id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.product_description = try rootContainer.decodeIfPresent(String.self, forKey: .product_description)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (tax_amount != nil) { try container.encode(tax_amount, forKey: .tax_amount) }
            if (tax_indicator != nil) { try container.encode(tax_indicator, forKey: .tax_indicator) }
            if (purchase_identifier != nil) { try container.encode(purchase_identifier, forKey: .purchase_identifier) }
            if (pc_order_number != nil) { try container.encode(pc_order_number, forKey: .pc_order_number) }
            if (discount_amount != nil) { try container.encode(discount_amount, forKey: .discount_amount) }
            if (freight_amount != nil) { try container.encode(freight_amount, forKey: .freight_amount) }
            if (duty_amount != nil) { try container.encode(duty_amount, forKey: .duty_amount) }
            if (destination_postal_code != nil) { try container.encode(destination_postal_code, forKey: .destination_postal_code) }
            if (ship_from_postal_code != nil) { try container.encode(ship_from_postal_code, forKey: .ship_from_postal_code) }
            if (destination_country_code != nil) { try container.encode(destination_country_code, forKey: .destination_country_code) }
            if (merchant_tax_id != nil) { try container.encode(merchant_tax_id, forKey: .merchant_tax_id) }
            if (product_description != nil) { try container.encode(product_description, forKey: .product_description) }
        }
    }

}