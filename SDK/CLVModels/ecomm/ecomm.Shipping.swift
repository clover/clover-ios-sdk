/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Ecomm {

    public class Shipping: Codable {

        /// Shipping recipient first and last name
        public var name: CLVModels.Variant?
        /// Shipping carrier, e.g. Fedex, UPS, USPS, etc.
        public var carrier: CLVModels.Variant?
        /// Recipient phone number
        public var phone: CLVModels.Variant?
        /// The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas
        public var tracking_number: CLVModels.Variant?
        /// Customer shipping address.
        public var address: CLVModels.Ecomm.Address?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case name
            case carrier
            case phone
            case tracking_number
            case address
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.name = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .name)
            } catch {
                decodeError.append(error)
            }
            do {
                self.carrier = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .carrier)
            } catch {
                decodeError.append(error)
            }
            do {
                self.phone = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .phone)
            } catch {
                decodeError.append(error)
            }
            do {
                self.tracking_number = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .tracking_number)
            } catch {
                decodeError.append(error)
            }
            do {
                self.address = try rootContainer.decodeIfPresent(CLVModels.Ecomm.Address.self, forKey: .address)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (name != nil) { try container.encode(name, forKey: .name) }
            if (carrier != nil) { try container.encode(carrier, forKey: .carrier) }
            if (phone != nil) { try container.encode(phone, forKey: .phone) }
            if (tracking_number != nil) { try container.encode(tracking_number, forKey: .tracking_number) }
            if (address != nil) { try container.encode(address, forKey: .address) }
        }
    }

}