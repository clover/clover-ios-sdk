/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

extension CLVModels.Ecomm {

    public enum type_: Codable {
        case authorized
        case manual_review
        case issuer_declined
        case blocked
        case invalid
        case PARSE_UNKNOWN(String)

        enum Key: CodingKey {
            case rawValue
        }

        public init(rawValue:String) {
            switch rawValue {
                case  "authorized":
                    self = .authorized
                case  "manual_review":
                    self = .manual_review
                case  "issuer_declined":
                    self = .issuer_declined
                case  "blocked":
                    self = .blocked
                case  "invalid":
                    self = .invalid
                default:
                    self = .PARSE_UNKNOWN(rawValue)
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self.init(rawValue: rawValue)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(toString)
        }

        public var toString: String {
            switch self {
                case  .authorized:
                    return "authorized"
                case  .manual_review:
                    return "manual_review"
                case  .issuer_declined:
                    return "issuer_declined"
                case  .blocked:
                    return "blocked"
                case  .invalid:
                    return "invalid"
                case .PARSE_UNKNOWN(let rawValue):
                    return rawValue            
            }
        }
    }
}