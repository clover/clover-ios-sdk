/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Ecomm {

    public class CaptureCharge: Codable {

        /// ID of the charge being captured.  This field is used internally to encapsulate the ID present in the URI path.
        public var chargeId: String?
        /// The amount to capture, which must be less than or equal to the original amount.
        public var amount: CLVModels.Variant?
        /// The email address to send this chargeâ€™s receipt to. This will override the previously-specified email address for this charge, if one was set. Receipts will not be sent in test mode.
        public var receipt_email: CLVModels.Variant?
        /// Purchase card level 2 data
        public var level2: CLVModels.Ecomm.PurchaseCardLevel2?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case chargeId
            case amount
            case receipt_email
            case level2
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.chargeId = try rootContainer.decodeIfPresent(String.self, forKey: .chargeId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.amount = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .amount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.receipt_email = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .receipt_email)
            } catch {
                decodeError.append(error)
            }
            do {
                self.level2 = try rootContainer.decodeIfPresent(CLVModels.Ecomm.PurchaseCardLevel2.self, forKey: .level2)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (chargeId != nil) { try container.encode(chargeId, forKey: .chargeId) }
            if (amount != nil) { try container.encode(amount, forKey: .amount) }
            if (receipt_email != nil) { try container.encode(receipt_email, forKey: .receipt_email) }
            if (level2 != nil) { try container.encode(level2, forKey: .level2) }
        }
    }

}