/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Ecomm {

    public class OrderReturnData: Codable {

        /// Amount in cents to be returned
        public var amount: Int64?
        /// Three-letter ISO currency code. Must be a supported currency.
        public var currency: CLVModels.Variant?
        public var created: Int64?
        /// ID of the order that was returned
        public var order: CLVModels.Variant?
        /// ID of the refund issued for this return
        public var refund: CLVModels.Variant?
        /// The items included in this order return
        public var data: [CLVModels.Ecomm.OrderItem]?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case amount
            case currency
            case created
            case order
            case refund
            case data
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.amount = try rootContainer.decodeIfPresent(Int64.self, forKey: .amount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.currency = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .currency)
            } catch {
                decodeError.append(error)
            }
            do {
                self.created = try rootContainer.decodeIfPresent(Int64.self, forKey: .created)
            } catch {
                decodeError.append(error)
            }
            do {
                self.order = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .order)
            } catch {
                decodeError.append(error)
            }
            do {
                self.refund = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .refund)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.data)) {
                do {
                    let dataContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .data)
                    self.data = try dataContainer.decodeIfPresent([CLVModels.Ecomm.OrderItem].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (amount != nil) { try container.encode(amount, forKey: .amount) }
            if (currency != nil) { try container.encode(currency, forKey: .currency) }
            if (created != nil) { try container.encode(created, forKey: .created) }
            if (order != nil) { try container.encode(order, forKey: .order) }
            if (refund != nil) { try container.encode(refund, forKey: .refund) }
            if (data != nil) { try container.encode(data, forKey: .data) }
        }
    }

}