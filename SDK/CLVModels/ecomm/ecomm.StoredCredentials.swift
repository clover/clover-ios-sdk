/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Ecomm {

    public class StoredCredentials: Codable {

        /// The transaction id received from schemes for the initial transaction required if sequence is SUBSEQUENT. Note: Mastercard transactions do not use this field for Subsequent transactions.
        public var cardbrand_original_transaction_id: String?
        /// Whether the transaction is the FIRST or SUBSEQUENT for the same payment card.Valid Note: Mastercard transactions only support SUBSEQUENT transactions for stored credentials feature
        public var sequence: CLVModels.Ecomm.Sequence?
        /// Whether transaction is scheduled or part of an installment
        public var is_scheduled: Bool?
        /// Whether it's MERCHANT initiated or explicitly consented by CARDHOLDER.
        public var initiator: CLVModels.Ecomm.Initiator?
        public var installment_info: CLVModels.Ecomm.InstallmentInfo?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case cardbrand_original_transaction_id
            case sequence
            case is_scheduled
            case initiator
            case installment_info
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.cardbrand_original_transaction_id = try rootContainer.decodeIfPresent(String.self, forKey: .cardbrand_original_transaction_id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.sequence = try rootContainer.decodeIfPresent(CLVModels.Ecomm.Sequence.self, forKey: .sequence)
            } catch {
                decodeError.append(error)
            }
            do {
                self.is_scheduled = try rootContainer.decodeIfPresent(Bool.self, forKey: .is_scheduled)
            } catch {
                decodeError.append(error)
            }
            do {
                self.initiator = try rootContainer.decodeIfPresent(CLVModels.Ecomm.Initiator.self, forKey: .initiator)
            } catch {
                decodeError.append(error)
            }
            do {
                self.installment_info = try rootContainer.decodeIfPresent(CLVModels.Ecomm.InstallmentInfo.self, forKey: .installment_info)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (cardbrand_original_transaction_id != nil) { try container.encode(cardbrand_original_transaction_id, forKey: .cardbrand_original_transaction_id) }
            if (sequence != nil) { try container.encode(sequence, forKey: .sequence) }
            if (is_scheduled != nil) { try container.encode(is_scheduled, forKey: .is_scheduled) }
            if (initiator != nil) { try container.encode(initiator, forKey: .initiator) }
            if (installment_info != nil) { try container.encode(installment_info, forKey: .installment_info) }
        }
    }

}