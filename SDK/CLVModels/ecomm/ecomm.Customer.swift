/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Ecomm {

    public class Customer: Codable {

        /// Unique identifier for the object.
        public var id: String?
        /// String representing the objectâ€™s type. Objects of the same type share the same value.
        public var object: String?
        /// Time at which the object was created. Measured in seconds since the Unix epoch.
        public var created: Int64?
        /// Three-letter ISO currency code. Must be a supported currency.
        public var currency: CLVModels.Variant?
        /// default source
        public var default_source: CLVModels.Variant?
        /// The email address of the customer
        public var email: CLVModels.Variant?
        /// The phone number of the customer
        public var phone: CLVModels.Variant?
        /// Full name of the customer.
        public var name: CLVModels.Variant?
        /// First/given name of the customer.
        public var firstName: CLVModels.Variant?
        /// Last name /surname of the customer.
        public var lastName: CLVModels.Variant?
        /// List of items constituting the Source
        public var sources: CLVModels.Ecomm.SourceList?
        /// Shipping information such as customer name and address
        public var shipping: CLVModels.Ecomm.Shipping?
        /// Customer Business Name
        public var businessName: CLVModels.Variant?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case object
            case created
            case currency
            case default_source
            case email
            case phone
            case name
            case firstName
            case lastName
            case sources
            case shipping
            case businessName
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.object = try rootContainer.decodeIfPresent(String.self, forKey: .object)
            } catch {
                decodeError.append(error)
            }
            do {
                self.created = try rootContainer.decodeIfPresent(Int64.self, forKey: .created)
            } catch {
                decodeError.append(error)
            }
            do {
                self.currency = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .currency)
            } catch {
                decodeError.append(error)
            }
            do {
                self.default_source = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .default_source)
            } catch {
                decodeError.append(error)
            }
            do {
                self.email = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .email)
            } catch {
                decodeError.append(error)
            }
            do {
                self.phone = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .phone)
            } catch {
                decodeError.append(error)
            }
            do {
                self.name = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .name)
            } catch {
                decodeError.append(error)
            }
            do {
                self.firstName = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .firstName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.lastName = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .lastName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.sources = try rootContainer.decodeIfPresent(CLVModels.Ecomm.SourceList.self, forKey: .sources)
            } catch {
                decodeError.append(error)
            }
            do {
                self.shipping = try rootContainer.decodeIfPresent(CLVModels.Ecomm.Shipping.self, forKey: .shipping)
            } catch {
                decodeError.append(error)
            }
            do {
                self.businessName = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .businessName)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (object != nil) { try container.encode(object, forKey: .object) }
            if (created != nil) { try container.encode(created, forKey: .created) }
            if (currency != nil) { try container.encode(currency, forKey: .currency) }
            if (default_source != nil) { try container.encode(default_source, forKey: .default_source) }
            if (email != nil) { try container.encode(email, forKey: .email) }
            if (phone != nil) { try container.encode(phone, forKey: .phone) }
            if (name != nil) { try container.encode(name, forKey: .name) }
            if (firstName != nil) { try container.encode(firstName, forKey: .firstName) }
            if (lastName != nil) { try container.encode(lastName, forKey: .lastName) }
            if (sources != nil) { try container.encode(sources, forKey: .sources) }
            if (shipping != nil) { try container.encode(shipping, forKey: .shipping) }
            if (businessName != nil) { try container.encode(businessName, forKey: .businessName) }
        }
    }

}