/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Ecomm {

    public class OrderStatusTransition: Codable {

        public var cancelled: CLVModels.Variant?
        public var fulfilled: CLVModels.Variant?
        public var paid: CLVModels.Variant?
        public var returned: CLVModels.Variant?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case cancelled
            case fulfilled
            case paid
            case returned
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.cancelled = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .cancelled)
            } catch {
                decodeError.append(error)
            }
            do {
                self.fulfilled = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .fulfilled)
            } catch {
                decodeError.append(error)
            }
            do {
                self.paid = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .paid)
            } catch {
                decodeError.append(error)
            }
            do {
                self.returned = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .returned)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (cancelled != nil) { try container.encode(cancelled, forKey: .cancelled) }
            if (fulfilled != nil) { try container.encode(fulfilled, forKey: .fulfilled) }
            if (paid != nil) { try container.encode(paid, forKey: .paid) }
            if (returned != nil) { try container.encode(returned, forKey: .returned) }
        }
    }

}