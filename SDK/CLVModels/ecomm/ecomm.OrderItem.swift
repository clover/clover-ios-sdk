/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Ecomm {

    public class OrderItem: Codable {

        public var type_: CLVModels.Ecomm.item_type?
        /// String representing the objectâ€™s type. Objects of the same type share the same value.
        public var object: String?
        /// Parent id, e.g., inventory item id or tax rate id
        public var parent: CLVModels.Variant?
        /// Quantity the inventory item
        public var quantity: CLVModels.Variant?
        /// Amount to charge
        public var amount: CLVModels.Variant?
        /// Three-letter ISO currency code. Must be a supported currency.
        public var currency: CLVModels.Variant?
        /// Order item description
        public var description_: CLVModels.Variant?
        /// Tax rates that apply to this line item
        public var tax_rates: [CLVModels.Ecomm.TaxRate]?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case type
            case object
            case parent
            case quantity
            case amount
            case currency
            case description
            case tax_rates
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.type_ = try rootContainer.decodeIfPresent(CLVModels.Ecomm.item_type.self, forKey: .type)
            } catch {
                decodeError.append(error)
            }
            do {
                self.object = try rootContainer.decodeIfPresent(String.self, forKey: .object)
            } catch {
                decodeError.append(error)
            }
            do {
                self.parent = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .parent)
            } catch {
                decodeError.append(error)
            }
            do {
                self.quantity = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .quantity)
            } catch {
                decodeError.append(error)
            }
            do {
                self.amount = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .amount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.currency = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .currency)
            } catch {
                decodeError.append(error)
            }
            do {
                self.description_ = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .description)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.tax_rates)) {
                do {
                    let tax_ratesContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .tax_rates)
                    self.tax_rates = try tax_ratesContainer.decodeIfPresent([CLVModels.Ecomm.TaxRate].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (type_ != nil) { try container.encode(type_, forKey: .type) }
            if (object != nil) { try container.encode(object, forKey: .object) }
            if (parent != nil) { try container.encode(parent, forKey: .parent) }
            if (quantity != nil) { try container.encode(quantity, forKey: .quantity) }
            if (amount != nil) { try container.encode(amount, forKey: .amount) }
            if (currency != nil) { try container.encode(currency, forKey: .currency) }
            if (description_ != nil) { try container.encode(description_, forKey: .description) }
            if (tax_rates != nil) { try container.encode(tax_rates, forKey: .tax_rates) }
        }
    }

}