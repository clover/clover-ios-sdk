/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Employees {

    public class EmployeeCard: Codable {

        /// Unique identifier
        public var id: String?
        /// The merchant the card belongs to
        public var merchant: CLVModels.Base.Reference?
        /// The employee who the card is currently assigned to
        public var employee: CLVModels.Base.Reference?
        /// The employee who last updated the card's state
        public var updater: CLVModels.Base.Reference?
        /// Unique number on the employee card.
        public var number: String?
        /// Current status of the employee card
        public var status: CLVModels.Employees.EmployeeCardStatus?
        /// Timestamp of when this employee card was created
        public var createdTime: Date?
        /// Timestamp of when this employee card was last updated
        public var modifiedTime: Date?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case merchant
            case employee
            case updater
            case number
            case status
            case createdTime
            case modifiedTime
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.merchant = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .merchant)
            } catch {
                decodeError.append(error)
            }
            do {
                self.employee = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .employee)
            } catch {
                decodeError.append(error)
            }
            do {
                self.updater = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .updater)
            } catch {
                decodeError.append(error)
            }
            do {
                self.number = try rootContainer.decodeIfPresent(String.self, forKey: .number)
            } catch {
                decodeError.append(error)
            }
            do {
                self.status = try rootContainer.decodeIfPresent(CLVModels.Employees.EmployeeCardStatus.self, forKey: .status)
            } catch {
                decodeError.append(error)
            }
            do {
                self.createdTime = try rootContainer.decodeIfPresent(Date.self, forKey: .createdTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.modifiedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .modifiedTime)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (merchant != nil) { try container.encode(merchant, forKey: .merchant) }
            if (employee != nil) { try container.encode(employee, forKey: .employee) }
            if (updater != nil) { try container.encode(updater, forKey: .updater) }
            if (number != nil) { try container.encode(number, forKey: .number) }
            if (status != nil) { try container.encode(status, forKey: .status) }
            if (createdTime != nil) { try container.encode(createdTime, forKey: .createdTime) }
            if (modifiedTime != nil) { try container.encode(modifiedTime, forKey: .modifiedTime) }
        }
    }

}