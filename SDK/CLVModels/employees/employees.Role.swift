/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Employees {

    public class Role: Codable {

        /// Unique identifier
        public var id: String?
        /// Full name of the role
        public var name: String?
        /// Base System Role
        public var systemRole: CLVModels.Employees.AccountRole?
        /// employees with this role
        public var employeesRef: [CLVModels.Base.Reference]?
        /// The merchant this role belongs to.
        public var merchant: CLVModels.Base.Reference?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case name
            case systemRole
            case employeesRef
            case merchant
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.name = try rootContainer.decodeIfPresent(String.self, forKey: .name)
            } catch {
                decodeError.append(error)
            }
            do {
                self.systemRole = try rootContainer.decodeIfPresent(CLVModels.Employees.AccountRole.self, forKey: .systemRole)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.employeesRef)) {
                do {
                    let employeesRefContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .employeesRef)
                    self.employeesRef = try employeesRefContainer.decodeIfPresent([CLVModels.Base.Reference].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            do {
                self.merchant = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .merchant)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (name != nil) { try container.encode(name, forKey: .name) }
            if (systemRole != nil) { try container.encode(systemRole, forKey: .systemRole) }
            if (employeesRef != nil) { try container.encode(employeesRef, forKey: .employeesRef) }
            if (merchant != nil) { try container.encode(merchant, forKey: .merchant) }
        }
    }

}