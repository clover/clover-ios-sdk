/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Employees {

    public class PermissionSetRole: Codable {

        /// Not a normal Clover ID
        public var id: String?
        /// The role
        public var role: CLVModels.Base.Reference?
        /// The role
        public var permissionSet: CLVModels.Base.Reference?
        public var modified_time: Int64?
        public var deleted_time: CLVModels.Variant?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case role
            case permissionSet
            case modified_time
            case deleted_time
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.role = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .role)
            } catch {
                decodeError.append(error)
            }
            do {
                self.permissionSet = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .permissionSet)
            } catch {
                decodeError.append(error)
            }
            do {
                self.modified_time = try rootContainer.decodeIfPresent(Int64.self, forKey: .modified_time)
            } catch {
                decodeError.append(error)
            }
            do {
                self.deleted_time = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .deleted_time)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (role != nil) { try container.encode(role, forKey: .role) }
            if (permissionSet != nil) { try container.encode(permissionSet, forKey: .permissionSet) }
            if (modified_time != nil) { try container.encode(modified_time, forKey: .modified_time) }
            if (deleted_time != nil) { try container.encode(deleted_time, forKey: .deleted_time) }
        }
    }

}