/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Employees {

    public class Permissions: Codable {

        /// Unique identifier
        public var id: String?
        /// A bitmap representing the permissions
        public var bits: Int64?
        /// A readable list of permissions
        public var readablePermissions: [CLVModels.Employees.Permission]?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case bits
            case readablePermissions
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.bits = try rootContainer.decodeIfPresent(Int64.self, forKey: .bits)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.readablePermissions)) {
                do {
                    let readablePermissionsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .readablePermissions)
                    self.readablePermissions = try readablePermissionsContainer.decodeIfPresent([CLVModels.Employees.Permission].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (bits != nil) { try container.encode(bits, forKey: .bits) }
            if (readablePermissions != nil) { try container.encode(readablePermissions, forKey: .readablePermissions) }
        }
    }

}