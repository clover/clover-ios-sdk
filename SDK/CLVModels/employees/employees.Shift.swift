/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Employees {

    public class Shift: Codable {

        /// Unique identifier
        public var id: String?
        /// The employee that worked this shift
        public var employee: CLVModels.Employees.Employee?
        /// Amount of cash tips collected
        public var cashTipsCollected: Int64?
        /// Whether the employee used server banking
        public var serverBanking: Bool?
        /// Clock in time
        public var inTime: Date?
        /// Overridden clock in time
        public var overrideInTime: Date?
        /// The employee who overrode the clock in time
        public var overrideInEmployee: CLVModels.Employees.Employee?
        /// Clock out time
        public var outTime: Date?
        /// Overridden clock out time
        public var overrideOutTime: Date?
        /// The employee who overrode the clock out time
        public var overrideOutEmployee: CLVModels.Employees.Employee?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case employee
            case cashTipsCollected
            case serverBanking
            case inTime
            case overrideInTime
            case overrideInEmployee
            case outTime
            case overrideOutTime
            case overrideOutEmployee
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.employee = try rootContainer.decodeIfPresent(CLVModels.Employees.Employee.self, forKey: .employee)
            } catch {
                decodeError.append(error)
            }
            do {
                self.cashTipsCollected = try rootContainer.decodeIfPresent(Int64.self, forKey: .cashTipsCollected)
            } catch {
                decodeError.append(error)
            }
            do {
                self.serverBanking = try rootContainer.decodeIfPresent(Bool.self, forKey: .serverBanking)
            } catch {
                decodeError.append(error)
            }
            do {
                self.inTime = try rootContainer.decodeIfPresent(Date.self, forKey: .inTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.overrideInTime = try rootContainer.decodeIfPresent(Date.self, forKey: .overrideInTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.overrideInEmployee = try rootContainer.decodeIfPresent(CLVModels.Employees.Employee.self, forKey: .overrideInEmployee)
            } catch {
                decodeError.append(error)
            }
            do {
                self.outTime = try rootContainer.decodeIfPresent(Date.self, forKey: .outTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.overrideOutTime = try rootContainer.decodeIfPresent(Date.self, forKey: .overrideOutTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.overrideOutEmployee = try rootContainer.decodeIfPresent(CLVModels.Employees.Employee.self, forKey: .overrideOutEmployee)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (employee != nil) { try container.encode(employee, forKey: .employee) }
            if (cashTipsCollected != nil) { try container.encode(cashTipsCollected, forKey: .cashTipsCollected) }
            if (serverBanking != nil) { try container.encode(serverBanking, forKey: .serverBanking) }
            if (inTime != nil) { try container.encode(inTime, forKey: .inTime) }
            if (overrideInTime != nil) { try container.encode(overrideInTime, forKey: .overrideInTime) }
            if (overrideInEmployee != nil) { try container.encode(overrideInEmployee, forKey: .overrideInEmployee) }
            if (outTime != nil) { try container.encode(outTime, forKey: .outTime) }
            if (overrideOutTime != nil) { try container.encode(overrideOutTime, forKey: .overrideOutTime) }
            if (overrideOutEmployee != nil) { try container.encode(overrideOutEmployee, forKey: .overrideOutEmployee) }
        }
    }

}