/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Device {

    public class Rom: Codable {

        /// Unique identifier
        public var id: String?
        /// When the ROM was created
        public var createdAt: Int64?
        public var version_: Int64?
        public var versionName: String?
        public var description_: String?
        public var buildType: CLVModels.Device.RomBuildType?
        public var isCritical: Bool?
        public var published: Bool?
        public var enabled: Bool?
        /// When the ROM was associated with a merchant group
        public var associationTime: Date?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case createdAt
            case version
            case versionName
            case description
            case buildType
            case isCritical
            case published
            case enabled
            case associationTime
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.createdAt = try rootContainer.decodeIfPresent(Int64.self, forKey: .createdAt)
            } catch {
                decodeError.append(error)
            }
            do {
                self.version_ = try rootContainer.decodeIfPresent(Int64.self, forKey: .version)
            } catch {
                decodeError.append(error)
            }
            do {
                self.versionName = try rootContainer.decodeIfPresent(String.self, forKey: .versionName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.description_ = try rootContainer.decodeIfPresent(String.self, forKey: .description)
            } catch {
                decodeError.append(error)
            }
            do {
                self.buildType = try rootContainer.decodeIfPresent(CLVModels.Device.RomBuildType.self, forKey: .buildType)
            } catch {
                decodeError.append(error)
            }
            do {
                self.isCritical = try rootContainer.decodeIfPresent(Bool.self, forKey: .isCritical)
            } catch {
                decodeError.append(error)
            }
            do {
                self.published = try rootContainer.decodeIfPresent(Bool.self, forKey: .published)
            } catch {
                decodeError.append(error)
            }
            do {
                self.enabled = try rootContainer.decodeIfPresent(Bool.self, forKey: .enabled)
            } catch {
                decodeError.append(error)
            }
            do {
                self.associationTime = try rootContainer.decodeIfPresent(Date.self, forKey: .associationTime)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (createdAt != nil) { try container.encode(createdAt, forKey: .createdAt) }
            if (version_ != nil) { try container.encode(version_, forKey: .version) }
            if (versionName != nil) { try container.encode(versionName, forKey: .versionName) }
            if (description_ != nil) { try container.encode(description_, forKey: .description) }
            if (buildType != nil) { try container.encode(buildType, forKey: .buildType) }
            if (isCritical != nil) { try container.encode(isCritical, forKey: .isCritical) }
            if (published != nil) { try container.encode(published, forKey: .published) }
            if (enabled != nil) { try container.encode(enabled, forKey: .enabled) }
            if (associationTime != nil) { try container.encode(associationTime, forKey: .associationTime) }
        }
    }

}