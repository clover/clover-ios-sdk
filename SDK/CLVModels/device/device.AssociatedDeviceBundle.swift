/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Device {

    public class AssociatedDeviceBundle: Codable {

        /// Unique identifier
        public var id: String?
        public var bundleIndicator: String?
        /// The time that the device bundle was created
        public var createdTime: Date?
        /// The time that the device bundle was deleted
        public var deletedTime: Date?
        /// The time that the device bundle was associated to a device
        public var associatedTime: Date?
        /// The time that the device bundle was disassociated from a device
        public var disassociatedTime: Date?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case bundleIndicator
            case createdTime
            case deletedTime
            case associatedTime
            case disassociatedTime
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.bundleIndicator = try rootContainer.decodeIfPresent(String.self, forKey: .bundleIndicator)
            } catch {
                decodeError.append(error)
            }
            do {
                self.createdTime = try rootContainer.decodeIfPresent(Date.self, forKey: .createdTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.deletedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .deletedTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.associatedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .associatedTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.disassociatedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .disassociatedTime)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (bundleIndicator != nil) { try container.encode(bundleIndicator, forKey: .bundleIndicator) }
            if (createdTime != nil) { try container.encode(createdTime, forKey: .createdTime) }
            if (deletedTime != nil) { try container.encode(deletedTime, forKey: .deletedTime) }
            if (associatedTime != nil) { try container.encode(associatedTime, forKey: .associatedTime) }
            if (disassociatedTime != nil) { try container.encode(disassociatedTime, forKey: .disassociatedTime) }
        }
    }

}