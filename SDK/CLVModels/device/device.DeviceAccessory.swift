/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Device {

    public class DeviceAccessory: Codable {

        /// Unique identifier
        public var id: String?
        public var model: String?
        /// The accessories' serial number.
        public var serial: String?
        /// The device that this accessory is currently connected to, a 128-bit UUID, not a normal base-13 Clover ID.
        public var associatedDevice: CLVModels.Base.Reference?
        public var cpuId: String?
        public var pedCertificate: String?
        public var buildType: CLVModels.Device.DeviceAccessoryBuildType?
        public var deviceType: CLVModels.Base.Reference?
        public var versionCode: Int64?
        public var currentRom: CLVModels.Base.Reference?
        public var secureReports: [CLVModels.Base.Reference]?
        public var createdTime: Date?
        public var modifiedTime: Date?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case model
            case serial
            case associatedDevice
            case cpuId
            case pedCertificate
            case buildType
            case deviceType
            case versionCode
            case currentRom
            case secureReports
            case createdTime
            case modifiedTime
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.model = try rootContainer.decodeIfPresent(String.self, forKey: .model)
            } catch {
                decodeError.append(error)
            }
            do {
                self.serial = try rootContainer.decodeIfPresent(String.self, forKey: .serial)
            } catch {
                decodeError.append(error)
            }
            do {
                self.associatedDevice = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .associatedDevice)
            } catch {
                decodeError.append(error)
            }
            do {
                self.cpuId = try rootContainer.decodeIfPresent(String.self, forKey: .cpuId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.pedCertificate = try rootContainer.decodeIfPresent(String.self, forKey: .pedCertificate)
            } catch {
                decodeError.append(error)
            }
            do {
                self.buildType = try rootContainer.decodeIfPresent(CLVModels.Device.DeviceAccessoryBuildType.self, forKey: .buildType)
            } catch {
                decodeError.append(error)
            }
            do {
                self.deviceType = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .deviceType)
            } catch {
                decodeError.append(error)
            }
            do {
                self.versionCode = try rootContainer.decodeIfPresent(Int64.self, forKey: .versionCode)
            } catch {
                decodeError.append(error)
            }
            do {
                self.currentRom = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .currentRom)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.secureReports)) {
                do {
                    let secureReportsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .secureReports)
                    self.secureReports = try secureReportsContainer.decodeIfPresent([CLVModels.Base.Reference].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            do {
                self.createdTime = try rootContainer.decodeIfPresent(Date.self, forKey: .createdTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.modifiedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .modifiedTime)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (model != nil) { try container.encode(model, forKey: .model) }
            if (serial != nil) { try container.encode(serial, forKey: .serial) }
            if (associatedDevice != nil) { try container.encode(associatedDevice, forKey: .associatedDevice) }
            if (cpuId != nil) { try container.encode(cpuId, forKey: .cpuId) }
            if (pedCertificate != nil) { try container.encode(pedCertificate, forKey: .pedCertificate) }
            if (buildType != nil) { try container.encode(buildType, forKey: .buildType) }
            if (deviceType != nil) { try container.encode(deviceType, forKey: .deviceType) }
            if (versionCode != nil) { try container.encode(versionCode, forKey: .versionCode) }
            if (currentRom != nil) { try container.encode(currentRom, forKey: .currentRom) }
            if (secureReports != nil) { try container.encode(secureReports, forKey: .secureReports) }
            if (createdTime != nil) { try container.encode(createdTime, forKey: .createdTime) }
            if (modifiedTime != nil) { try container.encode(modifiedTime, forKey: .modifiedTime) }
        }
    }

}