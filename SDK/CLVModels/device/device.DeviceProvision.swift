/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Device {

    public class DeviceProvision: Codable {

        /// Unique identifier
        public var id: String?
        /// A 128-bit UUID, not a normal base-13 Clover ID.
        public var deviceRef: CLVModels.Base.Reference?
        public var state: CLVModels.Device.DeviceProvisionState?
        public var lastActivationCode: String?
        public var activationCode: String?
        public var emailSent: Bool?
        public var hasShipment: Bool?
        public var shipment: CLVModels.Base.Reference?
        public var serialNumber: String?
        /// chip uid associated with the device provisioned.
        public var chip_uid: String?
        /// imei associated with the device provisioned.
        public var imei: String?
        public var merchant: CLVModels.Base.Reference?
        public var deviceType: String?
        public var provisionedTime: Date?
        public var activatedTime: Date?
        /// Date/time the activation code was created.
        public var activationCodeCreatedTime: Date?
        public var terminalId: String?
        public var reseller: CLVModels.Base.Reference?
        public var currentRom: CLVModels.Base.Reference?
        public var currentSecureBoardRom: CLVModels.Base.Reference?
        public var bundleIndicator: String?
        public var modifiedTime: Date?
        /// Date/time this Device Provision was deleted.
        public var deletedTime: Date?
        public var deviceWarrantyRef: CLVModels.Base.Reference?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case deviceRef
            case state
            case lastActivationCode
            case activationCode
            case emailSent
            case hasShipment
            case shipment
            case serialNumber
            case chip_uid
            case imei
            case merchant
            case deviceType
            case provisionedTime
            case activatedTime
            case activationCodeCreatedTime
            case terminalId
            case reseller
            case currentRom
            case currentSecureBoardRom
            case bundleIndicator
            case modifiedTime
            case deletedTime
            case deviceWarrantyRef
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.deviceRef = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .deviceRef)
            } catch {
                decodeError.append(error)
            }
            do {
                self.state = try rootContainer.decodeIfPresent(CLVModels.Device.DeviceProvisionState.self, forKey: .state)
            } catch {
                decodeError.append(error)
            }
            do {
                self.lastActivationCode = try rootContainer.decodeIfPresent(String.self, forKey: .lastActivationCode)
            } catch {
                decodeError.append(error)
            }
            do {
                self.activationCode = try rootContainer.decodeIfPresent(String.self, forKey: .activationCode)
            } catch {
                decodeError.append(error)
            }
            do {
                self.emailSent = try rootContainer.decodeIfPresent(Bool.self, forKey: .emailSent)
            } catch {
                decodeError.append(error)
            }
            do {
                self.hasShipment = try rootContainer.decodeIfPresent(Bool.self, forKey: .hasShipment)
            } catch {
                decodeError.append(error)
            }
            do {
                self.shipment = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .shipment)
            } catch {
                decodeError.append(error)
            }
            do {
                self.serialNumber = try rootContainer.decodeIfPresent(String.self, forKey: .serialNumber)
            } catch {
                decodeError.append(error)
            }
            do {
                self.chip_uid = try rootContainer.decodeIfPresent(String.self, forKey: .chip_uid)
            } catch {
                decodeError.append(error)
            }
            do {
                self.imei = try rootContainer.decodeIfPresent(String.self, forKey: .imei)
            } catch {
                decodeError.append(error)
            }
            do {
                self.merchant = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .merchant)
            } catch {
                decodeError.append(error)
            }
            do {
                self.deviceType = try rootContainer.decodeIfPresent(String.self, forKey: .deviceType)
            } catch {
                decodeError.append(error)
            }
            do {
                self.provisionedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .provisionedTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.activatedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .activatedTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.activationCodeCreatedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .activationCodeCreatedTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.terminalId = try rootContainer.decodeIfPresent(String.self, forKey: .terminalId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.reseller = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .reseller)
            } catch {
                decodeError.append(error)
            }
            do {
                self.currentRom = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .currentRom)
            } catch {
                decodeError.append(error)
            }
            do {
                self.currentSecureBoardRom = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .currentSecureBoardRom)
            } catch {
                decodeError.append(error)
            }
            do {
                self.bundleIndicator = try rootContainer.decodeIfPresent(String.self, forKey: .bundleIndicator)
            } catch {
                decodeError.append(error)
            }
            do {
                self.modifiedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .modifiedTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.deletedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .deletedTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.deviceWarrantyRef = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .deviceWarrantyRef)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (deviceRef != nil) { try container.encode(deviceRef, forKey: .deviceRef) }
            if (state != nil) { try container.encode(state, forKey: .state) }
            if (lastActivationCode != nil) { try container.encode(lastActivationCode, forKey: .lastActivationCode) }
            if (activationCode != nil) { try container.encode(activationCode, forKey: .activationCode) }
            if (emailSent != nil) { try container.encode(emailSent, forKey: .emailSent) }
            if (hasShipment != nil) { try container.encode(hasShipment, forKey: .hasShipment) }
            if (shipment != nil) { try container.encode(shipment, forKey: .shipment) }
            if (serialNumber != nil) { try container.encode(serialNumber, forKey: .serialNumber) }
            if (chip_uid != nil) { try container.encode(chip_uid, forKey: .chip_uid) }
            if (imei != nil) { try container.encode(imei, forKey: .imei) }
            if (merchant != nil) { try container.encode(merchant, forKey: .merchant) }
            if (deviceType != nil) { try container.encode(deviceType, forKey: .deviceType) }
            if (provisionedTime != nil) { try container.encode(provisionedTime, forKey: .provisionedTime) }
            if (activatedTime != nil) { try container.encode(activatedTime, forKey: .activatedTime) }
            if (activationCodeCreatedTime != nil) { try container.encode(activationCodeCreatedTime, forKey: .activationCodeCreatedTime) }
            if (terminalId != nil) { try container.encode(terminalId, forKey: .terminalId) }
            if (reseller != nil) { try container.encode(reseller, forKey: .reseller) }
            if (currentRom != nil) { try container.encode(currentRom, forKey: .currentRom) }
            if (currentSecureBoardRom != nil) { try container.encode(currentSecureBoardRom, forKey: .currentSecureBoardRom) }
            if (bundleIndicator != nil) { try container.encode(bundleIndicator, forKey: .bundleIndicator) }
            if (modifiedTime != nil) { try container.encode(modifiedTime, forKey: .modifiedTime) }
            if (deletedTime != nil) { try container.encode(deletedTime, forKey: .deletedTime) }
            if (deviceWarrantyRef != nil) { try container.encode(deviceWarrantyRef, forKey: .deviceWarrantyRef) }
        }
    }

}