/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
    Request to update the ROM metadata for a device accessory.
*/

import Foundation

extension CLVModels.Device {

    public class AccessoryRomMetadataUpdateRequest: Codable {

        public var cpuId: String?
        public var version_: Int32?
        public var buildType: String?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case cpuId
            case version
            case buildType
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.cpuId = try rootContainer.decodeIfPresent(String.self, forKey: .cpuId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.version_ = try rootContainer.decodeIfPresent(Int32.self, forKey: .version)
            } catch {
                decodeError.append(error)
            }
            do {
                self.buildType = try rootContainer.decodeIfPresent(String.self, forKey: .buildType)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (cpuId != nil) { try container.encode(cpuId, forKey: .cpuId) }
            if (version_ != nil) { try container.encode(version_, forKey: .version) }
            if (buildType != nil) { try container.encode(buildType, forKey: .buildType) }
        }
    }

}