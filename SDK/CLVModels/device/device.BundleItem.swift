/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Device {

    public class BundleItem: Codable {

        public var equipmentCode: String?
        public var equipmentCodeDesc: String?
        public var quantity: Int32?
        public var version_: Int32?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case equipmentCode
            case equipmentCodeDesc
            case quantity
            case version
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.equipmentCode = try rootContainer.decodeIfPresent(String.self, forKey: .equipmentCode)
            } catch {
                decodeError.append(error)
            }
            do {
                self.equipmentCodeDesc = try rootContainer.decodeIfPresent(String.self, forKey: .equipmentCodeDesc)
            } catch {
                decodeError.append(error)
            }
            do {
                self.quantity = try rootContainer.decodeIfPresent(Int32.self, forKey: .quantity)
            } catch {
                decodeError.append(error)
            }
            do {
                self.version_ = try rootContainer.decodeIfPresent(Int32.self, forKey: .version)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (equipmentCode != nil) { try container.encode(equipmentCode, forKey: .equipmentCode) }
            if (equipmentCodeDesc != nil) { try container.encode(equipmentCodeDesc, forKey: .equipmentCodeDesc) }
            if (quantity != nil) { try container.encode(quantity, forKey: .quantity) }
            if (version_ != nil) { try container.encode(version_, forKey: .version) }
        }
    }

}