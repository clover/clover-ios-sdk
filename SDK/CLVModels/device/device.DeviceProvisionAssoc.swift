/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Device {

    public class DeviceProvisionAssoc: Codable {

        public var serialNumber: String?
        public var associatedId: String?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case serialNumber
            case associatedId
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.serialNumber = try rootContainer.decodeIfPresent(String.self, forKey: .serialNumber)
            } catch {
                decodeError.append(error)
            }
            do {
                self.associatedId = try rootContainer.decodeIfPresent(String.self, forKey: .associatedId)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (serialNumber != nil) { try container.encode(serialNumber, forKey: .serialNumber) }
            if (associatedId != nil) { try container.encode(associatedId, forKey: .associatedId) }
        }
    }

}