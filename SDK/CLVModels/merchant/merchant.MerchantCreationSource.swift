/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

extension CLVModels.Merchant {

    public enum MerchantCreationSource: Codable {
        case FDPOS
        case IPG
        case CC
        case GOR_INTERNAL
        case FDPOS_INTERNAL
        case IPG_INTERNAL
        case SELF_BOARDING
        case DASHBOARD
        case MERCHANT_CLAIM
        case DEVELOPER_CLAIM
        case FISERV_SBA
        case PARTNER_SBA
        case SBA_HIPAA_EXEMPT
        case PARSE_UNKNOWN(String)

        enum Key: CodingKey {
            case rawValue
        }

        public init(rawValue:String) {
            switch rawValue {
                case  "FDPOS":
                    self = .FDPOS
                case  "IPG":
                    self = .IPG
                case  "CC":
                    self = .CC
                case  "GOR_INTERNAL":
                    self = .GOR_INTERNAL
                case  "FDPOS_INTERNAL":
                    self = .FDPOS_INTERNAL
                case  "IPG_INTERNAL":
                    self = .IPG_INTERNAL
                case  "SELF_BOARDING":
                    self = .SELF_BOARDING
                case  "DASHBOARD":
                    self = .DASHBOARD
                case  "MERCHANT_CLAIM":
                    self = .MERCHANT_CLAIM
                case  "DEVELOPER_CLAIM":
                    self = .DEVELOPER_CLAIM
                case  "FISERV_SBA":
                    self = .FISERV_SBA
                case  "PARTNER_SBA":
                    self = .PARTNER_SBA
                case  "SBA_HIPAA_EXEMPT":
                    self = .SBA_HIPAA_EXEMPT
                default:
                    self = .PARSE_UNKNOWN(rawValue)
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self.init(rawValue: rawValue)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(toString)
        }

        public var toString: String {
            switch self {
                case  .FDPOS:
                    return "FDPOS"
                case  .IPG:
                    return "IPG"
                case  .CC:
                    return "CC"
                case  .GOR_INTERNAL:
                    return "GOR_INTERNAL"
                case  .FDPOS_INTERNAL:
                    return "FDPOS_INTERNAL"
                case  .IPG_INTERNAL:
                    return "IPG_INTERNAL"
                case  .SELF_BOARDING:
                    return "SELF_BOARDING"
                case  .DASHBOARD:
                    return "DASHBOARD"
                case  .MERCHANT_CLAIM:
                    return "MERCHANT_CLAIM"
                case  .DEVELOPER_CLAIM:
                    return "DEVELOPER_CLAIM"
                case  .FISERV_SBA:
                    return "FISERV_SBA"
                case  .PARTNER_SBA:
                    return "PARTNER_SBA"
                case  .SBA_HIPAA_EXEMPT:
                    return "SBA_HIPAA_EXEMPT"
                case .PARSE_UNKNOWN(let rawValue):
                    return rawValue            
            }
        }
    }
}