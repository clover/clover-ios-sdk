/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

extension CLVModels.Merchant {

    public enum DeviceBundleStateEnum: Codable {
        case COMPLETE
        case BROKEN
        case UNBUNDLED
        case BOARDING_PROVISION_DISCONNECT
        case BOARDING_PROVISION_BUNDLE_CONFLICT
        case BROKEN_PROVISION
        case BROKEN_BOARDING
        case PARSE_UNKNOWN(String)

        enum Key: CodingKey {
            case rawValue
        }

        public init(rawValue:String) {
            switch rawValue {
                case  "COMPLETE":
                    self = .COMPLETE
                case  "BROKEN":
                    self = .BROKEN
                case  "UNBUNDLED":
                    self = .UNBUNDLED
                case  "BOARDING_PROVISION_DISCONNECT":
                    self = .BOARDING_PROVISION_DISCONNECT
                case  "BOARDING_PROVISION_BUNDLE_CONFLICT":
                    self = .BOARDING_PROVISION_BUNDLE_CONFLICT
                case  "BROKEN_PROVISION":
                    self = .BROKEN_PROVISION
                case  "BROKEN_BOARDING":
                    self = .BROKEN_BOARDING
                default:
                    self = .PARSE_UNKNOWN(rawValue)
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self.init(rawValue: rawValue)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(toString)
        }

        public var toString: String {
            switch self {
                case  .COMPLETE:
                    return "COMPLETE"
                case  .BROKEN:
                    return "BROKEN"
                case  .UNBUNDLED:
                    return "UNBUNDLED"
                case  .BOARDING_PROVISION_DISCONNECT:
                    return "BOARDING_PROVISION_DISCONNECT"
                case  .BOARDING_PROVISION_BUNDLE_CONFLICT:
                    return "BOARDING_PROVISION_BUNDLE_CONFLICT"
                case  .BROKEN_PROVISION:
                    return "BROKEN_PROVISION"
                case  .BROKEN_BOARDING:
                    return "BROKEN_BOARDING"
                case .PARSE_UNKNOWN(let rawValue):
                    return rawValue            
            }
        }
    }
}