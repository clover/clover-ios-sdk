/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Merchant {

    public class MerchantBillingInfo: Codable {

        /// Returns true if all plans are billable for the specific merchant.
        public var planBillable: Bool?
        /// Returns true if all apps are billable for the specific merchant.
        public var appBillable: Bool?
        /// Returns true if the WM app is billable for the specific merchant.
        public var wmBillable: Bool?
        /// Returns true if all plans are exportable for the specific merchant.
        public var planExportable: Bool?
        /// Returns true if all apps are exportable for the specific merchant.
        public var appExportable: Bool?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case planBillable
            case appBillable
            case wmBillable
            case planExportable
            case appExportable
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.planBillable = try rootContainer.decodeIfPresent(Bool.self, forKey: .planBillable)
            } catch {
                decodeError.append(error)
            }
            do {
                self.appBillable = try rootContainer.decodeIfPresent(Bool.self, forKey: .appBillable)
            } catch {
                decodeError.append(error)
            }
            do {
                self.wmBillable = try rootContainer.decodeIfPresent(Bool.self, forKey: .wmBillable)
            } catch {
                decodeError.append(error)
            }
            do {
                self.planExportable = try rootContainer.decodeIfPresent(Bool.self, forKey: .planExportable)
            } catch {
                decodeError.append(error)
            }
            do {
                self.appExportable = try rootContainer.decodeIfPresent(Bool.self, forKey: .appExportable)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (planBillable != nil) { try container.encode(planBillable, forKey: .planBillable) }
            if (appBillable != nil) { try container.encode(appBillable, forKey: .appBillable) }
            if (wmBillable != nil) { try container.encode(wmBillable, forKey: .wmBillable) }
            if (planExportable != nil) { try container.encode(planExportable, forKey: .planExportable) }
            if (appExportable != nil) { try container.encode(appExportable, forKey: .appExportable) }
        }
    }

}