/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Merchant {

    public class DeviceBundleState: Codable {

        /// The bundle that the state is associated with.
        public var deviceBundle: CLVModels.Base.Reference?
        /// The state of the merchant/bundle pairing.
        public var bundleState: CLVModels.Merchant.DeviceBundleStateEnum?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case deviceBundle
            case bundleState
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.deviceBundle = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .deviceBundle)
            } catch {
                decodeError.append(error)
            }
            do {
                self.bundleState = try rootContainer.decodeIfPresent(CLVModels.Merchant.DeviceBundleStateEnum.self, forKey: .bundleState)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (deviceBundle != nil) { try container.encode(deviceBundle, forKey: .deviceBundle) }
            if (bundleState != nil) { try container.encode(bundleState, forKey: .bundleState) }
        }
    }

}