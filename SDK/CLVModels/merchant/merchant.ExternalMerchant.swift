/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
    Represents external merchant data linked to a merchant
*/

import Foundation

extension CLVModels.Merchant {

    public class ExternalMerchant: Codable {

        public var merchantRef: CLVModels.Base.Reference?
        /// External merchant number
        public var externalMerchantNumber: String?
        /// Client flag
        public var clientFlag: String?
        /// Usage flag
        public var usageFlag: String?
        /// Cross reference type
        public var xrefType: String?
        /// User performing audit
        public var auditUserId: String?
        /// Date of audit
        public var auditDate: Date?
        /// Date record created
        public var createdTime: Date?
        /// Date record updated
        public var modifiedTime: Date?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case merchantRef
            case externalMerchantNumber
            case clientFlag
            case usageFlag
            case xrefType
            case auditUserId
            case auditDate
            case createdTime
            case modifiedTime
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.merchantRef = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .merchantRef)
            } catch {
                decodeError.append(error)
            }
            do {
                self.externalMerchantNumber = try rootContainer.decodeIfPresent(String.self, forKey: .externalMerchantNumber)
            } catch {
                decodeError.append(error)
            }
            do {
                self.clientFlag = try rootContainer.decodeIfPresent(String.self, forKey: .clientFlag)
            } catch {
                decodeError.append(error)
            }
            do {
                self.usageFlag = try rootContainer.decodeIfPresent(String.self, forKey: .usageFlag)
            } catch {
                decodeError.append(error)
            }
            do {
                self.xrefType = try rootContainer.decodeIfPresent(String.self, forKey: .xrefType)
            } catch {
                decodeError.append(error)
            }
            do {
                self.auditUserId = try rootContainer.decodeIfPresent(String.self, forKey: .auditUserId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.auditDate = try rootContainer.decodeIfPresent(Date.self, forKey: .auditDate)
            } catch {
                decodeError.append(error)
            }
            do {
                self.createdTime = try rootContainer.decodeIfPresent(Date.self, forKey: .createdTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.modifiedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .modifiedTime)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (merchantRef != nil) { try container.encode(merchantRef, forKey: .merchantRef) }
            if (externalMerchantNumber != nil) { try container.encode(externalMerchantNumber, forKey: .externalMerchantNumber) }
            if (clientFlag != nil) { try container.encode(clientFlag, forKey: .clientFlag) }
            if (usageFlag != nil) { try container.encode(usageFlag, forKey: .usageFlag) }
            if (xrefType != nil) { try container.encode(xrefType, forKey: .xrefType) }
            if (auditUserId != nil) { try container.encode(auditUserId, forKey: .auditUserId) }
            if (auditDate != nil) { try container.encode(auditDate, forKey: .auditDate) }
            if (createdTime != nil) { try container.encode(createdTime, forKey: .createdTime) }
            if (modifiedTime != nil) { try container.encode(modifiedTime, forKey: .modifiedTime) }
        }
    }

}