/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

extension CLVModels.Merchant {

    public enum MerchantPlanType: Codable {
        case PAYMENTS_PLUS
        case REGISTER_LITE
        case CLASSIC
        case REGISTER
        case DINING
        case QSR
        case NO_HARDWARE
        case PARSE_UNKNOWN(String)

        enum Key: CodingKey {
            case rawValue
        }

        public init(rawValue:String) {
            switch rawValue {
                case  "PAYMENTS_PLUS":
                    self = .PAYMENTS_PLUS
                case  "REGISTER_LITE":
                    self = .REGISTER_LITE
                case  "CLASSIC":
                    self = .CLASSIC
                case  "REGISTER":
                    self = .REGISTER
                case  "DINING":
                    self = .DINING
                case  "QSR":
                    self = .QSR
                case  "NO_HARDWARE":
                    self = .NO_HARDWARE
                default:
                    self = .PARSE_UNKNOWN(rawValue)
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self.init(rawValue: rawValue)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(toString)
        }

        public var toString: String {
            switch self {
                case  .PAYMENTS_PLUS:
                    return "PAYMENTS_PLUS"
                case  .REGISTER_LITE:
                    return "REGISTER_LITE"
                case  .CLASSIC:
                    return "CLASSIC"
                case  .REGISTER:
                    return "REGISTER"
                case  .DINING:
                    return "DINING"
                case  .QSR:
                    return "QSR"
                case  .NO_HARDWARE:
                    return "NO_HARDWARE"
                case .PARSE_UNKNOWN(let rawValue):
                    return rawValue            
            }
        }
    }
}