/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
    Program Express data collected from FDPOS during merchant boarding
*/

import Foundation

extension CLVModels.Merchant {

    public class MerchantProgramExpress: Codable {

        public var merchantRef: CLVModels.Base.Reference?
        /// Program Code
        public var programCode: String?
        /// Description of Program Code
        public var programCodeDescription: String?
        /// Key
        public var key: String?
        /// Key description
        public var keyDescription: String?
        /// Value
        public var value: String?
        /// Description of value
        public var valueDescription: String?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case merchantRef
            case programCode
            case programCodeDescription
            case key
            case keyDescription
            case value
            case valueDescription
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.merchantRef = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .merchantRef)
            } catch {
                decodeError.append(error)
            }
            do {
                self.programCode = try rootContainer.decodeIfPresent(String.self, forKey: .programCode)
            } catch {
                decodeError.append(error)
            }
            do {
                self.programCodeDescription = try rootContainer.decodeIfPresent(String.self, forKey: .programCodeDescription)
            } catch {
                decodeError.append(error)
            }
            do {
                self.key = try rootContainer.decodeIfPresent(String.self, forKey: .key)
            } catch {
                decodeError.append(error)
            }
            do {
                self.keyDescription = try rootContainer.decodeIfPresent(String.self, forKey: .keyDescription)
            } catch {
                decodeError.append(error)
            }
            do {
                self.value = try rootContainer.decodeIfPresent(String.self, forKey: .value)
            } catch {
                decodeError.append(error)
            }
            do {
                self.valueDescription = try rootContainer.decodeIfPresent(String.self, forKey: .valueDescription)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (merchantRef != nil) { try container.encode(merchantRef, forKey: .merchantRef) }
            if (programCode != nil) { try container.encode(programCode, forKey: .programCode) }
            if (programCodeDescription != nil) { try container.encode(programCodeDescription, forKey: .programCodeDescription) }
            if (key != nil) { try container.encode(key, forKey: .key) }
            if (keyDescription != nil) { try container.encode(keyDescription, forKey: .keyDescription) }
            if (value != nil) { try container.encode(value, forKey: .value) }
            if (valueDescription != nil) { try container.encode(valueDescription, forKey: .valueDescription) }
        }
    }

}