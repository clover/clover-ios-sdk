/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Resellers {

    public class ResellerChannel: Codable {

        public var id: String?
        public var reseller: CLVModels.Resellers.Reseller?
        /// Reseller Platform types, each defines a different set of reseller channel hierarchies
        public var platform: CLVModels.Resellers.ResellerPlatformType?
        /// Represents reseller channel hierarchy under North platform
        public var chainAgent: String?
        /// Represents reseller channel hierarchy under North platform
        public var chainBank: String?
        /// Represents reseller channel hierarchy under North and South platform
        public var marker: Int32?
        /// Represents reseller channel hierarchy under Omaha platform
        public var sysprin: String?
        /// Indicates if the reseller channel only includes one of the System/Prin hierarchy values
        public var sysprinPartial: Bool?
        /// Represents reseller channel hierarchy under South platform
        public var associationNumber: Int32?
        /// Represents reseller channel hierarchy under South platform
        public var corporate: Int32?
        /// Represents reseller channel hierarchy under South platform
        public var customerId: Int32?
        /// Represents reseller channel hierarchy under South platform
        public var mapsId: Int32?
        /// Reseller channel name
        public var channel: String?
        /// Salesforce Partner ID
        public var salesforcePartnerId: String?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case reseller
            case platform
            case chainAgent
            case chainBank
            case marker
            case sysprin
            case sysprinPartial
            case associationNumber
            case corporate
            case customerId
            case mapsId
            case channel
            case salesforcePartnerId
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.reseller = try rootContainer.decodeIfPresent(CLVModels.Resellers.Reseller.self, forKey: .reseller)
            } catch {
                decodeError.append(error)
            }
            do {
                self.platform = try rootContainer.decodeIfPresent(CLVModels.Resellers.ResellerPlatformType.self, forKey: .platform)
            } catch {
                decodeError.append(error)
            }
            do {
                self.chainAgent = try rootContainer.decodeIfPresent(String.self, forKey: .chainAgent)
            } catch {
                decodeError.append(error)
            }
            do {
                self.chainBank = try rootContainer.decodeIfPresent(String.self, forKey: .chainBank)
            } catch {
                decodeError.append(error)
            }
            do {
                self.marker = try rootContainer.decodeIfPresent(Int32.self, forKey: .marker)
            } catch {
                decodeError.append(error)
            }
            do {
                self.sysprin = try rootContainer.decodeIfPresent(String.self, forKey: .sysprin)
            } catch {
                decodeError.append(error)
            }
            do {
                self.sysprinPartial = try rootContainer.decodeIfPresent(Bool.self, forKey: .sysprinPartial)
            } catch {
                decodeError.append(error)
            }
            do {
                self.associationNumber = try rootContainer.decodeIfPresent(Int32.self, forKey: .associationNumber)
            } catch {
                decodeError.append(error)
            }
            do {
                self.corporate = try rootContainer.decodeIfPresent(Int32.self, forKey: .corporate)
            } catch {
                decodeError.append(error)
            }
            do {
                self.customerId = try rootContainer.decodeIfPresent(Int32.self, forKey: .customerId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.mapsId = try rootContainer.decodeIfPresent(Int32.self, forKey: .mapsId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.channel = try rootContainer.decodeIfPresent(String.self, forKey: .channel)
            } catch {
                decodeError.append(error)
            }
            do {
                self.salesforcePartnerId = try rootContainer.decodeIfPresent(String.self, forKey: .salesforcePartnerId)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (reseller != nil) { try container.encode(reseller, forKey: .reseller) }
            if (platform != nil) { try container.encode(platform, forKey: .platform) }
            if (chainAgent != nil) { try container.encode(chainAgent, forKey: .chainAgent) }
            if (chainBank != nil) { try container.encode(chainBank, forKey: .chainBank) }
            if (marker != nil) { try container.encode(marker, forKey: .marker) }
            if (sysprin != nil) { try container.encode(sysprin, forKey: .sysprin) }
            if (sysprinPartial != nil) { try container.encode(sysprinPartial, forKey: .sysprinPartial) }
            if (associationNumber != nil) { try container.encode(associationNumber, forKey: .associationNumber) }
            if (corporate != nil) { try container.encode(corporate, forKey: .corporate) }
            if (customerId != nil) { try container.encode(customerId, forKey: .customerId) }
            if (mapsId != nil) { try container.encode(mapsId, forKey: .mapsId) }
            if (channel != nil) { try container.encode(channel, forKey: .channel) }
            if (salesforcePartnerId != nil) { try container.encode(salesforcePartnerId, forKey: .salesforcePartnerId) }
        }
    }

}