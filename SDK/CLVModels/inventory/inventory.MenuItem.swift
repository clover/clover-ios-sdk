/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Inventory {

    public class MenuItem: Codable {

        /// Item id
        public var id: String?
        /// Reference to an item
        public var item: CLVModels.Base.Reference?
        /// Reference to the merchant that created the item
        public var merchantRef: CLVModels.Base.Reference?
        /// Item price
        public var price: Int64?
        /// Customer facing item name
        public var name: String?
        /// Item description
        public var description_: String?
        /// Item image file path
        public var imageFilename: String?
        /// Item enabled for menu
        public var enabled: Bool?
        /// Reason for being filtered out
        public var reasonCode: String?
        /// If the item has been filtered by the filter microservice.
        public var filtered: Bool?
        /// Timestamp when the menu item was created
        public var createdTime: Date?
        /// Timestamp when the menu item was last modified
        public var modifiedTime: Date?
        /// Timestamp when menu item was last deleted
        public var deletedTime: Date?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case item
            case merchantRef
            case price
            case name
            case description
            case imageFilename
            case enabled
            case reasonCode
            case filtered
            case createdTime
            case modifiedTime
            case deletedTime
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.item = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .item)
            } catch {
                decodeError.append(error)
            }
            do {
                self.merchantRef = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .merchantRef)
            } catch {
                decodeError.append(error)
            }
            do {
                self.price = try rootContainer.decodeIfPresent(Int64.self, forKey: .price)
            } catch {
                decodeError.append(error)
            }
            do {
                self.name = try rootContainer.decodeIfPresent(String.self, forKey: .name)
            } catch {
                decodeError.append(error)
            }
            do {
                self.description_ = try rootContainer.decodeIfPresent(String.self, forKey: .description)
            } catch {
                decodeError.append(error)
            }
            do {
                self.imageFilename = try rootContainer.decodeIfPresent(String.self, forKey: .imageFilename)
            } catch {
                decodeError.append(error)
            }
            do {
                self.enabled = try rootContainer.decodeIfPresent(Bool.self, forKey: .enabled)
            } catch {
                decodeError.append(error)
            }
            do {
                self.reasonCode = try rootContainer.decodeIfPresent(String.self, forKey: .reasonCode)
            } catch {
                decodeError.append(error)
            }
            do {
                self.filtered = try rootContainer.decodeIfPresent(Bool.self, forKey: .filtered)
            } catch {
                decodeError.append(error)
            }
            do {
                self.createdTime = try rootContainer.decodeIfPresent(Date.self, forKey: .createdTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.modifiedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .modifiedTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.deletedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .deletedTime)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (item != nil) { try container.encode(item, forKey: .item) }
            if (merchantRef != nil) { try container.encode(merchantRef, forKey: .merchantRef) }
            if (price != nil) { try container.encode(price, forKey: .price) }
            if (name != nil) { try container.encode(name, forKey: .name) }
            if (description_ != nil) { try container.encode(description_, forKey: .description) }
            if (imageFilename != nil) { try container.encode(imageFilename, forKey: .imageFilename) }
            if (enabled != nil) { try container.encode(enabled, forKey: .enabled) }
            if (reasonCode != nil) { try container.encode(reasonCode, forKey: .reasonCode) }
            if (filtered != nil) { try container.encode(filtered, forKey: .filtered) }
            if (createdTime != nil) { try container.encode(createdTime, forKey: .createdTime) }
            if (modifiedTime != nil) { try container.encode(modifiedTime, forKey: .modifiedTime) }
            if (deletedTime != nil) { try container.encode(deletedTime, forKey: .deletedTime) }
        }
    }

}