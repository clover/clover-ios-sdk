/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Inventory {

    public class MenuBulkUpdate: Codable {

        /// Set value to the enabled column in menu item, layout, modifier, or modifier group table in the bulk update action
        public var enabled: Bool?
        /// Whether to enable elements when reason_code is not null
        public var enableFilteredOutElements: Bool?
        public var uuids: [String]?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case enabled
            case enableFilteredOutElements
            case uuids
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.enabled = try rootContainer.decodeIfPresent(Bool.self, forKey: .enabled)
            } catch {
                decodeError.append(error)
            }
            do {
                self.enableFilteredOutElements = try rootContainer.decodeIfPresent(Bool.self, forKey: .enableFilteredOutElements)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.uuids)) {
                do {
                    let uuidsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .uuids)
                    self.uuids = try uuidsContainer.decodeIfPresent([String].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (enabled != nil) { try container.encode(enabled, forKey: .enabled) }
            if (enableFilteredOutElements != nil) { try container.encode(enableFilteredOutElements, forKey: .enableFilteredOutElements) }
            if (uuids != nil) { try container.encode(uuids, forKey: .uuids) }
        }
    }

}