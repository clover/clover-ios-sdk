/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Inventory {

    public class Category: Codable {

        /// Unique identifier
        public var id: String?
        /// The name of the category which will appear in Clover Register App.
        public var name: String?
        /// Integer used to determine how this category is sorted against other categories.
        public var sortOrder: CLVModels.Variant?
        /// Ordered list of items associated with this category.
        public var items: CLVModels.Variant?
        /// Whether the category has been deleted.
        public var deleted: CLVModels.Variant?
        /// The time this category was last modified
        public var modifiedTime: Date?
        /// Reference to canonical category
        public var canonical: CLVModels.Variant?
        /// Menu Section attribute that can be expanded to menu section specific attributes
        public var menuSection: CLVModels.Variant?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case name
            case sortOrder
            case items
            case deleted
            case modifiedTime
            case canonical
            case menuSection
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.name = try rootContainer.decodeIfPresent(String.self, forKey: .name)
            } catch {
                decodeError.append(error)
            }
            do {
                self.sortOrder = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .sortOrder)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.items)) {
                do {
                    let itemsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .items)
                    self.items = try itemsContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            do {
                self.deleted = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .deleted)
            } catch {
                decodeError.append(error)
            }
            do {
                self.modifiedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .modifiedTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.canonical = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .canonical)
            } catch {
                decodeError.append(error)
            }
            do {
                self.menuSection = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .menuSection)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (name != nil) { try container.encode(name, forKey: .name) }
            if (sortOrder != nil) { try container.encode(sortOrder, forKey: .sortOrder) }
            if (items != nil) { try container.encode(items, forKey: .items) }
            if (deleted != nil) { try container.encode(deleted, forKey: .deleted) }
            if (modifiedTime != nil) { try container.encode(modifiedTime, forKey: .modifiedTime) }
            if (canonical != nil) { try container.encode(canonical, forKey: .canonical) }
            if (menuSection != nil) { try container.encode(menuSection, forKey: .menuSection) }
        }
    }

}