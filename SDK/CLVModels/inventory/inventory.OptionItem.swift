/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
    This class represents the association between an item and an option
*/

import Foundation

extension CLVModels.Inventory {

    public class OptionItem: Codable {

        /// Reference to an option
        public var option: CLVModels.Variant?
        /// Reference to an item
        public var item: CLVModels.Variant?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case option
            case item
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.option = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .option)
            } catch {
                decodeError.append(error)
            }
            do {
                self.item = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .item)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (option != nil) { try container.encode(option, forKey: .option) }
            if (item != nil) { try container.encode(item, forKey: .item) }
        }
    }

}