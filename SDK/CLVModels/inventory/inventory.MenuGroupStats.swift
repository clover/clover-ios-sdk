/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Inventory {

    public class MenuGroupStats: Codable {

        /// reference to the menu group (MenuSection/MenuModifierGroup)
        public var reference: CLVModels.Base.Reference?
        /// Reference to the merchant
        public var merchantRef: CLVModels.Base.Reference?
        /// number of total elements
        public var numElementsTotal: Int64?
        /// number of enabled elements
        public var numElementsEnabled: Int64?
        /// number of elements where reason_code is not null
        public var numFilteredOut: Int64?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case reference
            case merchantRef
            case numElementsTotal
            case numElementsEnabled
            case numFilteredOut
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.reference = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .reference)
            } catch {
                decodeError.append(error)
            }
            do {
                self.merchantRef = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .merchantRef)
            } catch {
                decodeError.append(error)
            }
            do {
                self.numElementsTotal = try rootContainer.decodeIfPresent(Int64.self, forKey: .numElementsTotal)
            } catch {
                decodeError.append(error)
            }
            do {
                self.numElementsEnabled = try rootContainer.decodeIfPresent(Int64.self, forKey: .numElementsEnabled)
            } catch {
                decodeError.append(error)
            }
            do {
                self.numFilteredOut = try rootContainer.decodeIfPresent(Int64.self, forKey: .numFilteredOut)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (reference != nil) { try container.encode(reference, forKey: .reference) }
            if (merchantRef != nil) { try container.encode(merchantRef, forKey: .merchantRef) }
            if (numElementsTotal != nil) { try container.encode(numElementsTotal, forKey: .numElementsTotal) }
            if (numElementsEnabled != nil) { try container.encode(numElementsEnabled, forKey: .numElementsEnabled) }
            if (numFilteredOut != nil) { try container.encode(numFilteredOut, forKey: .numFilteredOut) }
        }
    }

}