/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Inventory {

    public class Modifier: Codable {

        /// Unique identifier
        public var id: String?
        /// Name of the modifier
        public var name: String?
        /// Alternate name of the modifier
        public var alternateName: CLVModels.Variant?
        /// Additional cost when used
        public var price: CLVModels.Variant?
        public var modifierGroup: CLVModels.Variant?
        /// Menu Modifier attribute that can be expanded to menu specific attributes
        public var menuModifier: CLVModels.Variant?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case name
            case alternateName
            case price
            case modifierGroup
            case menuModifier
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.name = try rootContainer.decodeIfPresent(String.self, forKey: .name)
            } catch {
                decodeError.append(error)
            }
            do {
                self.alternateName = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .alternateName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.price = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .price)
            } catch {
                decodeError.append(error)
            }
            do {
                self.modifierGroup = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .modifierGroup)
            } catch {
                decodeError.append(error)
            }
            do {
                self.menuModifier = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .menuModifier)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (name != nil) { try container.encode(name, forKey: .name) }
            if (alternateName != nil) { try container.encode(alternateName, forKey: .alternateName) }
            if (price != nil) { try container.encode(price, forKey: .price) }
            if (modifierGroup != nil) { try container.encode(modifierGroup, forKey: .modifierGroup) }
            if (menuModifier != nil) { try container.encode(menuModifier, forKey: .menuModifier) }
        }
    }

}