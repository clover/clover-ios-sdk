/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Inventory {

    public class MenuStats: Codable {

        /// Reference to the merchant
        public var merchantRef: CLVModels.Base.Reference?
        /// number of total menu items
        public var numMenuItemsTotal: Int64?
        /// number of total menu modifiers
        public var numMenuModifiersTotal: Int64?
        /// number of menu items filtered out (reason_code not null)
        public var numMenuItemsFilteredOut: Int64?
        /// number of menu modifiers filtered out (reason_code not null)
        public var numMenuModifiersFilteredOut: Int64?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case merchantRef
            case numMenuItemsTotal
            case numMenuModifiersTotal
            case numMenuItemsFilteredOut
            case numMenuModifiersFilteredOut
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.merchantRef = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .merchantRef)
            } catch {
                decodeError.append(error)
            }
            do {
                self.numMenuItemsTotal = try rootContainer.decodeIfPresent(Int64.self, forKey: .numMenuItemsTotal)
            } catch {
                decodeError.append(error)
            }
            do {
                self.numMenuModifiersTotal = try rootContainer.decodeIfPresent(Int64.self, forKey: .numMenuModifiersTotal)
            } catch {
                decodeError.append(error)
            }
            do {
                self.numMenuItemsFilteredOut = try rootContainer.decodeIfPresent(Int64.self, forKey: .numMenuItemsFilteredOut)
            } catch {
                decodeError.append(error)
            }
            do {
                self.numMenuModifiersFilteredOut = try rootContainer.decodeIfPresent(Int64.self, forKey: .numMenuModifiersFilteredOut)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (merchantRef != nil) { try container.encode(merchantRef, forKey: .merchantRef) }
            if (numMenuItemsTotal != nil) { try container.encode(numMenuItemsTotal, forKey: .numMenuItemsTotal) }
            if (numMenuModifiersTotal != nil) { try container.encode(numMenuModifiersTotal, forKey: .numMenuModifiersTotal) }
            if (numMenuItemsFilteredOut != nil) { try container.encode(numMenuItemsFilteredOut, forKey: .numMenuItemsFilteredOut) }
            if (numMenuModifiersFilteredOut != nil) { try container.encode(numMenuModifiersFilteredOut, forKey: .numMenuModifiersFilteredOut) }
        }
    }

}