/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Inventory {

    public class Tag: Codable {

        /// Unique identifier
        public var id: String?
        /// Tag name
        public var name: CLVModels.Variant?
        /// True if tag is a summary label in the reporting app
        public var showInReporting: CLVModels.Variant?
        /// Items associated with this tag
        public var items: CLVModels.Variant?
        /// Printers associated with this tag
        public var printers: CLVModels.Variant?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case name
            case showInReporting
            case items
            case printers
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.name = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .name)
            } catch {
                decodeError.append(error)
            }
            do {
                self.showInReporting = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .showInReporting)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.items)) {
                do {
                    let itemsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .items)
                    self.items = try itemsContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            if (rootContainer.contains(.printers)) {
                do {
                    let printersContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .printers)
                    self.printers = try printersContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (name != nil) { try container.encode(name, forKey: .name) }
            if (showInReporting != nil) { try container.encode(showInReporting, forKey: .showInReporting) }
            if (items != nil) { try container.encode(items, forKey: .items) }
            if (printers != nil) { try container.encode(printers, forKey: .printers) }
        }
    }

}