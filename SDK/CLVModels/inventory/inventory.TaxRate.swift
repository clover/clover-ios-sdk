/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Inventory {

    public class TaxRate: Codable {

        public var id: String?
        /// The line item with which the tax rate is associated
        public var lineItemRef: CLVModels.Variant?
        public var name: String?
        /// to support Argentina's tax type
        public var taxType: CLVModels.Variant?
        /// For percentage based discounts like sales tax
        public var rate: Int64?
        public var isDefault: CLVModels.Variant?
        /// Items associated with this tax rate
        public var items: CLVModels.Variant?
        /// For a flat tax like recycling redemption fee, expressed as number of cents
        public var taxAmount: CLVModels.Variant?
        /// Timestamp when tax rate was last deleted
        public var deletedTime: Date?
        /// Timestamp when tax rate was last modified
        public var modifiedTime: Date?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case lineItemRef
            case name
            case taxType
            case rate
            case isDefault
            case items
            case taxAmount
            case deletedTime
            case modifiedTime
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.lineItemRef = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .lineItemRef)
            } catch {
                decodeError.append(error)
            }
            do {
                self.name = try rootContainer.decodeIfPresent(String.self, forKey: .name)
            } catch {
                decodeError.append(error)
            }
            do {
                self.taxType = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .taxType)
            } catch {
                decodeError.append(error)
            }
            do {
                self.rate = try rootContainer.decodeIfPresent(Int64.self, forKey: .rate)
            } catch {
                decodeError.append(error)
            }
            do {
                self.isDefault = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .isDefault)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.items)) {
                do {
                    let itemsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .items)
                    self.items = try itemsContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            do {
                self.taxAmount = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .taxAmount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.deletedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .deletedTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.modifiedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .modifiedTime)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (lineItemRef != nil) { try container.encode(lineItemRef, forKey: .lineItemRef) }
            if (name != nil) { try container.encode(name, forKey: .name) }
            if (taxType != nil) { try container.encode(taxType, forKey: .taxType) }
            if (rate != nil) { try container.encode(rate, forKey: .rate) }
            if (isDefault != nil) { try container.encode(isDefault, forKey: .isDefault) }
            if (items != nil) { try container.encode(items, forKey: .items) }
            if (taxAmount != nil) { try container.encode(taxAmount, forKey: .taxAmount) }
            if (deletedTime != nil) { try container.encode(deletedTime, forKey: .deletedTime) }
            if (modifiedTime != nil) { try container.encode(modifiedTime, forKey: .modifiedTime) }
        }
    }

}