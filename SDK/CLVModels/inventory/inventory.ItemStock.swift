/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
    The class is used to update the item stock.
*/

import Foundation

extension CLVModels.Inventory {

    public class ItemStock: Codable {

        /// Reference to an item
        public var item: CLVModels.Base.Reference?
        /// Deprecated, use quantity instead.
        public var stockCount: CLVModels.Variant?
        /// Current count of this item in stock.
        public var quantity: Double?
        public var modifiedTime: Date?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case item
            case stockCount
            case quantity
            case modifiedTime
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.item = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .item)
            } catch {
                decodeError.append(error)
            }
            do {
                self.stockCount = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .stockCount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.quantity = try rootContainer.decodeIfPresent(Double.self, forKey: .quantity)
            } catch {
                decodeError.append(error)
            }
            do {
                self.modifiedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .modifiedTime)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (item != nil) { try container.encode(item, forKey: .item) }
            if (stockCount != nil) { try container.encode(stockCount, forKey: .stockCount) }
            if (quantity != nil) { try container.encode(quantity, forKey: .quantity) }
            if (modifiedTime != nil) { try container.encode(modifiedTime, forKey: .modifiedTime) }
        }
    }

}