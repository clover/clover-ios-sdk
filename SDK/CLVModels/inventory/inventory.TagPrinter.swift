/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Inventory {

    public class TagPrinter: Codable {

        public var tag: CLVModels.Inventory.Tag?
        public var printer: CLVModels.Printer.Printer?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case tag
            case printer
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.tag = try rootContainer.decodeIfPresent(CLVModels.Inventory.Tag.self, forKey: .tag)
            } catch {
                decodeError.append(error)
            }
            do {
                self.printer = try rootContainer.decodeIfPresent(CLVModels.Printer.Printer.self, forKey: .printer)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (tag != nil) { try container.encode(tag, forKey: .tag) }
            if (printer != nil) { try container.encode(printer, forKey: .printer) }
        }
    }

}