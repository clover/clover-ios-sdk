/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Inventory {

    public class Attribute: Codable {

        /// Unique identifier
        public var id: String?
        /// Name of this attribute
        public var name: String?
        /// The item group this attribute belongs to
        public var itemGroup: CLVModels.Base.Reference?
        /// Options associated with this attribute
        public var options: [CLVModels.Inventory.Option]?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case name
            case itemGroup
            case options
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.name = try rootContainer.decodeIfPresent(String.self, forKey: .name)
            } catch {
                decodeError.append(error)
            }
            do {
                self.itemGroup = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .itemGroup)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.options)) {
                do {
                    let optionsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .options)
                    self.options = try optionsContainer.decodeIfPresent([CLVModels.Inventory.Option].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (name != nil) { try container.encode(name, forKey: .name) }
            if (itemGroup != nil) { try container.encode(itemGroup, forKey: .itemGroup) }
            if (options != nil) { try container.encode(options, forKey: .options) }
        }
    }

}