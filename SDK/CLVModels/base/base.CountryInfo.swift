/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Base {

    public class CountryInfo: Codable {

        /// ISO 3166-1-alpha-2 code
        public var countryCode: String?
        public var displayName: String?
        public var localDisplayName: CLVModels.Variant?
        public var defaultCurrency: String?
        public var defaultTimezone: String?
        /// Indicates whether the state/province field is required when creating the address
        public var stateProvinceRequired: Bool?
        /// Indicates whether the ZIP/Postal code field is required when creating the address
        public var zipPostalRequired: Bool?
        /// Indicates whether the county field is required when creating the address
        public var countyRequired: Bool?
        public var defaultLocale: String?
        /// Indicates whether the country is enabled for app market billing
        public var appMarketBillingEnabled: Bool?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case countryCode
            case displayName
            case localDisplayName
            case defaultCurrency
            case defaultTimezone
            case stateProvinceRequired
            case zipPostalRequired
            case countyRequired
            case defaultLocale
            case appMarketBillingEnabled
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.countryCode = try rootContainer.decodeIfPresent(String.self, forKey: .countryCode)
            } catch {
                decodeError.append(error)
            }
            do {
                self.displayName = try rootContainer.decodeIfPresent(String.self, forKey: .displayName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.localDisplayName = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .localDisplayName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.defaultCurrency = try rootContainer.decodeIfPresent(String.self, forKey: .defaultCurrency)
            } catch {
                decodeError.append(error)
            }
            do {
                self.defaultTimezone = try rootContainer.decodeIfPresent(String.self, forKey: .defaultTimezone)
            } catch {
                decodeError.append(error)
            }
            do {
                self.stateProvinceRequired = try rootContainer.decodeIfPresent(Bool.self, forKey: .stateProvinceRequired)
            } catch {
                decodeError.append(error)
            }
            do {
                self.zipPostalRequired = try rootContainer.decodeIfPresent(Bool.self, forKey: .zipPostalRequired)
            } catch {
                decodeError.append(error)
            }
            do {
                self.countyRequired = try rootContainer.decodeIfPresent(Bool.self, forKey: .countyRequired)
            } catch {
                decodeError.append(error)
            }
            do {
                self.defaultLocale = try rootContainer.decodeIfPresent(String.self, forKey: .defaultLocale)
            } catch {
                decodeError.append(error)
            }
            do {
                self.appMarketBillingEnabled = try rootContainer.decodeIfPresent(Bool.self, forKey: .appMarketBillingEnabled)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (countryCode != nil) { try container.encode(countryCode, forKey: .countryCode) }
            if (displayName != nil) { try container.encode(displayName, forKey: .displayName) }
            if (localDisplayName != nil) { try container.encode(localDisplayName, forKey: .localDisplayName) }
            if (defaultCurrency != nil) { try container.encode(defaultCurrency, forKey: .defaultCurrency) }
            if (defaultTimezone != nil) { try container.encode(defaultTimezone, forKey: .defaultTimezone) }
            if (stateProvinceRequired != nil) { try container.encode(stateProvinceRequired, forKey: .stateProvinceRequired) }
            if (zipPostalRequired != nil) { try container.encode(zipPostalRequired, forKey: .zipPostalRequired) }
            if (countyRequired != nil) { try container.encode(countyRequired, forKey: .countyRequired) }
            if (defaultLocale != nil) { try container.encode(defaultLocale, forKey: .defaultLocale) }
            if (appMarketBillingEnabled != nil) { try container.encode(appMarketBillingEnabled, forKey: .appMarketBillingEnabled) }
        }
    }

}