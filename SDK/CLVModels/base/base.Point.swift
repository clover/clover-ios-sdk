/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Base {

    public class Point: Codable {

        public var x: Int64?
        public var y: Int64?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case x
            case y
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.x = try rootContainer.decodeIfPresent(Int64.self, forKey: .x)
            } catch {
                decodeError.append(error)
            }
            do {
                self.y = try rootContainer.decodeIfPresent(Int64.self, forKey: .y)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (x != nil) { try container.encode(x, forKey: .x) }
            if (y != nil) { try container.encode(y, forKey: .y) }
        }
    }

}