/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Base {

    public class ChallengeTypeEnum: Codable {

        public var challengeType: CLVModels.Base.ChallengeType?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case challengeType
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.challengeType = try rootContainer.decodeIfPresent(CLVModels.Base.ChallengeType.self, forKey: .challengeType)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (challengeType != nil) { try container.encode(challengeType, forKey: .challengeType) }
        }
    }

}