/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Base {

    public class CardData: Codable {

        /// The track1 data from the card.
        public var track1: String?
        /// The track2 data from the card.
        public var track2: String?
        /// The track3 data from the card.
        public var track3: String?
        /// Indicates if the data is encrypted.
        public var encrypted: Bool?
        /// The track1 data from the card.
        public var maskedTrack1: String?
        /// The track2 data from the card.
        public var maskedTrack2: String?
        /// The track3 data from the card.
        public var maskedTrack3: String?
        /// The pan data from the card.
        public var pan: String?
        /// The cardholderName data from the card.
        public var cardholderName: String?
        /// The firstName data from the card.
        public var firstName: String?
        /// The lastName data from the card.
        public var lastName: String?
        /// The exp data from the card.
        public var exp: String?
        /// The last4 data from the card.
        public var last4: String?
        /// The first6 data from the card.
        public var first6: String?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case track1
            case track2
            case track3
            case encrypted
            case maskedTrack1
            case maskedTrack2
            case maskedTrack3
            case pan
            case cardholderName
            case firstName
            case lastName
            case exp
            case last4
            case first6
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.track1 = try rootContainer.decodeIfPresent(String.self, forKey: .track1)
            } catch {
                decodeError.append(error)
            }
            do {
                self.track2 = try rootContainer.decodeIfPresent(String.self, forKey: .track2)
            } catch {
                decodeError.append(error)
            }
            do {
                self.track3 = try rootContainer.decodeIfPresent(String.self, forKey: .track3)
            } catch {
                decodeError.append(error)
            }
            do {
                self.encrypted = try rootContainer.decodeIfPresent(Bool.self, forKey: .encrypted)
            } catch {
                decodeError.append(error)
            }
            do {
                self.maskedTrack1 = try rootContainer.decodeIfPresent(String.self, forKey: .maskedTrack1)
            } catch {
                decodeError.append(error)
            }
            do {
                self.maskedTrack2 = try rootContainer.decodeIfPresent(String.self, forKey: .maskedTrack2)
            } catch {
                decodeError.append(error)
            }
            do {
                self.maskedTrack3 = try rootContainer.decodeIfPresent(String.self, forKey: .maskedTrack3)
            } catch {
                decodeError.append(error)
            }
            do {
                self.pan = try rootContainer.decodeIfPresent(String.self, forKey: .pan)
            } catch {
                decodeError.append(error)
            }
            do {
                self.cardholderName = try rootContainer.decodeIfPresent(String.self, forKey: .cardholderName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.firstName = try rootContainer.decodeIfPresent(String.self, forKey: .firstName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.lastName = try rootContainer.decodeIfPresent(String.self, forKey: .lastName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.exp = try rootContainer.decodeIfPresent(String.self, forKey: .exp)
            } catch {
                decodeError.append(error)
            }
            do {
                self.last4 = try rootContainer.decodeIfPresent(String.self, forKey: .last4)
            } catch {
                decodeError.append(error)
            }
            do {
                self.first6 = try rootContainer.decodeIfPresent(String.self, forKey: .first6)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (track1 != nil) { try container.encode(track1, forKey: .track1) }
            if (track2 != nil) { try container.encode(track2, forKey: .track2) }
            if (track3 != nil) { try container.encode(track3, forKey: .track3) }
            if (encrypted != nil) { try container.encode(encrypted, forKey: .encrypted) }
            if (maskedTrack1 != nil) { try container.encode(maskedTrack1, forKey: .maskedTrack1) }
            if (maskedTrack2 != nil) { try container.encode(maskedTrack2, forKey: .maskedTrack2) }
            if (maskedTrack3 != nil) { try container.encode(maskedTrack3, forKey: .maskedTrack3) }
            if (pan != nil) { try container.encode(pan, forKey: .pan) }
            if (cardholderName != nil) { try container.encode(cardholderName, forKey: .cardholderName) }
            if (firstName != nil) { try container.encode(firstName, forKey: .firstName) }
            if (lastName != nil) { try container.encode(lastName, forKey: .lastName) }
            if (exp != nil) { try container.encode(exp, forKey: .exp) }
            if (last4 != nil) { try container.encode(last4, forKey: .last4) }
            if (first6 != nil) { try container.encode(first6, forKey: .first6) }
        }
    }

}