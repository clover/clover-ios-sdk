/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Base {

    public class Signature: Codable {

        /// A series of strokes representing a signature
        public var strokes: [CLVModels.Base.Points]?
        /// The pixel width of the signature
        public var width: Int32?
        /// The pixel height of the signature
        public var height: Int32?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case strokes
            case width
            case height
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            if (rootContainer.contains(.strokes)) {
                do {
                    let strokesContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .strokes)
                    self.strokes = try strokesContainer.decodeIfPresent([CLVModels.Base.Points].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            do {
                self.width = try rootContainer.decodeIfPresent(Int32.self, forKey: .width)
            } catch {
                decodeError.append(error)
            }
            do {
                self.height = try rootContainer.decodeIfPresent(Int32.self, forKey: .height)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (strokes != nil) { try container.encode(strokes, forKey: .strokes) }
            if (width != nil) { try container.encode(width, forKey: .width) }
            if (height != nil) { try container.encode(height, forKey: .height) }
        }
    }

}