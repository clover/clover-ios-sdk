/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Base {

    public class ServiceCharge: Codable {

        /// Unique identifier
        public var id: String?
        /// The order with which the service charge is associated
        public var orderRef: CLVModels.Base.Reference?
        /// Service charge name
        public var name: String?
        /// If this service charge is enabled
        public var enabled: Bool?
        /// Deprecated use percentageDecimal instead
        public var percentage: Int64?
        /// Percent to charge times 10000, e.g. 12.5% will be 125000
        public var percentageDecimal: Int64?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case orderRef
            case name
            case enabled
            case percentage
            case percentageDecimal
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.orderRef = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .orderRef)
            } catch {
                decodeError.append(error)
            }
            do {
                self.name = try rootContainer.decodeIfPresent(String.self, forKey: .name)
            } catch {
                decodeError.append(error)
            }
            do {
                self.enabled = try rootContainer.decodeIfPresent(Bool.self, forKey: .enabled)
            } catch {
                decodeError.append(error)
            }
            do {
                self.percentage = try rootContainer.decodeIfPresent(Int64.self, forKey: .percentage)
            } catch {
                decodeError.append(error)
            }
            do {
                self.percentageDecimal = try rootContainer.decodeIfPresent(Int64.self, forKey: .percentageDecimal)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (orderRef != nil) { try container.encode(orderRef, forKey: .orderRef) }
            if (name != nil) { try container.encode(name, forKey: .name) }
            if (enabled != nil) { try container.encode(enabled, forKey: .enabled) }
            if (percentage != nil) { try container.encode(percentage, forKey: .percentage) }
            if (percentageDecimal != nil) { try container.encode(percentageDecimal, forKey: .percentageDecimal) }
        }
    }

}