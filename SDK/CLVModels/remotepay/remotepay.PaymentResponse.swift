/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotepay {

    public class PaymentResponse: Codable {

        /// The superClass
        public var _meta_superclass: CLVModels.Remotepay.BaseResponse?
        /// The payment from the sale
        public var payment: CLVModels.Payments.Payment?
        public var isSale: Bool?
        public var isPreAuth: Bool?
        public var isAuth: Bool?
        public var signature: CLVModels.Variant?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case _meta_superclass
            case payment
            case isSale
            case isPreAuth
            case isAuth
            case signature
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self._meta_superclass = try rootContainer.decodeIfPresent(CLVModels.Remotepay.BaseResponse.self, forKey: ._meta_superclass)
            } catch {
                decodeError.append(error)
            }
            do {
                self.payment = try rootContainer.decodeIfPresent(CLVModels.Payments.Payment.self, forKey: .payment)
            } catch {
                decodeError.append(error)
            }
            do {
                self.isSale = try rootContainer.decodeIfPresent(Bool.self, forKey: .isSale)
            } catch {
                decodeError.append(error)
            }
            do {
                self.isPreAuth = try rootContainer.decodeIfPresent(Bool.self, forKey: .isPreAuth)
            } catch {
                decodeError.append(error)
            }
            do {
                self.isAuth = try rootContainer.decodeIfPresent(Bool.self, forKey: .isAuth)
            } catch {
                decodeError.append(error)
            }
            do {
                self.signature = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .signature)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (_meta_superclass != nil) { try container.encode(_meta_superclass, forKey: ._meta_superclass) }
            if (payment != nil) { try container.encode(payment, forKey: .payment) }
            if (isSale != nil) { try container.encode(isSale, forKey: .isSale) }
            if (isPreAuth != nil) { try container.encode(isPreAuth, forKey: .isPreAuth) }
            if (isAuth != nil) { try container.encode(isAuth, forKey: .isAuth) }
            if (signature != nil) { try container.encode(signature, forKey: .signature) }
        }
    }

}