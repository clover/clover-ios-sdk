/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotepay {

    public class CloverDeviceErrorEvent: Codable {

        /// Description of the error.
        public var message: String?
        public var code: CLVModels.Remotepay.DeviceErrorEventCode?
        public var cause: CLVModels.Remotepay.PlatformError?
        public var type_: CLVModels.Remotepay.ErrorType?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case message
            case code
            case cause
            case type
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.message = try rootContainer.decodeIfPresent(String.self, forKey: .message)
            } catch {
                decodeError.append(error)
            }
            do {
                self.code = try rootContainer.decodeIfPresent(CLVModels.Remotepay.DeviceErrorEventCode.self, forKey: .code)
            } catch {
                decodeError.append(error)
            }
            do {
                self.cause = try rootContainer.decodeIfPresent(CLVModels.Remotepay.PlatformError.self, forKey: .cause)
            } catch {
                decodeError.append(error)
            }
            do {
                self.type_ = try rootContainer.decodeIfPresent(CLVModels.Remotepay.ErrorType.self, forKey: .type)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (message != nil) { try container.encode(message, forKey: .message) }
            if (code != nil) { try container.encode(code, forKey: .code) }
            if (cause != nil) { try container.encode(cause, forKey: .cause) }
            if (type_ != nil) { try container.encode(type_, forKey: .type) }
        }
    }

}