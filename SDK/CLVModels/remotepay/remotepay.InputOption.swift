/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotepay {

    public class InputOption: Codable {

        /// The keypress this represents
        public var keyPress: CLVModels.Remotepay.KeyPress?
        /// A description of what this input option represents
        public var description_: String?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case keyPress
            case description
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.keyPress = try rootContainer.decodeIfPresent(CLVModels.Remotepay.KeyPress.self, forKey: .keyPress)
            } catch {
                decodeError.append(error)
            }
            do {
                self.description_ = try rootContainer.decodeIfPresent(String.self, forKey: .description)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (keyPress != nil) { try container.encode(keyPress, forKey: .keyPress) }
            if (description_ != nil) { try container.encode(description_, forKey: .description) }
        }
    }

}