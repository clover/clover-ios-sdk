/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotepay {

    public class DisplayReceiptOptionsRequest: Codable {

        /// Unique identifier of a Clover order
        public var orderId: String?
        /// Unique identifier of the payment associated with an order
        public var paymentId: String?
        /// Unique identifier of the refund associated with an order
        public var refundId: String?
        /// Unique identifier of a credit (manual refund) given to a customer
        public var creditId: String?
        public var disablePrinting: Bool?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case orderId
            case paymentId
            case refundId
            case creditId
            case disablePrinting
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.orderId = try rootContainer.decodeIfPresent(String.self, forKey: .orderId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.paymentId = try rootContainer.decodeIfPresent(String.self, forKey: .paymentId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.refundId = try rootContainer.decodeIfPresent(String.self, forKey: .refundId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.creditId = try rootContainer.decodeIfPresent(String.self, forKey: .creditId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.disablePrinting = try rootContainer.decodeIfPresent(Bool.self, forKey: .disablePrinting)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (orderId != nil) { try container.encode(orderId, forKey: .orderId) }
            if (paymentId != nil) { try container.encode(paymentId, forKey: .paymentId) }
            if (refundId != nil) { try container.encode(refundId, forKey: .refundId) }
            if (creditId != nil) { try container.encode(creditId, forKey: .creditId) }
            if (disablePrinting != nil) { try container.encode(disablePrinting, forKey: .disablePrinting) }
        }
    }

}