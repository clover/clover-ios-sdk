/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
    Request to print an image, text, or an image from a URL. Current intention is to only have one.
*/

import Foundation

extension CLVModels.Remotepay {

    public class PrintRequest: Codable {

        /// The superClass
        public var _meta_superclass: CLVModels.Remotepay.BaseRequest?
        /// The image to be printed (put in an array for future extensibility).
        public var images: [CLVModels.Remotepay.Img]?
        /// The text to be printed.
        public var text: [String]?
        /// The image URLs to be printed (put in an array for future extensibility).
        public var imageUrls: [String]?
        /// The ID associated with the request (for Status checks and similar use).
        public var printRequestId: CLVModels.Variant?
        /// The ID of the device the print job should print from.
        public var printDeviceId: CLVModels.Variant?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case _meta_superclass
            case images
            case text
            case imageUrls
            case printRequestId
            case printDeviceId
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self._meta_superclass = try rootContainer.decodeIfPresent(CLVModels.Remotepay.BaseRequest.self, forKey: ._meta_superclass)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.images)) {
                do {
                    let imagesContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .images)
                    self.images = try imagesContainer.decodeIfPresent([CLVModels.Remotepay.Img].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            if (rootContainer.contains(.text)) {
                do {
                    let textContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .text)
                    self.text = try textContainer.decodeIfPresent([String].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            if (rootContainer.contains(.imageUrls)) {
                do {
                    let imageUrlsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .imageUrls)
                    self.imageUrls = try imageUrlsContainer.decodeIfPresent([String].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            do {
                self.printRequestId = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .printRequestId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.printDeviceId = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .printDeviceId)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (_meta_superclass != nil) { try container.encode(_meta_superclass, forKey: ._meta_superclass) }
            if (images != nil) { try container.encode(images, forKey: .images) }
            if (text != nil) { try container.encode(text, forKey: .text) }
            if (imageUrls != nil) { try container.encode(imageUrls, forKey: .imageUrls) }
            if (printRequestId != nil) { try container.encode(printRequestId, forKey: .printRequestId) }
            if (printDeviceId != nil) { try container.encode(printDeviceId, forKey: .printDeviceId) }
        }
    }

}