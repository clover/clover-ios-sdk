/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotepay {

    public class CloverDeviceEvent: Codable {

        /// Identifier for the request
        public var message: String?
        public var code: Int32?
        /// The event state
        public var eventState: CLVModels.Remotepay.DeviceEventState?
        /// Available input options
        public var inputOptions: [CLVModels.Remotepay.InputOption]?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case message
            case code
            case eventState
            case inputOptions
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.message = try rootContainer.decodeIfPresent(String.self, forKey: .message)
            } catch {
                decodeError.append(error)
            }
            do {
                self.code = try rootContainer.decodeIfPresent(Int32.self, forKey: .code)
            } catch {
                decodeError.append(error)
            }
            do {
                self.eventState = try rootContainer.decodeIfPresent(CLVModels.Remotepay.DeviceEventState.self, forKey: .eventState)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.inputOptions)) {
                do {
                    let inputOptionsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .inputOptions)
                    self.inputOptions = try inputOptionsContainer.decodeIfPresent([CLVModels.Remotepay.InputOption].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (message != nil) { try container.encode(message, forKey: .message) }
            if (code != nil) { try container.encode(code, forKey: .code) }
            if (eventState != nil) { try container.encode(eventState, forKey: .eventState) }
            if (inputOptions != nil) { try container.encode(inputOptions, forKey: .inputOptions) }
        }
    }

}