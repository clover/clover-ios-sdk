/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotepay {

    public class MerchantInfo: Codable {

        /// Unique identifier
        public var merchantID: String?
        public var merchantMID: String?
        /// Name of the merchant
        public var merchantName: String?
        public var supportsAuths: Bool?
        public var supportsPreAuths: Bool?
        public var supportsSales: Bool?
        public var supportsVaultCards: Bool?
        public var supportsManualRefunds: Bool?
        public var supportsTipAdjust: Bool?
        public var deviceInfo: CLVModels.Remotepay.DeviceInfo?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case merchantID
            case merchantMID
            case merchantName
            case supportsAuths
            case supportsPreAuths
            case supportsSales
            case supportsVaultCards
            case supportsManualRefunds
            case supportsTipAdjust
            case deviceInfo
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.merchantID = try rootContainer.decodeIfPresent(String.self, forKey: .merchantID)
            } catch {
                decodeError.append(error)
            }
            do {
                self.merchantMID = try rootContainer.decodeIfPresent(String.self, forKey: .merchantMID)
            } catch {
                decodeError.append(error)
            }
            do {
                self.merchantName = try rootContainer.decodeIfPresent(String.self, forKey: .merchantName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.supportsAuths = try rootContainer.decodeIfPresent(Bool.self, forKey: .supportsAuths)
            } catch {
                decodeError.append(error)
            }
            do {
                self.supportsPreAuths = try rootContainer.decodeIfPresent(Bool.self, forKey: .supportsPreAuths)
            } catch {
                decodeError.append(error)
            }
            do {
                self.supportsSales = try rootContainer.decodeIfPresent(Bool.self, forKey: .supportsSales)
            } catch {
                decodeError.append(error)
            }
            do {
                self.supportsVaultCards = try rootContainer.decodeIfPresent(Bool.self, forKey: .supportsVaultCards)
            } catch {
                decodeError.append(error)
            }
            do {
                self.supportsManualRefunds = try rootContainer.decodeIfPresent(Bool.self, forKey: .supportsManualRefunds)
            } catch {
                decodeError.append(error)
            }
            do {
                self.supportsTipAdjust = try rootContainer.decodeIfPresent(Bool.self, forKey: .supportsTipAdjust)
            } catch {
                decodeError.append(error)
            }
            do {
                self.deviceInfo = try rootContainer.decodeIfPresent(CLVModels.Remotepay.DeviceInfo.self, forKey: .deviceInfo)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (merchantID != nil) { try container.encode(merchantID, forKey: .merchantID) }
            if (merchantMID != nil) { try container.encode(merchantMID, forKey: .merchantMID) }
            if (merchantName != nil) { try container.encode(merchantName, forKey: .merchantName) }
            if (supportsAuths != nil) { try container.encode(supportsAuths, forKey: .supportsAuths) }
            if (supportsPreAuths != nil) { try container.encode(supportsPreAuths, forKey: .supportsPreAuths) }
            if (supportsSales != nil) { try container.encode(supportsSales, forKey: .supportsSales) }
            if (supportsVaultCards != nil) { try container.encode(supportsVaultCards, forKey: .supportsVaultCards) }
            if (supportsManualRefunds != nil) { try container.encode(supportsManualRefunds, forKey: .supportsManualRefunds) }
            if (supportsTipAdjust != nil) { try container.encode(supportsTipAdjust, forKey: .supportsTipAdjust) }
            if (deviceInfo != nil) { try container.encode(deviceInfo, forKey: .deviceInfo) }
        }
    }

}