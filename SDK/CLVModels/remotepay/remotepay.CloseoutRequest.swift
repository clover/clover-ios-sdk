/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
    Send a request for a closeout
*/

import Foundation

extension CLVModels.Remotepay {

    public class CloseoutRequest: Codable {

        /// The superClass
        public var _meta_superclass: CLVModels.Remotepay.BaseRequest?
        /// Allow closeout if there are open tabs
        public var allowOpenTabs: Bool?
        /// The batch id to close out.  If omitted, then the default current batch is used.
        public var batchId: String?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case _meta_superclass
            case allowOpenTabs
            case batchId
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self._meta_superclass = try rootContainer.decodeIfPresent(CLVModels.Remotepay.BaseRequest.self, forKey: ._meta_superclass)
            } catch {
                decodeError.append(error)
            }
            do {
                self.allowOpenTabs = try rootContainer.decodeIfPresent(Bool.self, forKey: .allowOpenTabs)
            } catch {
                decodeError.append(error)
            }
            do {
                self.batchId = try rootContainer.decodeIfPresent(String.self, forKey: .batchId)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (_meta_superclass != nil) { try container.encode(_meta_superclass, forKey: ._meta_superclass) }
            if (allowOpenTabs != nil) { try container.encode(allowOpenTabs, forKey: .allowOpenTabs) }
            if (batchId != nil) { try container.encode(batchId, forKey: .batchId) }
        }
    }

}