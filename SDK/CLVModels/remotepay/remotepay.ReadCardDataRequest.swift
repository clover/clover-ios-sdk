/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotepay {

    public class ReadCardDataRequest: Codable {

        /// The superClass
        public var _meta_superclass: CLVModels.Remotepay.BaseRequest?
        /// If true, then if the card is swiped, a pin entry must be done.
        public var isForceSwipePinEntry: Bool?
        /// The bit mask of allowable card read types.
        public var cardEntryMethods: Int32?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case _meta_superclass
            case isForceSwipePinEntry
            case cardEntryMethods
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self._meta_superclass = try rootContainer.decodeIfPresent(CLVModels.Remotepay.BaseRequest.self, forKey: ._meta_superclass)
            } catch {
                decodeError.append(error)
            }
            do {
                self.isForceSwipePinEntry = try rootContainer.decodeIfPresent(Bool.self, forKey: .isForceSwipePinEntry)
            } catch {
                decodeError.append(error)
            }
            do {
                self.cardEntryMethods = try rootContainer.decodeIfPresent(Int32.self, forKey: .cardEntryMethods)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (_meta_superclass != nil) { try container.encode(_meta_superclass, forKey: ._meta_superclass) }
            if (isForceSwipePinEntry != nil) { try container.encode(isForceSwipePinEntry, forKey: .isForceSwipePinEntry) }
            if (cardEntryMethods != nil) { try container.encode(cardEntryMethods, forKey: .cardEntryMethods) }
        }
    }

}