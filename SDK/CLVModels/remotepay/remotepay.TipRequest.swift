/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotepay {

    public class TipRequest: Codable {

        /// The superClass
        public var _meta_superclass: CLVModels.Remotepay.BaseRequest?
        public var tipSuggestions: [CLVModels.Merchant.TipSuggestion]?
        public var tippableAmount: Int64?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case _meta_superclass
            case tipSuggestions
            case tippableAmount
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self._meta_superclass = try rootContainer.decodeIfPresent(CLVModels.Remotepay.BaseRequest.self, forKey: ._meta_superclass)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.tipSuggestions)) {
                do {
                    let tipSuggestionsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .tipSuggestions)
                    self.tipSuggestions = try tipSuggestionsContainer.decodeIfPresent([CLVModels.Merchant.TipSuggestion].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            do {
                self.tippableAmount = try rootContainer.decodeIfPresent(Int64.self, forKey: .tippableAmount)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (_meta_superclass != nil) { try container.encode(_meta_superclass, forKey: ._meta_superclass) }
            if (tipSuggestions != nil) { try container.encode(tipSuggestions, forKey: .tipSuggestions) }
            if (tippableAmount != nil) { try container.encode(tippableAmount, forKey: .tippableAmount) }
        }
    }

}