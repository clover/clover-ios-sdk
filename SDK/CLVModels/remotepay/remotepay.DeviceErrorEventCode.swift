/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

extension CLVModels.Remotepay {

    public enum DeviceErrorEventCode: Codable {
        case AbortEndpoint
        case AccessDenied
        case CancelIoFailed
        case DeviceAllreadyLocked
        case DeviceIoControl
        case DeviceNotFound
        case EndpointAllreadyLocked
        case GetDeviceKeyValueFailed
        case GetOverlappedResult
        case GetString
        case InsufficientMemory
        case Interrupted
        case InvalidConfig
        case InvalidEndpoint
        case InvalidParam
        case IoCancelled
        case IoControlMessage
        case IoEndpointGlobalCancelRedo
        case IoSyncFailed
        case IoTimedOut
        case MonoApiError
        case None
        case NotConnected
        case NotSupported
        case Ok
        case Overflow
        case PipeError
        case ReadFailed
        case ReceiveThreadTerminated
        case ResourceBusy
        case SendNotificationFailure
        case SetDeviceKeyValueFailed
        case Success
        case UnknownError
        case UserAborted
        case Win32Error
        case WriteFailed
        case PARSE_UNKNOWN(String)

        enum Key: CodingKey {
            case rawValue
        }

        public init(rawValue:String) {
            switch rawValue {
                case  "AbortEndpoint":
                    self = .AbortEndpoint
                case  "AccessDenied":
                    self = .AccessDenied
                case  "CancelIoFailed":
                    self = .CancelIoFailed
                case  "DeviceAllreadyLocked":
                    self = .DeviceAllreadyLocked
                case  "DeviceIoControl":
                    self = .DeviceIoControl
                case  "DeviceNotFound":
                    self = .DeviceNotFound
                case  "EndpointAllreadyLocked":
                    self = .EndpointAllreadyLocked
                case  "GetDeviceKeyValueFailed":
                    self = .GetDeviceKeyValueFailed
                case  "GetOverlappedResult":
                    self = .GetOverlappedResult
                case  "GetString":
                    self = .GetString
                case  "InsufficientMemory":
                    self = .InsufficientMemory
                case  "Interrupted":
                    self = .Interrupted
                case  "InvalidConfig":
                    self = .InvalidConfig
                case  "InvalidEndpoint":
                    self = .InvalidEndpoint
                case  "InvalidParam":
                    self = .InvalidParam
                case  "IoCancelled":
                    self = .IoCancelled
                case  "IoControlMessage":
                    self = .IoControlMessage
                case  "IoEndpointGlobalCancelRedo":
                    self = .IoEndpointGlobalCancelRedo
                case  "IoSyncFailed":
                    self = .IoSyncFailed
                case  "IoTimedOut":
                    self = .IoTimedOut
                case  "MonoApiError":
                    self = .MonoApiError
                case  "None":
                    self = .None
                case  "NotConnected":
                    self = .NotConnected
                case  "NotSupported":
                    self = .NotSupported
                case  "Ok":
                    self = .Ok
                case  "Overflow":
                    self = .Overflow
                case  "PipeError":
                    self = .PipeError
                case  "ReadFailed":
                    self = .ReadFailed
                case  "ReceiveThreadTerminated":
                    self = .ReceiveThreadTerminated
                case  "ResourceBusy":
                    self = .ResourceBusy
                case  "SendNotificationFailure":
                    self = .SendNotificationFailure
                case  "SetDeviceKeyValueFailed":
                    self = .SetDeviceKeyValueFailed
                case  "Success":
                    self = .Success
                case  "UnknownError":
                    self = .UnknownError
                case  "UserAborted":
                    self = .UserAborted
                case  "Win32Error":
                    self = .Win32Error
                case  "WriteFailed":
                    self = .WriteFailed
                default:
                    self = .PARSE_UNKNOWN(rawValue)
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self.init(rawValue: rawValue)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(toString)
        }

        public var toString: String {
            switch self {
                case  .AbortEndpoint:
                    return "AbortEndpoint"
                case  .AccessDenied:
                    return "AccessDenied"
                case  .CancelIoFailed:
                    return "CancelIoFailed"
                case  .DeviceAllreadyLocked:
                    return "DeviceAllreadyLocked"
                case  .DeviceIoControl:
                    return "DeviceIoControl"
                case  .DeviceNotFound:
                    return "DeviceNotFound"
                case  .EndpointAllreadyLocked:
                    return "EndpointAllreadyLocked"
                case  .GetDeviceKeyValueFailed:
                    return "GetDeviceKeyValueFailed"
                case  .GetOverlappedResult:
                    return "GetOverlappedResult"
                case  .GetString:
                    return "GetString"
                case  .InsufficientMemory:
                    return "InsufficientMemory"
                case  .Interrupted:
                    return "Interrupted"
                case  .InvalidConfig:
                    return "InvalidConfig"
                case  .InvalidEndpoint:
                    return "InvalidEndpoint"
                case  .InvalidParam:
                    return "InvalidParam"
                case  .IoCancelled:
                    return "IoCancelled"
                case  .IoControlMessage:
                    return "IoControlMessage"
                case  .IoEndpointGlobalCancelRedo:
                    return "IoEndpointGlobalCancelRedo"
                case  .IoSyncFailed:
                    return "IoSyncFailed"
                case  .IoTimedOut:
                    return "IoTimedOut"
                case  .MonoApiError:
                    return "MonoApiError"
                case  .None:
                    return "None"
                case  .NotConnected:
                    return "NotConnected"
                case  .NotSupported:
                    return "NotSupported"
                case  .Ok:
                    return "Ok"
                case  .Overflow:
                    return "Overflow"
                case  .PipeError:
                    return "PipeError"
                case  .ReadFailed:
                    return "ReadFailed"
                case  .ReceiveThreadTerminated:
                    return "ReceiveThreadTerminated"
                case  .ResourceBusy:
                    return "ResourceBusy"
                case  .SendNotificationFailure:
                    return "SendNotificationFailure"
                case  .SetDeviceKeyValueFailed:
                    return "SetDeviceKeyValueFailed"
                case  .Success:
                    return "Success"
                case  .UnknownError:
                    return "UnknownError"
                case  .UserAborted:
                    return "UserAborted"
                case  .Win32Error:
                    return "Win32Error"
                case  .WriteFailed:
                    return "WriteFailed"
                case .PARSE_UNKNOWN(let rawValue):
                    return rawValue            
            }
        }
    }
}