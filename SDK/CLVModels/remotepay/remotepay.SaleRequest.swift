/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotepay {

    public class SaleRequest: Codable {

        /// The superClass
        public var _meta_superclass: CLVModels.Remotepay.TransactionRequest?
        /// initialization for the type
        public var _meta_init_type: CLVModels.Remotepay.TransactionType?
        /// Included tip
        public var tipAmount: CLVModels.Variant?
        public var tipMode: CLVModels.Payments.TipMode?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case _meta_superclass
            case _meta_init_type
            case tipAmount
            case tipMode
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self._meta_superclass = try rootContainer.decodeIfPresent(CLVModels.Remotepay.TransactionRequest.self, forKey: ._meta_superclass)
            } catch {
                decodeError.append(error)
            }
            do {
                self._meta_init_type = try rootContainer.decodeIfPresent(CLVModels.Remotepay.TransactionType.self, forKey: ._meta_init_type)
            } catch {
                decodeError.append(error)
            }
            do {
                self.tipAmount = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .tipAmount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.tipMode = try rootContainer.decodeIfPresent(CLVModels.Payments.TipMode.self, forKey: .tipMode)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (_meta_superclass != nil) { try container.encode(_meta_superclass, forKey: ._meta_superclass) }
            if (_meta_init_type != nil) { try container.encode(_meta_init_type, forKey: ._meta_init_type) }
            if (tipAmount != nil) { try container.encode(tipAmount, forKey: .tipAmount) }
            if (tipMode != nil) { try container.encode(tipMode, forKey: .tipMode) }
        }
    }

}