/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotepay {

    public class DeviceInfo: Codable {

        /// Name of the device (if entered)
        public var name: String?
        public var model: String?
        public var serial: String?
        /// If true, then the device supports acknowledgements.
        public var supportsAcks: Bool?
        /// If true, then the device supports a void payment response.
        public var supportsVoidPaymentResponse: Bool?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case name
            case model
            case serial
            case supportsAcks
            case supportsVoidPaymentResponse
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.name = try rootContainer.decodeIfPresent(String.self, forKey: .name)
            } catch {
                decodeError.append(error)
            }
            do {
                self.model = try rootContainer.decodeIfPresent(String.self, forKey: .model)
            } catch {
                decodeError.append(error)
            }
            do {
                self.serial = try rootContainer.decodeIfPresent(String.self, forKey: .serial)
            } catch {
                decodeError.append(error)
            }
            do {
                self.supportsAcks = try rootContainer.decodeIfPresent(Bool.self, forKey: .supportsAcks)
            } catch {
                decodeError.append(error)
            }
            do {
                self.supportsVoidPaymentResponse = try rootContainer.decodeIfPresent(Bool.self, forKey: .supportsVoidPaymentResponse)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (name != nil) { try container.encode(name, forKey: .name) }
            if (model != nil) { try container.encode(model, forKey: .model) }
            if (serial != nil) { try container.encode(serial, forKey: .serial) }
            if (supportsAcks != nil) { try container.encode(supportsAcks, forKey: .supportsAcks) }
            if (supportsVoidPaymentResponse != nil) { try container.encode(supportsVoidPaymentResponse, forKey: .supportsVoidPaymentResponse) }
        }
    }

}