/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
    A message used in custom activities
*/

import Foundation

extension CLVModels.Remotepay {

    public class ActivityMessage: Codable {

        /// The superClass
        public var _meta_superclass: CLVModels.Remotepay.BaseRequest?
        /// An action name, such as ACTION_VIEW.  Application-specific actions should be prefixed with the vendor's package name.
        public var action: String?
        /// Information that is passed to the activity.  Can be obtained from the intent using the key defined in com.clover.remote.common.RemoteConstants#EXTRA_PAYLOAD
        public var payload: CLVModels.Variant?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case _meta_superclass
            case action
            case payload
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self._meta_superclass = try rootContainer.decodeIfPresent(CLVModels.Remotepay.BaseRequest.self, forKey: ._meta_superclass)
            } catch {
                decodeError.append(error)
            }
            do {
                self.action = try rootContainer.decodeIfPresent(String.self, forKey: .action)
            } catch {
                decodeError.append(error)
            }
            do {
                self.payload = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .payload)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (_meta_superclass != nil) { try container.encode(_meta_superclass, forKey: ._meta_superclass) }
            if (action != nil) { try container.encode(action, forKey: .action) }
            if (payload != nil) { try container.encode(payload, forKey: .payload) }
        }
    }

}