/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotepay {

    public class DeviceEventEnum: Codable {

        public var deviceErrorEventCode: CLVModels.Remotepay.DeviceErrorEventCode?
        public var deviceEventState: CLVModels.Remotepay.DeviceEventState?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case deviceErrorEventCode
            case deviceEventState
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.deviceErrorEventCode = try rootContainer.decodeIfPresent(CLVModels.Remotepay.DeviceErrorEventCode.self, forKey: .deviceErrorEventCode)
            } catch {
                decodeError.append(error)
            }
            do {
                self.deviceEventState = try rootContainer.decodeIfPresent(CLVModels.Remotepay.DeviceEventState.self, forKey: .deviceEventState)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (deviceErrorEventCode != nil) { try container.encode(deviceErrorEventCode, forKey: .deviceErrorEventCode) }
            if (deviceEventState != nil) { try container.encode(deviceEventState, forKey: .deviceEventState) }
        }
    }

}