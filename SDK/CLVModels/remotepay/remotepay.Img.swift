/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotepay {

    public class Img: Codable {

        /// The base64 encoded data of the image if available
        public var data: String?
        /// The url to the image if available
        public var src: String?
        /// The width of the image if available
        public var width: Int64?
        /// The height of the image if available
        public var height: Int64?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case data
            case src
            case width
            case height
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.data = try rootContainer.decodeIfPresent(String.self, forKey: .data)
            } catch {
                decodeError.append(error)
            }
            do {
                self.src = try rootContainer.decodeIfPresent(String.self, forKey: .src)
            } catch {
                decodeError.append(error)
            }
            do {
                self.width = try rootContainer.decodeIfPresent(Int64.self, forKey: .width)
            } catch {
                decodeError.append(error)
            }
            do {
                self.height = try rootContainer.decodeIfPresent(Int64.self, forKey: .height)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (data != nil) { try container.encode(data, forKey: .data) }
            if (src != nil) { try container.encode(src, forKey: .src) }
            if (width != nil) { try container.encode(width, forKey: .width) }
            if (height != nil) { try container.encode(height, forKey: .height) }
        }
    }

}