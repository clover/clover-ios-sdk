/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotepay {

    public class VoidCreditRequest: Codable {

        /// Identifier for the request
        public var requestId: String?
        /// Unique identifier
        public var orderId: String?
        /// Unique identifier
        public var creditId: String?
        /// Extra pass-through data used by external systems.
        public var extras: [String:String]?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case requestId
            case orderId
            case creditId
            case extras
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.requestId = try rootContainer.decodeIfPresent(String.self, forKey: .requestId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.orderId = try rootContainer.decodeIfPresent(String.self, forKey: .orderId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.creditId = try rootContainer.decodeIfPresent(String.self, forKey: .creditId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.extras = try rootContainer.decodeIfPresent([String:String].self, forKey: .extras)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (requestId != nil) { try container.encode(requestId, forKey: .requestId) }
            if (orderId != nil) { try container.encode(orderId, forKey: .orderId) }
            if (creditId != nil) { try container.encode(creditId, forKey: .creditId) }
            if (extras != nil) { try container.encode(extras, forKey: .extras) }
        }
    }

}