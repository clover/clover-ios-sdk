/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotepay {

    public class TransactionRequest: Codable {

        /// The superClass
        public var _meta_superclass: CLVModels.Remotepay.BaseTransactionRequest?
        /// If the amount is equal to or greater than this amount, then a signature should be obtained
        public var signatureThreshold: Int64?
        /// Where the signature should be obtained from (paper, screen...etc)
        public var signatureEntryLocation: CLVModels.Variant?
        /// Do not show/send signature verification challenges
        public var autoAcceptSignature: CLVModels.Variant?
        /// If true then offline payments can be accepted
        public var allowOfflinePayment: CLVModels.Variant?
        /// If true then the payment will be taken offline
        public var forceOfflinePayment: CLVModels.Variant?
        /// If true, do not allow cash back
        public var disableCashback: CLVModels.Variant?
        /// If true then offline payments will be approved without a prompt
        public var approveOfflinePaymentWithoutPrompt: CLVModels.Variant?
        /// Amount paid in taxes
        public var taxAmount: Int64?
        /// The total amount used when calculating tips
        public var tippableAmount: Int64?
        /// Custom Tip Suggestions that can be set per transaction
        public var tipSuggestions: [CLVModels.Merchant.TipSuggestion]?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case _meta_superclass
            case signatureThreshold
            case signatureEntryLocation
            case autoAcceptSignature
            case allowOfflinePayment
            case forceOfflinePayment
            case disableCashback
            case approveOfflinePaymentWithoutPrompt
            case taxAmount
            case tippableAmount
            case tipSuggestions
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self._meta_superclass = try rootContainer.decodeIfPresent(CLVModels.Remotepay.BaseTransactionRequest.self, forKey: ._meta_superclass)
            } catch {
                decodeError.append(error)
            }
            do {
                self.signatureThreshold = try rootContainer.decodeIfPresent(Int64.self, forKey: .signatureThreshold)
            } catch {
                decodeError.append(error)
            }
            do {
                self.signatureEntryLocation = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .signatureEntryLocation)
            } catch {
                decodeError.append(error)
            }
            do {
                self.autoAcceptSignature = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .autoAcceptSignature)
            } catch {
                decodeError.append(error)
            }
            do {
                self.allowOfflinePayment = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .allowOfflinePayment)
            } catch {
                decodeError.append(error)
            }
            do {
                self.forceOfflinePayment = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .forceOfflinePayment)
            } catch {
                decodeError.append(error)
            }
            do {
                self.disableCashback = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .disableCashback)
            } catch {
                decodeError.append(error)
            }
            do {
                self.approveOfflinePaymentWithoutPrompt = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .approveOfflinePaymentWithoutPrompt)
            } catch {
                decodeError.append(error)
            }
            do {
                self.taxAmount = try rootContainer.decodeIfPresent(Int64.self, forKey: .taxAmount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.tippableAmount = try rootContainer.decodeIfPresent(Int64.self, forKey: .tippableAmount)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.tipSuggestions)) {
                do {
                    let tipSuggestionsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .tipSuggestions)
                    self.tipSuggestions = try tipSuggestionsContainer.decodeIfPresent([CLVModels.Merchant.TipSuggestion].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (_meta_superclass != nil) { try container.encode(_meta_superclass, forKey: ._meta_superclass) }
            if (signatureThreshold != nil) { try container.encode(signatureThreshold, forKey: .signatureThreshold) }
            if (signatureEntryLocation != nil) { try container.encode(signatureEntryLocation, forKey: .signatureEntryLocation) }
            if (autoAcceptSignature != nil) { try container.encode(autoAcceptSignature, forKey: .autoAcceptSignature) }
            if (allowOfflinePayment != nil) { try container.encode(allowOfflinePayment, forKey: .allowOfflinePayment) }
            if (forceOfflinePayment != nil) { try container.encode(forceOfflinePayment, forKey: .forceOfflinePayment) }
            if (disableCashback != nil) { try container.encode(disableCashback, forKey: .disableCashback) }
            if (approveOfflinePaymentWithoutPrompt != nil) { try container.encode(approveOfflinePaymentWithoutPrompt, forKey: .approveOfflinePaymentWithoutPrompt) }
            if (taxAmount != nil) { try container.encode(taxAmount, forKey: .taxAmount) }
            if (tippableAmount != nil) { try container.encode(tippableAmount, forKey: .tippableAmount) }
            if (tipSuggestions != nil) { try container.encode(tipSuggestions, forKey: .tipSuggestions) }
        }
    }

}