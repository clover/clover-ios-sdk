/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Cash {

    public class CashEvent: Codable {

        /// The type of event that occurred
        public var type_: CLVModels.Cash.Type_?
        /// The amount that was either added, removed of modified by the event
        public var amountChange: Int64?
        /// Time at which the event was executed
        public var timestamp: Date?
        /// Any additional information regarding the event
        public var note: String?
        /// The employee who performed the event
        public var employee: CLVModels.Employees.Employee?
        /// The device that initiated the event
        public var device: CLVModels.Device.Device?
        /// The event occurred for this merchant.
        public var merchant: CLVModels.Base.Reference?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case type
            case amountChange
            case timestamp
            case note
            case employee
            case device
            case merchant
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.type_ = try rootContainer.decodeIfPresent(CLVModels.Cash.Type_.self, forKey: .type)
            } catch {
                decodeError.append(error)
            }
            do {
                self.amountChange = try rootContainer.decodeIfPresent(Int64.self, forKey: .amountChange)
            } catch {
                decodeError.append(error)
            }
            do {
                self.timestamp = try rootContainer.decodeIfPresent(Date.self, forKey: .timestamp)
            } catch {
                decodeError.append(error)
            }
            do {
                self.note = try rootContainer.decodeIfPresent(String.self, forKey: .note)
            } catch {
                decodeError.append(error)
            }
            do {
                self.employee = try rootContainer.decodeIfPresent(CLVModels.Employees.Employee.self, forKey: .employee)
            } catch {
                decodeError.append(error)
            }
            do {
                self.device = try rootContainer.decodeIfPresent(CLVModels.Device.Device.self, forKey: .device)
            } catch {
                decodeError.append(error)
            }
            do {
                self.merchant = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .merchant)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (type_ != nil) { try container.encode(type_, forKey: .type) }
            if (amountChange != nil) { try container.encode(amountChange, forKey: .amountChange) }
            if (timestamp != nil) { try container.encode(timestamp, forKey: .timestamp) }
            if (note != nil) { try container.encode(note, forKey: .note) }
            if (employee != nil) { try container.encode(employee, forKey: .employee) }
            if (device != nil) { try container.encode(device, forKey: .device) }
            if (merchant != nil) { try container.encode(merchant, forKey: .merchant) }
        }
    }

}