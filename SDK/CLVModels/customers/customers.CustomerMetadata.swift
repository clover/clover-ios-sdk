/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Customers {

    public class CustomerMetadata: Codable {

        /// The name of the business the customer is associated with.
        public var businessName: String?
        /// A note about the customer.
        public var note: String?
        /// The year part of the date of birth for this customer. This part of the date of birth is optional, i.e., it's possible that only dobMonth and dobDay are populated.
        public var dobYear: Int32?
        /// The month part of the date of birth for this customer.
        public var dobMonth: Int32?
        /// The day part of the date of birth for this customer.
        public var dobDay: Int32?
        /// The timestamp from when this customer's data was last updated.
        public var modifiedTime: Date?
        /// Customer who this metadata belongs to.
        public var customer: CLVModels.Base.Reference?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case businessName
            case note
            case dobYear
            case dobMonth
            case dobDay
            case modifiedTime
            case customer
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.businessName = try rootContainer.decodeIfPresent(String.self, forKey: .businessName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.note = try rootContainer.decodeIfPresent(String.self, forKey: .note)
            } catch {
                decodeError.append(error)
            }
            do {
                self.dobYear = try rootContainer.decodeIfPresent(Int32.self, forKey: .dobYear)
            } catch {
                decodeError.append(error)
            }
            do {
                self.dobMonth = try rootContainer.decodeIfPresent(Int32.self, forKey: .dobMonth)
            } catch {
                decodeError.append(error)
            }
            do {
                self.dobDay = try rootContainer.decodeIfPresent(Int32.self, forKey: .dobDay)
            } catch {
                decodeError.append(error)
            }
            do {
                self.modifiedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .modifiedTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.customer = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .customer)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (businessName != nil) { try container.encode(businessName, forKey: .businessName) }
            if (note != nil) { try container.encode(note, forKey: .note) }
            if (dobYear != nil) { try container.encode(dobYear, forKey: .dobYear) }
            if (dobMonth != nil) { try container.encode(dobMonth, forKey: .dobMonth) }
            if (dobDay != nil) { try container.encode(dobDay, forKey: .dobDay) }
            if (modifiedTime != nil) { try container.encode(modifiedTime, forKey: .modifiedTime) }
            if (customer != nil) { try container.encode(customer, forKey: .customer) }
        }
    }

}