/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
    Deprecated, use CustomerInfo instead. Represents a customer that is linked to an external system. This customer may be persisted in Clover, or it may not.
*/

import Foundation

extension CLVModels.Customers {

    public class RemoteCustomer: Codable {

        /// The customer object that Clover uses.  This is the base model for a Clover customer, any additional information external systems need should exist in other fields
        public var customer: CLVModels.Customers.Customer?
        /// A custom way to display this customer for an external system
        public var displayString: String?
        /// an id for an external system to use to reference this Customer.
        public var externalId: String?
        /// The name of the external system that 'owns' this.  It is the system that understands the link from the externalId to the Customer.
        public var externalSystemName: String?
        /// Extra data used by external systems.
        public var extras: [String:String]?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case customer
            case displayString
            case externalId
            case externalSystemName
            case extras
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.customer = try rootContainer.decodeIfPresent(CLVModels.Customers.Customer.self, forKey: .customer)
            } catch {
                decodeError.append(error)
            }
            do {
                self.displayString = try rootContainer.decodeIfPresent(String.self, forKey: .displayString)
            } catch {
                decodeError.append(error)
            }
            do {
                self.externalId = try rootContainer.decodeIfPresent(String.self, forKey: .externalId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.externalSystemName = try rootContainer.decodeIfPresent(String.self, forKey: .externalSystemName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.extras = try rootContainer.decodeIfPresent([String:String].self, forKey: .extras)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (customer != nil) { try container.encode(customer, forKey: .customer) }
            if (displayString != nil) { try container.encode(displayString, forKey: .displayString) }
            if (externalId != nil) { try container.encode(externalId, forKey: .externalId) }
            if (externalSystemName != nil) { try container.encode(externalSystemName, forKey: .externalSystemName) }
            if (extras != nil) { try container.encode(extras, forKey: .extras) }
        }
    }

}