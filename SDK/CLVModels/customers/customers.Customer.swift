/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Customers {

    public class Customer: Codable {

        /// Unique identifier
        public var id: String?
        /// The order with which the customer is associated
        public var orderRef: CLVModels.Base.Reference?
        /// The merchant that is associated with this customer
        public var merchant: CLVModels.Base.Reference?
        /// First/given name of the customer
        public var firstName: CLVModels.Variant?
        /// Last name/surname of the customer
        public var lastName: CLVModels.Variant?
        public var marketingAllowed: Bool?
        public var customerSince: Int64?
        public var orders: [CLVModels.Base.Reference]?
        public var addresses: [CLVModels.Customers.Address]?
        public var emailAddresses: [CLVModels.Customers.EmailAddress]?
        public var phoneNumbers: [CLVModels.Customers.PhoneNumber]?
        public var cards: [CLVModels.Customers.Card]?
        /// Additional information about the customer.
        public var metadata: CLVModels.Customers.CustomerMetadata?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case orderRef
            case merchant
            case firstName
            case lastName
            case marketingAllowed
            case customerSince
            case orders
            case addresses
            case emailAddresses
            case phoneNumbers
            case cards
            case metadata
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.orderRef = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .orderRef)
            } catch {
                decodeError.append(error)
            }
            do {
                self.merchant = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .merchant)
            } catch {
                decodeError.append(error)
            }
            do {
                self.firstName = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .firstName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.lastName = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .lastName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.marketingAllowed = try rootContainer.decodeIfPresent(Bool.self, forKey: .marketingAllowed)
            } catch {
                decodeError.append(error)
            }
            do {
                self.customerSince = try rootContainer.decodeIfPresent(Int64.self, forKey: .customerSince)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.orders)) {
                do {
                    let ordersContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .orders)
                    self.orders = try ordersContainer.decodeIfPresent([CLVModels.Base.Reference].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            if (rootContainer.contains(.addresses)) {
                do {
                    let addressesContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .addresses)
                    self.addresses = try addressesContainer.decodeIfPresent([CLVModels.Customers.Address].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            if (rootContainer.contains(.emailAddresses)) {
                do {
                    let emailAddressesContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .emailAddresses)
                    self.emailAddresses = try emailAddressesContainer.decodeIfPresent([CLVModels.Customers.EmailAddress].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            if (rootContainer.contains(.phoneNumbers)) {
                do {
                    let phoneNumbersContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .phoneNumbers)
                    self.phoneNumbers = try phoneNumbersContainer.decodeIfPresent([CLVModels.Customers.PhoneNumber].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            if (rootContainer.contains(.cards)) {
                do {
                    let cardsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .cards)
                    self.cards = try cardsContainer.decodeIfPresent([CLVModels.Customers.Card].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            do {
                self.metadata = try rootContainer.decodeIfPresent(CLVModels.Customers.CustomerMetadata.self, forKey: .metadata)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (orderRef != nil) { try container.encode(orderRef, forKey: .orderRef) }
            if (merchant != nil) { try container.encode(merchant, forKey: .merchant) }
            if (firstName != nil) { try container.encode(firstName, forKey: .firstName) }
            if (lastName != nil) { try container.encode(lastName, forKey: .lastName) }
            if (marketingAllowed != nil) { try container.encode(marketingAllowed, forKey: .marketingAllowed) }
            if (customerSince != nil) { try container.encode(customerSince, forKey: .customerSince) }
            if (orders != nil) { try container.encode(orders, forKey: .orders) }
            if (addresses != nil) { try container.encode(addresses, forKey: .addresses) }
            if (emailAddresses != nil) { try container.encode(emailAddresses, forKey: .emailAddresses) }
            if (phoneNumbers != nil) { try container.encode(phoneNumbers, forKey: .phoneNumbers) }
            if (cards != nil) { try container.encode(cards, forKey: .cards) }
            if (metadata != nil) { try container.encode(metadata, forKey: .metadata) }
        }
    }

}