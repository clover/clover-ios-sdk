/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Customers {

    public class Card: Codable {

        public var id: String?
        public var first6: String?
        public var last4: String?
        public var firstName: String?
        public var lastName: String?
        public var expirationDate: String?
        public var cardType: String?
        public var token: String?
        public var tokenType: CLVModels.Customers.TokenType?
        /// The timestamp from when this card was last updated.
        public var modifiedTime: Date?
        /// Customer who this card belongs to.
        public var customer: CLVModels.Base.Reference?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case first6
            case last4
            case firstName
            case lastName
            case expirationDate
            case cardType
            case token
            case tokenType
            case modifiedTime
            case customer
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.first6 = try rootContainer.decodeIfPresent(String.self, forKey: .first6)
            } catch {
                decodeError.append(error)
            }
            do {
                self.last4 = try rootContainer.decodeIfPresent(String.self, forKey: .last4)
            } catch {
                decodeError.append(error)
            }
            do {
                self.firstName = try rootContainer.decodeIfPresent(String.self, forKey: .firstName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.lastName = try rootContainer.decodeIfPresent(String.self, forKey: .lastName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.expirationDate = try rootContainer.decodeIfPresent(String.self, forKey: .expirationDate)
            } catch {
                decodeError.append(error)
            }
            do {
                self.cardType = try rootContainer.decodeIfPresent(String.self, forKey: .cardType)
            } catch {
                decodeError.append(error)
            }
            do {
                self.token = try rootContainer.decodeIfPresent(String.self, forKey: .token)
            } catch {
                decodeError.append(error)
            }
            do {
                self.tokenType = try rootContainer.decodeIfPresent(CLVModels.Customers.TokenType.self, forKey: .tokenType)
            } catch {
                decodeError.append(error)
            }
            do {
                self.modifiedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .modifiedTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.customer = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .customer)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (first6 != nil) { try container.encode(first6, forKey: .first6) }
            if (last4 != nil) { try container.encode(last4, forKey: .last4) }
            if (firstName != nil) { try container.encode(firstName, forKey: .firstName) }
            if (lastName != nil) { try container.encode(lastName, forKey: .lastName) }
            if (expirationDate != nil) { try container.encode(expirationDate, forKey: .expirationDate) }
            if (cardType != nil) { try container.encode(cardType, forKey: .cardType) }
            if (token != nil) { try container.encode(token, forKey: .token) }
            if (tokenType != nil) { try container.encode(tokenType, forKey: .tokenType) }
            if (modifiedTime != nil) { try container.encode(modifiedTime, forKey: .modifiedTime) }
            if (customer != nil) { try container.encode(customer, forKey: .customer) }
        }
    }

}
