/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Customers {

    public class IdentityDocument: Codable {

        /// Unique identifier
        public var id: String?
        /// Type of personal identification: National Document, Passport, etc
        public var type_: String?
        /// The identification number
        public var number: String?
        /// Created timestamp.
        public var createdTime: Date?
        /// Modified timestamp.
        public var modifiedTime: Date?
        /// Deleted timestamp.
        public var deletedTime: Date?
        public var payment: CLVModels.Base.Reference?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case type
            case number
            case createdTime
            case modifiedTime
            case deletedTime
            case payment
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.type_ = try rootContainer.decodeIfPresent(String.self, forKey: .type)
            } catch {
                decodeError.append(error)
            }
            do {
                self.number = try rootContainer.decodeIfPresent(String.self, forKey: .number)
            } catch {
                decodeError.append(error)
            }
            do {
                self.createdTime = try rootContainer.decodeIfPresent(Date.self, forKey: .createdTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.modifiedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .modifiedTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.deletedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .deletedTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.payment = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .payment)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (type_ != nil) { try container.encode(type_, forKey: .type) }
            if (number != nil) { try container.encode(number, forKey: .number) }
            if (createdTime != nil) { try container.encode(createdTime, forKey: .createdTime) }
            if (modifiedTime != nil) { try container.encode(modifiedTime, forKey: .modifiedTime) }
            if (deletedTime != nil) { try container.encode(deletedTime, forKey: .deletedTime) }
            if (payment != nil) { try container.encode(payment, forKey: .payment) }
        }
    }

}