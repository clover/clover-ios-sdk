/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Customers {

    public class PhoneNumber: Codable {

        public var id: String?
        public var phoneNumber: String?
        /// Customer who this phone number belongs to.
        public var customer: CLVModels.Base.Reference?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case phoneNumber
            case customer
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.phoneNumber = try rootContainer.decodeIfPresent(String.self, forKey: .phoneNumber)
            } catch {
                decodeError.append(error)
            }
            do {
                self.customer = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .customer)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (phoneNumber != nil) { try container.encode(phoneNumber, forKey: .phoneNumber) }
            if (customer != nil) { try container.encode(customer, forKey: .customer) }
        }
    }

}