/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
    CustomerAssociationRequest will be used in case of creating the customer and associating customer with order when paymentRef is passed or create the customer when the tokenRef is passed.
*/

import Foundation

extension CLVModels.Customers {

    public class CustomerAssociationRequest: Codable {

        /// Payment UUID needs to be passed to create the customer if card transaction is performed and will be used to fetch the payment details.
        public var paymentRef: CLVModels.Base.Reference?
        /// Token UUID needs to be passed if Customer is getting created after the token request or card verification request.
        public var tokenRequestRef: CLVModels.Base.Reference?
        /// Customer Object which will contain the First Name and the Last Name of the Customer.
        public var customer: CLVModels.Customers.Customer?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case paymentRef
            case tokenRequestRef
            case customer
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.paymentRef = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .paymentRef)
            } catch {
                decodeError.append(error)
            }
            do {
                self.tokenRequestRef = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .tokenRequestRef)
            } catch {
                decodeError.append(error)
            }
            do {
                self.customer = try rootContainer.decodeIfPresent(CLVModels.Customers.Customer.self, forKey: .customer)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (paymentRef != nil) { try container.encode(paymentRef, forKey: .paymentRef) }
            if (tokenRequestRef != nil) { try container.encode(tokenRequestRef, forKey: .tokenRequestRef) }
            if (customer != nil) { try container.encode(customer, forKey: .customer) }
        }
    }

}