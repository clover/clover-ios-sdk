/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Customers {

    public class Address: Codable {

        public var id: String?
        public var address1: String?
        public var address2: String?
        public var address3: String?
        public var city: String?
        public var country: String?
        public var state: String?
        public var zip: String?
        /// Customer who this address belongs to.
        public var customer: CLVModels.Base.Reference?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case address1
            case address2
            case address3
            case city
            case country
            case state
            case zip
            case customer
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.address1 = try rootContainer.decodeIfPresent(String.self, forKey: .address1)
            } catch {
                decodeError.append(error)
            }
            do {
                self.address2 = try rootContainer.decodeIfPresent(String.self, forKey: .address2)
            } catch {
                decodeError.append(error)
            }
            do {
                self.address3 = try rootContainer.decodeIfPresent(String.self, forKey: .address3)
            } catch {
                decodeError.append(error)
            }
            do {
                self.city = try rootContainer.decodeIfPresent(String.self, forKey: .city)
            } catch {
                decodeError.append(error)
            }
            do {
                self.country = try rootContainer.decodeIfPresent(String.self, forKey: .country)
            } catch {
                decodeError.append(error)
            }
            do {
                self.state = try rootContainer.decodeIfPresent(String.self, forKey: .state)
            } catch {
                decodeError.append(error)
            }
            do {
                self.zip = try rootContainer.decodeIfPresent(String.self, forKey: .zip)
            } catch {
                decodeError.append(error)
            }
            do {
                self.customer = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .customer)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (address1 != nil) { try container.encode(address1, forKey: .address1) }
            if (address2 != nil) { try container.encode(address2, forKey: .address2) }
            if (address3 != nil) { try container.encode(address3, forKey: .address3) }
            if (city != nil) { try container.encode(city, forKey: .city) }
            if (country != nil) { try container.encode(country, forKey: .country) }
            if (state != nil) { try container.encode(state, forKey: .state) }
            if (zip != nil) { try container.encode(zip, forKey: .zip) }
            if (customer != nil) { try container.encode(customer, forKey: .customer) }
        }
    }

}