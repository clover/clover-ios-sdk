/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotemessage {

    public class TxStartRequestMessage: Codable {

        /// The superClass
        public var _meta_superclass: CLVModels.Remotemessage.Message?
        /// initialization for the type
        public var _meta_init_method: CLVModels.Remotemessage.Method?
        /// If true, then tips on the screen should not be displayed.
        public var suppressOnScreenTips: Bool?
        /// The order
        public var order: CLVModels.Order.Order?
        /// The payIntent
        public var payIntent: CLVModels.Remotemessage.PayIntent?
        /// Extra information to include with the request, like type of request
        public var requestInfo: String?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case _meta_superclass
            case _meta_init_method
            case suppressOnScreenTips
            case order
            case payIntent
            case requestInfo
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self._meta_superclass = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.Message.self, forKey: ._meta_superclass)
            } catch {
                decodeError.append(error)
            }
            do {
                self._meta_init_method = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.Method.self, forKey: ._meta_init_method)
            } catch {
                decodeError.append(error)
            }
            do {
                self.suppressOnScreenTips = try rootContainer.decodeIfPresent(Bool.self, forKey: .suppressOnScreenTips)
            } catch {
                decodeError.append(error)
            }
            do {
                self.order = try rootContainer.decodeIfPresent(CLVModels.Order.Order.self, forKey: .order)
            } catch {
                decodeError.append(error)
            }
            do {
                self.payIntent = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.PayIntent.self, forKey: .payIntent)
            } catch {
                decodeError.append(error)
            }
            do {
                self.requestInfo = try rootContainer.decodeIfPresent(String.self, forKey: .requestInfo)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (_meta_superclass != nil) { try container.encode(_meta_superclass, forKey: ._meta_superclass) }
            if (_meta_init_method != nil) { try container.encode(_meta_init_method, forKey: ._meta_init_method) }
            if (suppressOnScreenTips != nil) { try container.encode(suppressOnScreenTips, forKey: .suppressOnScreenTips) }
            if (order != nil) { try container.encode(order, forKey: .order) }
            if (payIntent != nil) { try container.encode(payIntent, forKey: .payIntent) }
            if (requestInfo != nil) { try container.encode(requestInfo, forKey: .requestInfo) }
        }
    }

}