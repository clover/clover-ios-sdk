/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotemessage {

    public class ShowReceiptOptionsMessage: Codable {

        /// The superClass
        public var _meta_superclass: CLVModels.Remotemessage.Message?
        /// initialization for the type
        public var _meta_init_method: CLVModels.Remotemessage.Method?
        public var orderId: String?
        public var paymentId: String?
        public var refundId: String?
        public var creditId: String?
        public var disableCloverPrinting: Bool?
        public var payment: CLVModels.Payments.Payment?
        public var credit: CLVModels.Payments.Credit?
        public var refund: CLVModels.Payments.Refund?
        public var isReprint: Bool?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case _meta_superclass
            case _meta_init_method
            case orderId
            case paymentId
            case refundId
            case creditId
            case disableCloverPrinting
            case payment
            case credit
            case refund
            case isReprint
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self._meta_superclass = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.Message.self, forKey: ._meta_superclass)
            } catch {
                decodeError.append(error)
            }
            do {
                self._meta_init_method = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.Method.self, forKey: ._meta_init_method)
            } catch {
                decodeError.append(error)
            }
            do {
                self.orderId = try rootContainer.decodeIfPresent(String.self, forKey: .orderId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.paymentId = try rootContainer.decodeIfPresent(String.self, forKey: .paymentId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.refundId = try rootContainer.decodeIfPresent(String.self, forKey: .refundId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.creditId = try rootContainer.decodeIfPresent(String.self, forKey: .creditId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.disableCloverPrinting = try rootContainer.decodeIfPresent(Bool.self, forKey: .disableCloverPrinting)
            } catch {
                decodeError.append(error)
            }
            do {
                self.payment = try rootContainer.decodeIfPresent(CLVModels.Payments.Payment.self, forKey: .payment)
            } catch {
                decodeError.append(error)
            }
            do {
                self.credit = try rootContainer.decodeIfPresent(CLVModels.Payments.Credit.self, forKey: .credit)
            } catch {
                decodeError.append(error)
            }
            do {
                self.refund = try rootContainer.decodeIfPresent(CLVModels.Payments.Refund.self, forKey: .refund)
            } catch {
                decodeError.append(error)
            }
            do {
                self.isReprint = try rootContainer.decodeIfPresent(Bool.self, forKey: .isReprint)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (_meta_superclass != nil) { try container.encode(_meta_superclass, forKey: ._meta_superclass) }
            if (_meta_init_method != nil) { try container.encode(_meta_init_method, forKey: ._meta_init_method) }
            if (orderId != nil) { try container.encode(orderId, forKey: .orderId) }
            if (paymentId != nil) { try container.encode(paymentId, forKey: .paymentId) }
            if (refundId != nil) { try container.encode(refundId, forKey: .refundId) }
            if (creditId != nil) { try container.encode(creditId, forKey: .creditId) }
            if (disableCloverPrinting != nil) { try container.encode(disableCloverPrinting, forKey: .disableCloverPrinting) }
            if (payment != nil) { try container.encode(payment, forKey: .payment) }
            if (credit != nil) { try container.encode(credit, forKey: .credit) }
            if (refund != nil) { try container.encode(refund, forKey: .refund) }
            if (isReprint != nil) { try container.encode(isReprint, forKey: .isReprint) }
        }
    }

}