/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
    Used in loyalty systems.
*/

import Foundation

extension CLVModels.Remotemessage {

    public class LoyaltyPointsCalculatedMessage: Codable {

        /// The superClass
        public var _meta_superclass: CLVModels.Remotemessage.Message?
        /// initialization for the type
        public var _meta_init_method: CLVModels.Remotemessage.Method?
        /// The id for the loyalty entity (likely a customer id of some type)
        public var loyaltyUuid: String?
        /// The number of points calculated for the event
        public var points: Int64?
        /// The order with which the awarded are associated
        public var orderId: String?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case _meta_superclass
            case _meta_init_method
            case loyaltyUuid
            case points
            case orderId
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self._meta_superclass = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.Message.self, forKey: ._meta_superclass)
            } catch {
                decodeError.append(error)
            }
            do {
                self._meta_init_method = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.Method.self, forKey: ._meta_init_method)
            } catch {
                decodeError.append(error)
            }
            do {
                self.loyaltyUuid = try rootContainer.decodeIfPresent(String.self, forKey: .loyaltyUuid)
            } catch {
                decodeError.append(error)
            }
            do {
                self.points = try rootContainer.decodeIfPresent(Int64.self, forKey: .points)
            } catch {
                decodeError.append(error)
            }
            do {
                self.orderId = try rootContainer.decodeIfPresent(String.self, forKey: .orderId)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (_meta_superclass != nil) { try container.encode(_meta_superclass, forKey: ._meta_superclass) }
            if (_meta_init_method != nil) { try container.encode(_meta_init_method, forKey: ._meta_init_method) }
            if (loyaltyUuid != nil) { try container.encode(loyaltyUuid, forKey: .loyaltyUuid) }
            if (points != nil) { try container.encode(points, forKey: .points) }
            if (orderId != nil) { try container.encode(orderId, forKey: .orderId) }
        }
    }

}