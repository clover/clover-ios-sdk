/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotemessage {

    public class PairingResponseMessage: Codable {

        /// The superClass
        public var _meta_superclass: CLVModels.Remotemessage.PairingRequestMessage?
        /// initialization for the type
        public var _meta_init_method: CLVModels.Remotemessage.Method?
        /// The state of the pairing flow
        public var pairingState: CLVModels.Remotemessage.PairingState?
        /// A timestamp of when the authentication token was obtained
        public var millis: Int64?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case _meta_superclass
            case _meta_init_method
            case pairingState
            case millis
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self._meta_superclass = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.PairingRequestMessage.self, forKey: ._meta_superclass)
            } catch {
                decodeError.append(error)
            }
            do {
                self._meta_init_method = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.Method.self, forKey: ._meta_init_method)
            } catch {
                decodeError.append(error)
            }
            do {
                self.pairingState = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.PairingState.self, forKey: .pairingState)
            } catch {
                decodeError.append(error)
            }
            do {
                self.millis = try rootContainer.decodeIfPresent(Int64.self, forKey: .millis)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (_meta_superclass != nil) { try container.encode(_meta_superclass, forKey: ._meta_superclass) }
            if (_meta_init_method != nil) { try container.encode(_meta_init_method, forKey: ._meta_init_method) }
            if (pairingState != nil) { try container.encode(pairingState, forKey: .pairingState) }
            if (millis != nil) { try container.encode(millis, forKey: .millis) }
        }
    }

}