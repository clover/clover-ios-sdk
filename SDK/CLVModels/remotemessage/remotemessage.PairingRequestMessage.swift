/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotemessage {

    public class PairingRequestMessage: Codable {

        /// The superClass
        public var _meta_superclass: CLVModels.Remotemessage.Message?
        /// initialization for the type
        public var _meta_init_method: CLVModels.Remotemessage.Method?
        /// The peripheral sends a pairing request containing the peripheral name
        public var name: String?
        /// The peripheral serial number
        public var serialNumber: String?
        /// The name of the application the peripheral is associated with. This is the "resourceDescriptor" in the handshake
        public var applicationName: String?
        /// The token, recognized by the specific device.
        public var authenticationToken: CLVModels.Variant?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case _meta_superclass
            case _meta_init_method
            case name
            case serialNumber
            case applicationName
            case authenticationToken
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self._meta_superclass = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.Message.self, forKey: ._meta_superclass)
            } catch {
                decodeError.append(error)
            }
            do {
                self._meta_init_method = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.Method.self, forKey: ._meta_init_method)
            } catch {
                decodeError.append(error)
            }
            do {
                self.name = try rootContainer.decodeIfPresent(String.self, forKey: .name)
            } catch {
                decodeError.append(error)
            }
            do {
                self.serialNumber = try rootContainer.decodeIfPresent(String.self, forKey: .serialNumber)
            } catch {
                decodeError.append(error)
            }
            do {
                self.applicationName = try rootContainer.decodeIfPresent(String.self, forKey: .applicationName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.authenticationToken = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .authenticationToken)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (_meta_superclass != nil) { try container.encode(_meta_superclass, forKey: ._meta_superclass) }
            if (_meta_init_method != nil) { try container.encode(_meta_init_method, forKey: ._meta_init_method) }
            if (name != nil) { try container.encode(name, forKey: .name) }
            if (serialNumber != nil) { try container.encode(serialNumber, forKey: .serialNumber) }
            if (applicationName != nil) { try container.encode(applicationName, forKey: .applicationName) }
            if (authenticationToken != nil) { try container.encode(authenticationToken, forKey: .authenticationToken) }
        }
    }

}