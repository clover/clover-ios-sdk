/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotemessage {

    public class CustomerProvidedDataMessage: Codable {

        /// The superClass
        public var _meta_superclass: CLVModels.Remotemessage.Message?
        /// initialization for the type
        public var _meta_init_method: CLVModels.Remotemessage.Method?
        /// An id that represents this collection event
        public var eventId: String?
        /// The configuration that identifies what this event data represents.  This is used when interpreting the data.
        public var config: CLVModels.Loyalty.LoyaltyDataConfig?
        /// The data that was collected.  This is similar to a CLOB.
        public var data: String?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case _meta_superclass
            case _meta_init_method
            case eventId
            case config
            case data
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self._meta_superclass = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.Message.self, forKey: ._meta_superclass)
            } catch {
                decodeError.append(error)
            }
            do {
                self._meta_init_method = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.Method.self, forKey: ._meta_init_method)
            } catch {
                decodeError.append(error)
            }
            do {
                self.eventId = try rootContainer.decodeIfPresent(String.self, forKey: .eventId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.config = try rootContainer.decodeIfPresent(CLVModels.Loyalty.LoyaltyDataConfig.self, forKey: .config)
            } catch {
                decodeError.append(error)
            }
            do {
                self.data = try rootContainer.decodeIfPresent(String.self, forKey: .data)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (_meta_superclass != nil) { try container.encode(_meta_superclass, forKey: ._meta_superclass) }
            if (_meta_init_method != nil) { try container.encode(_meta_init_method, forKey: ._meta_init_method) }
            if (eventId != nil) { try container.encode(eventId, forKey: .eventId) }
            if (config != nil) { try container.encode(config, forKey: .config) }
            if (data != nil) { try container.encode(data, forKey: .data) }
        }
    }

}