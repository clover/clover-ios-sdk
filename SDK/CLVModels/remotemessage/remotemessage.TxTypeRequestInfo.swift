/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotemessage {

    public class TxTypeRequestInfo: Codable {

        public var SALE: String?
        public var AUTH: String?
        public var PREAUTH: String?
        public var CREDIT: String?
        public var REFUND: String?
        public var VOID_PAYMENT: String?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case SALE
            case AUTH
            case PREAUTH
            case CREDIT
            case REFUND
            case VOID_PAYMENT
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.SALE = try rootContainer.decodeIfPresent(String.self, forKey: .SALE)
            } catch {
                decodeError.append(error)
            }
            do {
                self.AUTH = try rootContainer.decodeIfPresent(String.self, forKey: .AUTH)
            } catch {
                decodeError.append(error)
            }
            do {
                self.PREAUTH = try rootContainer.decodeIfPresent(String.self, forKey: .PREAUTH)
            } catch {
                decodeError.append(error)
            }
            do {
                self.CREDIT = try rootContainer.decodeIfPresent(String.self, forKey: .CREDIT)
            } catch {
                decodeError.append(error)
            }
            do {
                self.REFUND = try rootContainer.decodeIfPresent(String.self, forKey: .REFUND)
            } catch {
                decodeError.append(error)
            }
            do {
                self.VOID_PAYMENT = try rootContainer.decodeIfPresent(String.self, forKey: .VOID_PAYMENT)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (SALE != nil) { try container.encode(SALE, forKey: .SALE) }
            if (AUTH != nil) { try container.encode(AUTH, forKey: .AUTH) }
            if (PREAUTH != nil) { try container.encode(PREAUTH, forKey: .PREAUTH) }
            if (CREDIT != nil) { try container.encode(CREDIT, forKey: .CREDIT) }
            if (REFUND != nil) { try container.encode(REFUND, forKey: .REFUND) }
            if (VOID_PAYMENT != nil) { try container.encode(VOID_PAYMENT, forKey: .VOID_PAYMENT) }
        }
    }

}