/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

extension CLVModels.Remotemessage {

    public enum ExternalDeviceSubState: Codable {
        case CUSTOM_ACTIVITY
        case STARTING_PAYMENT_FLOW
        case PROCESSING_PAYMENT
        case PROCESSING_CARD_DATA
        case PROCESSING_CREDIT
        case VERIFY_SIGNATURE
        case TIP_SCREEN
        case RECEIPT_SCREEN
        case CONFIRM_PAYMENT
        case UNKNOWN
        case PARSE_UNKNOWN(String)

        enum Key: CodingKey {
            case rawValue
        }

        public init(rawValue:String) {
            switch rawValue {
                case  "CUSTOM_ACTIVITY":
                    self = .CUSTOM_ACTIVITY
                case  "STARTING_PAYMENT_FLOW":
                    self = .STARTING_PAYMENT_FLOW
                case  "PROCESSING_PAYMENT":
                    self = .PROCESSING_PAYMENT
                case  "PROCESSING_CARD_DATA":
                    self = .PROCESSING_CARD_DATA
                case  "PROCESSING_CREDIT":
                    self = .PROCESSING_CREDIT
                case  "VERIFY_SIGNATURE":
                    self = .VERIFY_SIGNATURE
                case  "TIP_SCREEN":
                    self = .TIP_SCREEN
                case  "RECEIPT_SCREEN":
                    self = .RECEIPT_SCREEN
                case  "CONFIRM_PAYMENT":
                    self = .CONFIRM_PAYMENT
                case  "UNKNOWN":
                    self = .UNKNOWN
                default:
                    self = .PARSE_UNKNOWN(rawValue)
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self.init(rawValue: rawValue)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(toString)
        }

        public var toString: String {
            switch self {
                case  .CUSTOM_ACTIVITY:
                    return "CUSTOM_ACTIVITY"
                case  .STARTING_PAYMENT_FLOW:
                    return "STARTING_PAYMENT_FLOW"
                case  .PROCESSING_PAYMENT:
                    return "PROCESSING_PAYMENT"
                case  .PROCESSING_CARD_DATA:
                    return "PROCESSING_CARD_DATA"
                case  .PROCESSING_CREDIT:
                    return "PROCESSING_CREDIT"
                case  .VERIFY_SIGNATURE:
                    return "VERIFY_SIGNATURE"
                case  .TIP_SCREEN:
                    return "TIP_SCREEN"
                case  .RECEIPT_SCREEN:
                    return "RECEIPT_SCREEN"
                case  .CONFIRM_PAYMENT:
                    return "CONFIRM_PAYMENT"
                case  .UNKNOWN:
                    return "UNKNOWN"
                case .PARSE_UNKNOWN(let rawValue):
                    return rawValue            
            }
        }
    }
}