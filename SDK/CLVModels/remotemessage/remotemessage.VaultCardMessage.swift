/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotemessage {

    public class VaultCardMessage: Codable {

        /// The superClass
        public var _meta_superclass: CLVModels.Remotemessage.Message?
        /// initialization for the type
        public var _meta_init_method: CLVModels.Remotemessage.Method?
        /// Allowed entry methods
        public var cardEntryMethods: Int32?
        /// If set, this indicates the token type.  If unset or unrecognized, the default legacy type of tokenization is used
        public var tokenType: String?
        /// If true, then request a token that can be used only one time.
        public var singleUse: Bool?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case _meta_superclass
            case _meta_init_method
            case cardEntryMethods
            case tokenType
            case singleUse
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self._meta_superclass = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.Message.self, forKey: ._meta_superclass)
            } catch {
                decodeError.append(error)
            }
            do {
                self._meta_init_method = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.Method.self, forKey: ._meta_init_method)
            } catch {
                decodeError.append(error)
            }
            do {
                self.cardEntryMethods = try rootContainer.decodeIfPresent(Int32.self, forKey: .cardEntryMethods)
            } catch {
                decodeError.append(error)
            }
            do {
                self.tokenType = try rootContainer.decodeIfPresent(String.self, forKey: .tokenType)
            } catch {
                decodeError.append(error)
            }
            do {
                self.singleUse = try rootContainer.decodeIfPresent(Bool.self, forKey: .singleUse)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (_meta_superclass != nil) { try container.encode(_meta_superclass, forKey: ._meta_superclass) }
            if (_meta_init_method != nil) { try container.encode(_meta_init_method, forKey: ._meta_init_method) }
            if (cardEntryMethods != nil) { try container.encode(cardEntryMethods, forKey: .cardEntryMethods) }
            if (tokenType != nil) { try container.encode(tokenType, forKey: .tokenType) }
            if (singleUse != nil) { try container.encode(singleUse, forKey: .singleUse) }
        }
    }

}