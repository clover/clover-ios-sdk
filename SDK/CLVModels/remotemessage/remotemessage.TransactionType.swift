/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

extension CLVModels.Remotemessage {

    public enum TransactionType: Codable {
        case PAYMENT
        case CREDIT
        case AUTH
        case DATA
        case BALANCE_INQUIRY
        case PAYMENT_REVERSAL
        case PAYMENT_ADJUSTMENT
        case CREDIT_REVERSAL
        case REFUND_ADJUSTMENT
        case CASH_ADVANCE
        case CAPTURE_PREAUTH
        case VAS_DATA
        case VERIFY_CARD
        case TOKENIZE_CARD
        case PARSE_UNKNOWN(String)

        enum Key: CodingKey {
            case rawValue
        }

        public init(rawValue:String) {
            switch rawValue {
                case  "PAYMENT":
                    self = .PAYMENT
                case  "CREDIT":
                    self = .CREDIT
                case  "AUTH":
                    self = .AUTH
                case  "DATA":
                    self = .DATA
                case  "BALANCE_INQUIRY":
                    self = .BALANCE_INQUIRY
                case  "PAYMENT_REVERSAL":
                    self = .PAYMENT_REVERSAL
                case  "PAYMENT_ADJUSTMENT":
                    self = .PAYMENT_ADJUSTMENT
                case  "CREDIT_REVERSAL":
                    self = .CREDIT_REVERSAL
                case  "REFUND_ADJUSTMENT":
                    self = .REFUND_ADJUSTMENT
                case  "CASH_ADVANCE":
                    self = .CASH_ADVANCE
                case  "CAPTURE_PREAUTH":
                    self = .CAPTURE_PREAUTH
                case  "VAS_DATA":
                    self = .VAS_DATA
                case  "VERIFY_CARD":
                    self = .VERIFY_CARD
                case  "TOKENIZE_CARD":
                    self = .TOKENIZE_CARD
                default:
                    self = .PARSE_UNKNOWN(rawValue)
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self.init(rawValue: rawValue)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(toString)
        }

        public var toString: String {
            switch self {
                case  .PAYMENT:
                    return "PAYMENT"
                case  .CREDIT:
                    return "CREDIT"
                case  .AUTH:
                    return "AUTH"
                case  .DATA:
                    return "DATA"
                case  .BALANCE_INQUIRY:
                    return "BALANCE_INQUIRY"
                case  .PAYMENT_REVERSAL:
                    return "PAYMENT_REVERSAL"
                case  .PAYMENT_ADJUSTMENT:
                    return "PAYMENT_ADJUSTMENT"
                case  .CREDIT_REVERSAL:
                    return "CREDIT_REVERSAL"
                case  .REFUND_ADJUSTMENT:
                    return "REFUND_ADJUSTMENT"
                case  .CASH_ADVANCE:
                    return "CASH_ADVANCE"
                case  .CAPTURE_PREAUTH:
                    return "CAPTURE_PREAUTH"
                case  .VAS_DATA:
                    return "VAS_DATA"
                case  .VERIFY_CARD:
                    return "VERIFY_CARD"
                case  .TOKENIZE_CARD:
                    return "TOKENIZE_CARD"
                case .PARSE_UNKNOWN(let rawValue):
                    return rawValue            
            }
        }
    }
}