/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotemessage {

    public class Message: Codable {

        /// The list of message types
        public var method: CLVModels.Remotemessage.Method?
        /// The business message id for this message.  This can be used to set the 'sourceMessageId' for meesages that are 'caused' by this message.  This may be null.
        public var messageId: String?
        /// The remote message id that 'caused' this message to be sent.  This may not be set.
        public var sourceMessageId: String?
        /// The version of this message
        public var version_: CLVModels.Variant?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case method
            case messageId
            case sourceMessageId
            case version
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.method = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.Method.self, forKey: .method)
            } catch {
                decodeError.append(error)
            }
            do {
                self.messageId = try rootContainer.decodeIfPresent(String.self, forKey: .messageId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.sourceMessageId = try rootContainer.decodeIfPresent(String.self, forKey: .sourceMessageId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.version_ = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .version)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (method != nil) { try container.encode(method, forKey: .method) }
            if (messageId != nil) { try container.encode(messageId, forKey: .messageId) }
            if (sourceMessageId != nil) { try container.encode(sourceMessageId, forKey: .sourceMessageId) }
            if (version_ != nil) { try container.encode(version_, forKey: .version) }
        }
    }

}