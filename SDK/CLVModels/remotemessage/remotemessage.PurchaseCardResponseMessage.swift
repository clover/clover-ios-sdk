/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotemessage {

    public class PurchaseCardResponseMessage: Codable {

        /// The superClass
        public var _meta_superclass: CLVModels.Remotemessage.Message?
        /// initialization for the type
        public var _meta_init_method: CLVModels.Remotemessage.Method?
        /// Result Code
        public var resultCode: Int32?
        /// The purchase card L2 information
        public var purchaseCardL2: CLVModels.Payments.PurchaseCardL2?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case _meta_superclass
            case _meta_init_method
            case resultCode
            case purchaseCardL2
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self._meta_superclass = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.Message.self, forKey: ._meta_superclass)
            } catch {
                decodeError.append(error)
            }
            do {
                self._meta_init_method = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.Method.self, forKey: ._meta_init_method)
            } catch {
                decodeError.append(error)
            }
            do {
                self.resultCode = try rootContainer.decodeIfPresent(Int32.self, forKey: .resultCode)
            } catch {
                decodeError.append(error)
            }
            do {
                self.purchaseCardL2 = try rootContainer.decodeIfPresent(CLVModels.Payments.PurchaseCardL2.self, forKey: .purchaseCardL2)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (_meta_superclass != nil) { try container.encode(_meta_superclass, forKey: ._meta_superclass) }
            if (_meta_init_method != nil) { try container.encode(_meta_init_method, forKey: ._meta_init_method) }
            if (resultCode != nil) { try container.encode(resultCode, forKey: .resultCode) }
            if (purchaseCardL2 != nil) { try container.encode(purchaseCardL2, forKey: .purchaseCardL2) }
        }
    }

}