/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotemessage {

    public class InvalidStateTransitionMessage: Codable {

        /// The superClass
        public var _meta_superclass: CLVModels.Remotemessage.Message?
        /// initialization for the type
        public var _meta_init_method: CLVModels.Remotemessage.Method?
        public var result: CLVModels.Remotemessage.ResultStatus?
        /// Detail message from the server.
        public var reason: String?
        public var requestedTransition: String?
        public var state: CLVModels.Remotemessage.ExternalDeviceState?
        public var substate: CLVModels.Remotemessage.ExternalDeviceSubState?
        public var data: CLVModels.Remotemessage.ExternalDeviceStateData?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case _meta_superclass
            case _meta_init_method
            case result
            case reason
            case requestedTransition
            case state
            case substate
            case data
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self._meta_superclass = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.Message.self, forKey: ._meta_superclass)
            } catch {
                decodeError.append(error)
            }
            do {
                self._meta_init_method = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.Method.self, forKey: ._meta_init_method)
            } catch {
                decodeError.append(error)
            }
            do {
                self.result = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.ResultStatus.self, forKey: .result)
            } catch {
                decodeError.append(error)
            }
            do {
                self.reason = try rootContainer.decodeIfPresent(String.self, forKey: .reason)
            } catch {
                decodeError.append(error)
            }
            do {
                self.requestedTransition = try rootContainer.decodeIfPresent(String.self, forKey: .requestedTransition)
            } catch {
                decodeError.append(error)
            }
            do {
                self.state = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.ExternalDeviceState.self, forKey: .state)
            } catch {
                decodeError.append(error)
            }
            do {
                self.substate = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.ExternalDeviceSubState.self, forKey: .substate)
            } catch {
                decodeError.append(error)
            }
            do {
                self.data = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.ExternalDeviceStateData.self, forKey: .data)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (_meta_superclass != nil) { try container.encode(_meta_superclass, forKey: ._meta_superclass) }
            if (_meta_init_method != nil) { try container.encode(_meta_init_method, forKey: ._meta_init_method) }
            if (result != nil) { try container.encode(result, forKey: .result) }
            if (reason != nil) { try container.encode(reason, forKey: .reason) }
            if (requestedTransition != nil) { try container.encode(requestedTransition, forKey: .requestedTransition) }
            if (state != nil) { try container.encode(state, forKey: .state) }
            if (substate != nil) { try container.encode(substate, forKey: .substate) }
            if (data != nil) { try container.encode(data, forKey: .data) }
        }
    }

}