/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

extension CLVModels.Remotemessage {

    public enum KeyPress: Codable {
        case NONE
        case ENTER
        case ESC
        case BACKSPACE
        case TAB
        case STAR
        case BUTTON_1
        case BUTTON_2
        case BUTTON_3
        case BUTTON_4
        case BUTTON_5
        case BUTTON_6
        case BUTTON_7
        case BUTTON_8
        case DIGIT_1
        case DIGIT_2
        case DIGIT_3
        case DIGIT_4
        case DIGIT_5
        case DIGIT_6
        case DIGIT_7
        case DIGIT_8
        case DIGIT_9
        case DIGIT_0
        case PARSE_UNKNOWN(String)

        enum Key: CodingKey {
            case rawValue
        }

        public init(rawValue:String) {
            switch rawValue {
                case  "NONE":
                    self = .NONE
                case  "ENTER":
                    self = .ENTER
                case  "ESC":
                    self = .ESC
                case  "BACKSPACE":
                    self = .BACKSPACE
                case  "TAB":
                    self = .TAB
                case  "STAR":
                    self = .STAR
                case  "BUTTON_1":
                    self = .BUTTON_1
                case  "BUTTON_2":
                    self = .BUTTON_2
                case  "BUTTON_3":
                    self = .BUTTON_3
                case  "BUTTON_4":
                    self = .BUTTON_4
                case  "BUTTON_5":
                    self = .BUTTON_5
                case  "BUTTON_6":
                    self = .BUTTON_6
                case  "BUTTON_7":
                    self = .BUTTON_7
                case  "BUTTON_8":
                    self = .BUTTON_8
                case  "DIGIT_1":
                    self = .DIGIT_1
                case  "DIGIT_2":
                    self = .DIGIT_2
                case  "DIGIT_3":
                    self = .DIGIT_3
                case  "DIGIT_4":
                    self = .DIGIT_4
                case  "DIGIT_5":
                    self = .DIGIT_5
                case  "DIGIT_6":
                    self = .DIGIT_6
                case  "DIGIT_7":
                    self = .DIGIT_7
                case  "DIGIT_8":
                    self = .DIGIT_8
                case  "DIGIT_9":
                    self = .DIGIT_9
                case  "DIGIT_0":
                    self = .DIGIT_0
                default:
                    self = .PARSE_UNKNOWN(rawValue)
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self.init(rawValue: rawValue)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(toString)
        }

        public var toString: String {
            switch self {
                case  .NONE:
                    return "NONE"
                case  .ENTER:
                    return "ENTER"
                case  .ESC:
                    return "ESC"
                case  .BACKSPACE:
                    return "BACKSPACE"
                case  .TAB:
                    return "TAB"
                case  .STAR:
                    return "STAR"
                case  .BUTTON_1:
                    return "BUTTON_1"
                case  .BUTTON_2:
                    return "BUTTON_2"
                case  .BUTTON_3:
                    return "BUTTON_3"
                case  .BUTTON_4:
                    return "BUTTON_4"
                case  .BUTTON_5:
                    return "BUTTON_5"
                case  .BUTTON_6:
                    return "BUTTON_6"
                case  .BUTTON_7:
                    return "BUTTON_7"
                case  .BUTTON_8:
                    return "BUTTON_8"
                case  .DIGIT_1:
                    return "DIGIT_1"
                case  .DIGIT_2:
                    return "DIGIT_2"
                case  .DIGIT_3:
                    return "DIGIT_3"
                case  .DIGIT_4:
                    return "DIGIT_4"
                case  .DIGIT_5:
                    return "DIGIT_5"
                case  .DIGIT_6:
                    return "DIGIT_6"
                case  .DIGIT_7:
                    return "DIGIT_7"
                case  .DIGIT_8:
                    return "DIGIT_8"
                case  .DIGIT_9:
                    return "DIGIT_9"
                case  .DIGIT_0:
                    return "DIGIT_0"
                case .PARSE_UNKNOWN(let rawValue):
                    return rawValue            
            }
        }
    }
}