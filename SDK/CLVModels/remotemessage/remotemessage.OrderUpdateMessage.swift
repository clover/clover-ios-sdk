/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotemessage {

    public class OrderUpdateMessage: Codable {

        /// The superClass
        public var _meta_superclass: CLVModels.Remotemessage.Message?
        /// initialization for the type
        public var _meta_init_method: CLVModels.Remotemessage.Method?
        /// The order that is to be displayed.
        public var order: CLVModels.Order.DisplayOrder?
        /// Items that were added to the display order.
        public var lineItemsAddedOperation: CLVModels.Order.operation.LineItemsAddedOperation?
        /// Items that were added to the display order.
        public var lineItemsDeletedOperation: CLVModels.Order.operation.LineItemsDeletedOperation?
        /// Items that were added to the display order.
        public var discountsAddedOperation: CLVModels.Order.operation.DiscountsAddedOperation?
        /// Items that were added to the display order.
        public var discountsDeletedOperation: CLVModels.Order.operation.DiscountsDeletedOperation?
        /// Items that were added to the display order.
        public var orderDeletedOperation: CLVModels.Order.operation.OrderDeletedOperation?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case _meta_superclass
            case _meta_init_method
            case order
            case lineItemsAddedOperation
            case lineItemsDeletedOperation
            case discountsAddedOperation
            case discountsDeletedOperation
            case orderDeletedOperation
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self._meta_superclass = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.Message.self, forKey: ._meta_superclass)
            } catch {
                decodeError.append(error)
            }
            do {
                self._meta_init_method = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.Method.self, forKey: ._meta_init_method)
            } catch {
                decodeError.append(error)
            }
            do {
                self.order = try rootContainer.decodeIfPresent(CLVModels.Order.DisplayOrder.self, forKey: .order)
            } catch {
                decodeError.append(error)
            }
            do {
                self.lineItemsAddedOperation = try rootContainer.decodeIfPresent(CLVModels.Order.operation.LineItemsAddedOperation.self, forKey: .lineItemsAddedOperation)
            } catch {
                decodeError.append(error)
            }
            do {
                self.lineItemsDeletedOperation = try rootContainer.decodeIfPresent(CLVModels.Order.operation.LineItemsDeletedOperation.self, forKey: .lineItemsDeletedOperation)
            } catch {
                decodeError.append(error)
            }
            do {
                self.discountsAddedOperation = try rootContainer.decodeIfPresent(CLVModels.Order.operation.DiscountsAddedOperation.self, forKey: .discountsAddedOperation)
            } catch {
                decodeError.append(error)
            }
            do {
                self.discountsDeletedOperation = try rootContainer.decodeIfPresent(CLVModels.Order.operation.DiscountsDeletedOperation.self, forKey: .discountsDeletedOperation)
            } catch {
                decodeError.append(error)
            }
            do {
                self.orderDeletedOperation = try rootContainer.decodeIfPresent(CLVModels.Order.operation.OrderDeletedOperation.self, forKey: .orderDeletedOperation)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (_meta_superclass != nil) { try container.encode(_meta_superclass, forKey: ._meta_superclass) }
            if (_meta_init_method != nil) { try container.encode(_meta_init_method, forKey: ._meta_init_method) }
            if (order != nil) { try container.encode(order, forKey: .order) }
            if (lineItemsAddedOperation != nil) { try container.encode(lineItemsAddedOperation, forKey: .lineItemsAddedOperation) }
            if (lineItemsDeletedOperation != nil) { try container.encode(lineItemsDeletedOperation, forKey: .lineItemsDeletedOperation) }
            if (discountsAddedOperation != nil) { try container.encode(discountsAddedOperation, forKey: .discountsAddedOperation) }
            if (discountsDeletedOperation != nil) { try container.encode(discountsDeletedOperation, forKey: .discountsDeletedOperation) }
            if (orderDeletedOperation != nil) { try container.encode(orderDeletedOperation, forKey: .orderDeletedOperation) }
        }
    }

}