/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Remotemessage {

    public class TxStartResponseMessage: Codable {

        /// The superClass
        public var _meta_superclass: CLVModels.Remotemessage.Message?
        /// initialization for the type
        public var _meta_init_method: CLVModels.Remotemessage.Method?
        /// Deprecated
        public var success: Bool?
        /// The order
        public var order: CLVModels.Order.Order?
        /// The external id provided in the initiating pay intent
        public var externalPaymentId: String?
        public var message: String?
        public var reason: String?
        public var result: CLVModels.Remotemessage.TxStartResponseResult?
        /// Extra information to include with the request, like type of request
        public var requestInfo: String?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case _meta_superclass
            case _meta_init_method
            case success
            case order
            case externalPaymentId
            case message
            case reason
            case result
            case requestInfo
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self._meta_superclass = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.Message.self, forKey: ._meta_superclass)
            } catch {
                decodeError.append(error)
            }
            do {
                self._meta_init_method = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.Method.self, forKey: ._meta_init_method)
            } catch {
                decodeError.append(error)
            }
            do {
                self.success = try rootContainer.decodeIfPresent(Bool.self, forKey: .success)
            } catch {
                decodeError.append(error)
            }
            do {
                self.order = try rootContainer.decodeIfPresent(CLVModels.Order.Order.self, forKey: .order)
            } catch {
                decodeError.append(error)
            }
            do {
                self.externalPaymentId = try rootContainer.decodeIfPresent(String.self, forKey: .externalPaymentId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.message = try rootContainer.decodeIfPresent(String.self, forKey: .message)
            } catch {
                decodeError.append(error)
            }
            do {
                self.reason = try rootContainer.decodeIfPresent(String.self, forKey: .reason)
            } catch {
                decodeError.append(error)
            }
            do {
                self.result = try rootContainer.decodeIfPresent(CLVModels.Remotemessage.TxStartResponseResult.self, forKey: .result)
            } catch {
                decodeError.append(error)
            }
            do {
                self.requestInfo = try rootContainer.decodeIfPresent(String.self, forKey: .requestInfo)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (_meta_superclass != nil) { try container.encode(_meta_superclass, forKey: ._meta_superclass) }
            if (_meta_init_method != nil) { try container.encode(_meta_init_method, forKey: ._meta_init_method) }
            if (success != nil) { try container.encode(success, forKey: .success) }
            if (order != nil) { try container.encode(order, forKey: .order) }
            if (externalPaymentId != nil) { try container.encode(externalPaymentId, forKey: .externalPaymentId) }
            if (message != nil) { try container.encode(message, forKey: .message) }
            if (reason != nil) { try container.encode(reason, forKey: .reason) }
            if (result != nil) { try container.encode(result, forKey: .result) }
            if (requestInfo != nil) { try container.encode(requestInfo, forKey: .requestInfo) }
        }
    }

}