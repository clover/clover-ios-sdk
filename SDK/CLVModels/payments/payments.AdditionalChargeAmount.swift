/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Payments {

    public class AdditionalChargeAmount: Codable {

        /// Additional charge id
        public var id: String?
        /// Amount of the additional charge
        public var amount: Int64?
        /// Percent rate of the additional charge times 10000
        public var rate: Int64?
        /// The type of additional charge
        public var type_: CLVModels.Payments.AdditionalChargeType?
        /// Reference to the payment the additional charge belongs to
        public var payment: CLVModels.Base.Reference?
        /// Reference to the payment the additional charge belongs to
        public var refund: CLVModels.Base.Reference?
        /// Reference to the incremental auth the additional charge belongs to
        public var incrementalAuth: CLVModels.Base.Reference?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case amount
            case rate
            case type
            case payment
            case refund
            case incrementalAuth
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.amount = try rootContainer.decodeIfPresent(Int64.self, forKey: .amount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.rate = try rootContainer.decodeIfPresent(Int64.self, forKey: .rate)
            } catch {
                decodeError.append(error)
            }
            do {
                self.type_ = try rootContainer.decodeIfPresent(CLVModels.Payments.AdditionalChargeType.self, forKey: .type)
            } catch {
                decodeError.append(error)
            }
            do {
                self.payment = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .payment)
            } catch {
                decodeError.append(error)
            }
            do {
                self.refund = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .refund)
            } catch {
                decodeError.append(error)
            }
            do {
                self.incrementalAuth = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .incrementalAuth)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (amount != nil) { try container.encode(amount, forKey: .amount) }
            if (rate != nil) { try container.encode(rate, forKey: .rate) }
            if (type_ != nil) { try container.encode(type_, forKey: .type) }
            if (payment != nil) { try container.encode(payment, forKey: .payment) }
            if (refund != nil) { try container.encode(refund, forKey: .refund) }
            if (incrementalAuth != nil) { try container.encode(incrementalAuth, forKey: .incrementalAuth) }
        }
    }

}