/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

extension CLVModels.Payments {

    public enum CardType: Codable {
        case VISA
        case MC
        case AMEX
        case DISCOVER
        case DINERS_CLUB
        case JCB
        case MAESTRO
        case SOLO
        case LASER
        case CHINA_UNION_PAY
        case CARTE_BLANCHE
        case UNKNOWN
        case GIFT_CARD
        case EBT
        case GIROCARD
        case INTERAC
        case OTHER
        case PARSE_UNKNOWN(String)

        enum Key: CodingKey {
            case rawValue
        }

        public init(rawValue:String) {
            switch rawValue {
                case  "VISA":
                    self = .VISA
                case  "MC":
                    self = .MC
                case  "AMEX":
                    self = .AMEX
                case  "DISCOVER":
                    self = .DISCOVER
                case  "DINERS_CLUB":
                    self = .DINERS_CLUB
                case  "JCB":
                    self = .JCB
                case  "MAESTRO":
                    self = .MAESTRO
                case  "SOLO":
                    self = .SOLO
                case  "LASER":
                    self = .LASER
                case  "CHINA_UNION_PAY":
                    self = .CHINA_UNION_PAY
                case  "CARTE_BLANCHE":
                    self = .CARTE_BLANCHE
                case  "UNKNOWN":
                    self = .UNKNOWN
                case  "GIFT_CARD":
                    self = .GIFT_CARD
                case  "EBT":
                    self = .EBT
                case  "GIROCARD":
                    self = .GIROCARD
                case  "INTERAC":
                    self = .INTERAC
                case  "OTHER":
                    self = .OTHER
                default:
                    self = .PARSE_UNKNOWN(rawValue)
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self.init(rawValue: rawValue)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(toString)
        }

        public var toString: String {
            switch self {
                case  .VISA:
                    return "VISA"
                case  .MC:
                    return "MC"
                case  .AMEX:
                    return "AMEX"
                case  .DISCOVER:
                    return "DISCOVER"
                case  .DINERS_CLUB:
                    return "DINERS_CLUB"
                case  .JCB:
                    return "JCB"
                case  .MAESTRO:
                    return "MAESTRO"
                case  .SOLO:
                    return "SOLO"
                case  .LASER:
                    return "LASER"
                case  .CHINA_UNION_PAY:
                    return "CHINA_UNION_PAY"
                case  .CARTE_BLANCHE:
                    return "CARTE_BLANCHE"
                case  .UNKNOWN:
                    return "UNKNOWN"
                case  .GIFT_CARD:
                    return "GIFT_CARD"
                case  .EBT:
                    return "EBT"
                case  .GIROCARD:
                    return "GIROCARD"
                case  .INTERAC:
                    return "INTERAC"
                case  .OTHER:
                    return "OTHER"
                case .PARSE_UNKNOWN(let rawValue):
                    return rawValue            
            }
        }
    }
}