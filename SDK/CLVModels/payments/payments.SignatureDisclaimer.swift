/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Payments {

    public class SignatureDisclaimer: Codable {

        public var disclaimerText: CLVModels.Variant?
        /// Values that will be substituted in standard disclaimer text (txn date/time, account number, product label, etc.
        public var disclaimerValues: [String:String]?
        /// The payment with which this Signature disclaimer is associated
        public var paymentRef: CLVModels.Base.Reference?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case disclaimerText
            case disclaimerValues
            case paymentRef
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.disclaimerText = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .disclaimerText)
            } catch {
                decodeError.append(error)
            }
            do {
                self.disclaimerValues = try rootContainer.decodeIfPresent([String:String].self, forKey: .disclaimerValues)
            } catch {
                decodeError.append(error)
            }
            do {
                self.paymentRef = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .paymentRef)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (disclaimerText != nil) { try container.encode(disclaimerText, forKey: .disclaimerText) }
            if (disclaimerValues != nil) { try container.encode(disclaimerValues, forKey: .disclaimerValues) }
            if (paymentRef != nil) { try container.encode(paymentRef, forKey: .paymentRef) }
        }
    }

}