/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Payments {

    public class CreditRefund: Codable {

        /// Unique identifier
        public var id: String?
        /// The order with which the refund is associated
        public var orderRef: CLVModels.Base.Reference?
        /// Device which processed the transaction for this refund, a 128-bit UUID, not a normal base-13 Clover ID.
        public var device: CLVModels.Variant?
        /// The time when the refund was recorded on the server
        public var createdTime: Date?
        /// The time when the refund was recorded on the client
        public var clientCreatedTime: Date?
        /// The credit with which the credit refund is associated
        public var credit: CLVModels.Base.Reference?
        public var employee: CLVModels.Base.Reference?
        /// German region-specific information
        public var germanInfo: CLVModels.Variant?
        /// Tracking information for the app that created this payment.
        public var appTracking: CLVModels.Variant?
        /// Transaction information
        public var transactionInfo: CLVModels.Variant?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case orderRef
            case device
            case createdTime
            case clientCreatedTime
            case credit
            case employee
            case germanInfo
            case appTracking
            case transactionInfo
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.orderRef = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .orderRef)
            } catch {
                decodeError.append(error)
            }
            do {
                self.device = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .device)
            } catch {
                decodeError.append(error)
            }
            do {
                self.createdTime = try rootContainer.decodeIfPresent(Date.self, forKey: .createdTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.clientCreatedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .clientCreatedTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.credit = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .credit)
            } catch {
                decodeError.append(error)
            }
            do {
                self.employee = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .employee)
            } catch {
                decodeError.append(error)
            }
            do {
                self.germanInfo = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .germanInfo)
            } catch {
                decodeError.append(error)
            }
            do {
                self.appTracking = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .appTracking)
            } catch {
                decodeError.append(error)
            }
            do {
                self.transactionInfo = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .transactionInfo)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (orderRef != nil) { try container.encode(orderRef, forKey: .orderRef) }
            if (device != nil) { try container.encode(device, forKey: .device) }
            if (createdTime != nil) { try container.encode(createdTime, forKey: .createdTime) }
            if (clientCreatedTime != nil) { try container.encode(clientCreatedTime, forKey: .clientCreatedTime) }
            if (credit != nil) { try container.encode(credit, forKey: .credit) }
            if (employee != nil) { try container.encode(employee, forKey: .employee) }
            if (germanInfo != nil) { try container.encode(germanInfo, forKey: .germanInfo) }
            if (appTracking != nil) { try container.encode(appTracking, forKey: .appTracking) }
            if (transactionInfo != nil) { try container.encode(transactionInfo, forKey: .transactionInfo) }
        }
    }

}