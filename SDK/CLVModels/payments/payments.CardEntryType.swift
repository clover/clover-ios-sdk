/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

extension CLVModels.Payments {

    public enum CardEntryType: Codable {
        case SWIPED
        case KEYED
        case VOICE
        case VAULTED
        case OFFLINE_SWIPED
        case OFFLINE_KEYED
        case EMV_CONTACT
        case EMV_CONTACTLESS
        case MSD_CONTACTLESS
        case PINPAD_MANUAL_ENTRY
        case QR_CODE
        case SCANNED
        case PARSE_UNKNOWN(String)

        enum Key: CodingKey {
            case rawValue
        }

        public init(rawValue:String) {
            switch rawValue {
                case  "SWIPED":
                    self = .SWIPED
                case  "KEYED":
                    self = .KEYED
                case  "VOICE":
                    self = .VOICE
                case  "VAULTED":
                    self = .VAULTED
                case  "OFFLINE_SWIPED":
                    self = .OFFLINE_SWIPED
                case  "OFFLINE_KEYED":
                    self = .OFFLINE_KEYED
                case  "EMV_CONTACT":
                    self = .EMV_CONTACT
                case  "EMV_CONTACTLESS":
                    self = .EMV_CONTACTLESS
                case  "MSD_CONTACTLESS":
                    self = .MSD_CONTACTLESS
                case  "PINPAD_MANUAL_ENTRY":
                    self = .PINPAD_MANUAL_ENTRY
                case  "QR_CODE":
                    self = .QR_CODE
                case  "SCANNED":
                    self = .SCANNED
                default:
                    self = .PARSE_UNKNOWN(rawValue)
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self.init(rawValue: rawValue)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(toString)
        }

        public var toString: String {
            switch self {
                case  .SWIPED:
                    return "SWIPED"
                case  .KEYED:
                    return "KEYED"
                case  .VOICE:
                    return "VOICE"
                case  .VAULTED:
                    return "VAULTED"
                case  .OFFLINE_SWIPED:
                    return "OFFLINE_SWIPED"
                case  .OFFLINE_KEYED:
                    return "OFFLINE_KEYED"
                case  .EMV_CONTACT:
                    return "EMV_CONTACT"
                case  .EMV_CONTACTLESS:
                    return "EMV_CONTACTLESS"
                case  .MSD_CONTACTLESS:
                    return "MSD_CONTACTLESS"
                case  .PINPAD_MANUAL_ENTRY:
                    return "PINPAD_MANUAL_ENTRY"
                case  .QR_CODE:
                    return "QR_CODE"
                case  .SCANNED:
                    return "SCANNED"
                case .PARSE_UNKNOWN(let rawValue):
                    return rawValue            
            }
        }
    }
}