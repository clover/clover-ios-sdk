/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Payments {

    public class PurchaseCardL2: Codable {

        /// Sales tax amount.
        public var taxAmount: Int64?
        /// Taxable status
        public var taxIndicator: CLVModels.Payments.PcTaxIndicator?
        /// Tax amount for freight/shipping.
        public var vatTaxAmount: Int64?
        /// Tax rate on freight/shipping amount.
        public var vatTaxRate: Int32?
        /// Purchase identifier for customer/merchant.
        public var purchaseIdentifier: String?
        /// Purchase card customer code.
        public var pcOrderNumber: String?
        /// Applied discount amount.
        public var discountAmount: Int64?
        /// Freight amount.
        public var freightAmount: Int64?
        /// Duty amount.
        public var dutyAmount: Int64?
        /// Destination postal code.
        public var destinationPostalCode: String?
        /// Ship from postal code.
        public var shipFromPostalCode: String?
        /// Destination country code.
        public var destinationCountryCode: String?
        /// Merchant tax id.
        public var merchantTaxId: String?
        /// Description of the product.
        public var productDescription: String?
        /// The payment with which this extra is associated
        public var paymentRef: CLVModels.Base.Reference?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case taxAmount
            case taxIndicator
            case vatTaxAmount
            case vatTaxRate
            case purchaseIdentifier
            case pcOrderNumber
            case discountAmount
            case freightAmount
            case dutyAmount
            case destinationPostalCode
            case shipFromPostalCode
            case destinationCountryCode
            case merchantTaxId
            case productDescription
            case paymentRef
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.taxAmount = try rootContainer.decodeIfPresent(Int64.self, forKey: .taxAmount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.taxIndicator = try rootContainer.decodeIfPresent(CLVModels.Payments.PcTaxIndicator.self, forKey: .taxIndicator)
            } catch {
                decodeError.append(error)
            }
            do {
                self.vatTaxAmount = try rootContainer.decodeIfPresent(Int64.self, forKey: .vatTaxAmount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.vatTaxRate = try rootContainer.decodeIfPresent(Int32.self, forKey: .vatTaxRate)
            } catch {
                decodeError.append(error)
            }
            do {
                self.purchaseIdentifier = try rootContainer.decodeIfPresent(String.self, forKey: .purchaseIdentifier)
            } catch {
                decodeError.append(error)
            }
            do {
                self.pcOrderNumber = try rootContainer.decodeIfPresent(String.self, forKey: .pcOrderNumber)
            } catch {
                decodeError.append(error)
            }
            do {
                self.discountAmount = try rootContainer.decodeIfPresent(Int64.self, forKey: .discountAmount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.freightAmount = try rootContainer.decodeIfPresent(Int64.self, forKey: .freightAmount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.dutyAmount = try rootContainer.decodeIfPresent(Int64.self, forKey: .dutyAmount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.destinationPostalCode = try rootContainer.decodeIfPresent(String.self, forKey: .destinationPostalCode)
            } catch {
                decodeError.append(error)
            }
            do {
                self.shipFromPostalCode = try rootContainer.decodeIfPresent(String.self, forKey: .shipFromPostalCode)
            } catch {
                decodeError.append(error)
            }
            do {
                self.destinationCountryCode = try rootContainer.decodeIfPresent(String.self, forKey: .destinationCountryCode)
            } catch {
                decodeError.append(error)
            }
            do {
                self.merchantTaxId = try rootContainer.decodeIfPresent(String.self, forKey: .merchantTaxId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.productDescription = try rootContainer.decodeIfPresent(String.self, forKey: .productDescription)
            } catch {
                decodeError.append(error)
            }
            do {
                self.paymentRef = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .paymentRef)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (taxAmount != nil) { try container.encode(taxAmount, forKey: .taxAmount) }
            if (taxIndicator != nil) { try container.encode(taxIndicator, forKey: .taxIndicator) }
            if (vatTaxAmount != nil) { try container.encode(vatTaxAmount, forKey: .vatTaxAmount) }
            if (vatTaxRate != nil) { try container.encode(vatTaxRate, forKey: .vatTaxRate) }
            if (purchaseIdentifier != nil) { try container.encode(purchaseIdentifier, forKey: .purchaseIdentifier) }
            if (pcOrderNumber != nil) { try container.encode(pcOrderNumber, forKey: .pcOrderNumber) }
            if (discountAmount != nil) { try container.encode(discountAmount, forKey: .discountAmount) }
            if (freightAmount != nil) { try container.encode(freightAmount, forKey: .freightAmount) }
            if (dutyAmount != nil) { try container.encode(dutyAmount, forKey: .dutyAmount) }
            if (destinationPostalCode != nil) { try container.encode(destinationPostalCode, forKey: .destinationPostalCode) }
            if (shipFromPostalCode != nil) { try container.encode(shipFromPostalCode, forKey: .shipFromPostalCode) }
            if (destinationCountryCode != nil) { try container.encode(destinationCountryCode, forKey: .destinationCountryCode) }
            if (merchantTaxId != nil) { try container.encode(merchantTaxId, forKey: .merchantTaxId) }
            if (productDescription != nil) { try container.encode(productDescription, forKey: .productDescription) }
            if (paymentRef != nil) { try container.encode(paymentRef, forKey: .paymentRef) }
        }
    }

}