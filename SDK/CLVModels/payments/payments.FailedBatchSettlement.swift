/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Payments {

    public class FailedBatchSettlement: Codable {

        public var merchantName: String?
        public var mid: String?
        public var cid: String?
        public var batchId: String?
        public var txCount: Int32?
        public var state: CLVModels.Payments.BatchState?
        public var batchType: CLVModels.Payments.BatchType?
        public var createdTime: Date?
        public var retries: Int32?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case merchantName
            case mid
            case cid
            case batchId
            case txCount
            case state
            case batchType
            case createdTime
            case retries
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.merchantName = try rootContainer.decodeIfPresent(String.self, forKey: .merchantName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.mid = try rootContainer.decodeIfPresent(String.self, forKey: .mid)
            } catch {
                decodeError.append(error)
            }
            do {
                self.cid = try rootContainer.decodeIfPresent(String.self, forKey: .cid)
            } catch {
                decodeError.append(error)
            }
            do {
                self.batchId = try rootContainer.decodeIfPresent(String.self, forKey: .batchId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.txCount = try rootContainer.decodeIfPresent(Int32.self, forKey: .txCount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.state = try rootContainer.decodeIfPresent(CLVModels.Payments.BatchState.self, forKey: .state)
            } catch {
                decodeError.append(error)
            }
            do {
                self.batchType = try rootContainer.decodeIfPresent(CLVModels.Payments.BatchType.self, forKey: .batchType)
            } catch {
                decodeError.append(error)
            }
            do {
                self.createdTime = try rootContainer.decodeIfPresent(Date.self, forKey: .createdTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.retries = try rootContainer.decodeIfPresent(Int32.self, forKey: .retries)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (merchantName != nil) { try container.encode(merchantName, forKey: .merchantName) }
            if (mid != nil) { try container.encode(mid, forKey: .mid) }
            if (cid != nil) { try container.encode(cid, forKey: .cid) }
            if (batchId != nil) { try container.encode(batchId, forKey: .batchId) }
            if (txCount != nil) { try container.encode(txCount, forKey: .txCount) }
            if (state != nil) { try container.encode(state, forKey: .state) }
            if (batchType != nil) { try container.encode(batchType, forKey: .batchType) }
            if (createdTime != nil) { try container.encode(createdTime, forKey: .createdTime) }
            if (retries != nil) { try container.encode(retries, forKey: .retries) }
        }
    }

}