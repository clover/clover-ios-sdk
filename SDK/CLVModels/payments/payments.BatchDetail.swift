/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Payments {

    public class BatchDetail: Codable {

        /// Terminal ID.
        public var terminalId: String?
        public var batchTotals: CLVModels.Payments.BatchTotalStats?
        public var serverTotals: [CLVModels.Payments.ServerTotalStats]?
        public var cardTotals: [CLVModels.Payments.BatchCardTotal]?
        public var deviceTotals: [CLVModels.Payments.DeviceTotalStats]?
        public var endpointTotals: [CLVModels.Payments.EndpointTotalStats]?
        /// Number of open tips.
        public var openTips: Int64?
        /// Number of open tabs.
        public var openTabs: Int64?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case terminalId
            case batchTotals
            case serverTotals
            case cardTotals
            case deviceTotals
            case endpointTotals
            case openTips
            case openTabs
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.terminalId = try rootContainer.decodeIfPresent(String.self, forKey: .terminalId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.batchTotals = try rootContainer.decodeIfPresent(CLVModels.Payments.BatchTotalStats.self, forKey: .batchTotals)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.serverTotals)) {
                do {
                    let serverTotalsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .serverTotals)
                    self.serverTotals = try serverTotalsContainer.decodeIfPresent([CLVModels.Payments.ServerTotalStats].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            if (rootContainer.contains(.cardTotals)) {
                do {
                    let cardTotalsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .cardTotals)
                    self.cardTotals = try cardTotalsContainer.decodeIfPresent([CLVModels.Payments.BatchCardTotal].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            if (rootContainer.contains(.deviceTotals)) {
                do {
                    let deviceTotalsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .deviceTotals)
                    self.deviceTotals = try deviceTotalsContainer.decodeIfPresent([CLVModels.Payments.DeviceTotalStats].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            if (rootContainer.contains(.endpointTotals)) {
                do {
                    let endpointTotalsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .endpointTotals)
                    self.endpointTotals = try endpointTotalsContainer.decodeIfPresent([CLVModels.Payments.EndpointTotalStats].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            do {
                self.openTips = try rootContainer.decodeIfPresent(Int64.self, forKey: .openTips)
            } catch {
                decodeError.append(error)
            }
            do {
                self.openTabs = try rootContainer.decodeIfPresent(Int64.self, forKey: .openTabs)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (terminalId != nil) { try container.encode(terminalId, forKey: .terminalId) }
            if (batchTotals != nil) { try container.encode(batchTotals, forKey: .batchTotals) }
            if (serverTotals != nil) { try container.encode(serverTotals, forKey: .serverTotals) }
            if (cardTotals != nil) { try container.encode(cardTotals, forKey: .cardTotals) }
            if (deviceTotals != nil) { try container.encode(deviceTotals, forKey: .deviceTotals) }
            if (endpointTotals != nil) { try container.encode(endpointTotals, forKey: .endpointTotals) }
            if (openTips != nil) { try container.encode(openTips, forKey: .openTips) }
            if (openTabs != nil) { try container.encode(openTabs, forKey: .openTabs) }
        }
    }

}