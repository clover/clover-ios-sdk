/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Payments {

    public class BatchCardTotal: Codable {

        public var cardType: CLVModels.Payments.CardType?
        /// In the case of CardType.OTHER, an optional label might be provided
        public var cardTypeLabel: String?
        /// Number of installments for this CardTotal
        public var installments: Int64?
        /// Total count of types
        public var count: Int64?
        /// Total amount for type
        public var total: Int64?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case cardType
            case cardTypeLabel
            case installments
            case count
            case total
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.cardType = try rootContainer.decodeIfPresent(CLVModels.Payments.CardType.self, forKey: .cardType)
            } catch {
                decodeError.append(error)
            }
            do {
                self.cardTypeLabel = try rootContainer.decodeIfPresent(String.self, forKey: .cardTypeLabel)
            } catch {
                decodeError.append(error)
            }
            do {
                self.installments = try rootContainer.decodeIfPresent(Int64.self, forKey: .installments)
            } catch {
                decodeError.append(error)
            }
            do {
                self.count = try rootContainer.decodeIfPresent(Int64.self, forKey: .count)
            } catch {
                decodeError.append(error)
            }
            do {
                self.total = try rootContainer.decodeIfPresent(Int64.self, forKey: .total)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (cardType != nil) { try container.encode(cardType, forKey: .cardType) }
            if (cardTypeLabel != nil) { try container.encode(cardTypeLabel, forKey: .cardTypeLabel) }
            if (installments != nil) { try container.encode(installments, forKey: .installments) }
            if (count != nil) { try container.encode(count, forKey: .count) }
            if (total != nil) { try container.encode(total, forKey: .total) }
        }
    }

}