/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

extension CLVModels.Payments {

    public enum SelectedService: Codable {
        case NONE
        case PAYMENT
        case REFUND
        case CANCELLATION
        case PRE_AUTH
        case UPDATE_PRE_AUTH
        case PAYMENT_COMPLETION
        case CASH_ADVANCE
        case DEFERRED_PAYMENT
        case DEFERRED_PAYMENT_COMPLETION
        case VOICE_AUTHORISATION
        case CARDHOLDER_DETECTION
        case TOKEN_REQUEST
        case VERIFICATION
        case PARSE_UNKNOWN(String)

        enum Key: CodingKey {
            case rawValue
        }

        public init(rawValue:String) {
            switch rawValue {
                case  "NONE":
                    self = .NONE
                case  "PAYMENT":
                    self = .PAYMENT
                case  "REFUND":
                    self = .REFUND
                case  "CANCELLATION":
                    self = .CANCELLATION
                case  "PRE_AUTH":
                    self = .PRE_AUTH
                case  "UPDATE_PRE_AUTH":
                    self = .UPDATE_PRE_AUTH
                case  "PAYMENT_COMPLETION":
                    self = .PAYMENT_COMPLETION
                case  "CASH_ADVANCE":
                    self = .CASH_ADVANCE
                case  "DEFERRED_PAYMENT":
                    self = .DEFERRED_PAYMENT
                case  "DEFERRED_PAYMENT_COMPLETION":
                    self = .DEFERRED_PAYMENT_COMPLETION
                case  "VOICE_AUTHORISATION":
                    self = .VOICE_AUTHORISATION
                case  "CARDHOLDER_DETECTION":
                    self = .CARDHOLDER_DETECTION
                case  "TOKEN_REQUEST":
                    self = .TOKEN_REQUEST
                case  "VERIFICATION":
                    self = .VERIFICATION
                default:
                    self = .PARSE_UNKNOWN(rawValue)
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self.init(rawValue: rawValue)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(toString)
        }

        public var toString: String {
            switch self {
                case  .NONE:
                    return "NONE"
                case  .PAYMENT:
                    return "PAYMENT"
                case  .REFUND:
                    return "REFUND"
                case  .CANCELLATION:
                    return "CANCELLATION"
                case  .PRE_AUTH:
                    return "PRE_AUTH"
                case  .UPDATE_PRE_AUTH:
                    return "UPDATE_PRE_AUTH"
                case  .PAYMENT_COMPLETION:
                    return "PAYMENT_COMPLETION"
                case  .CASH_ADVANCE:
                    return "CASH_ADVANCE"
                case  .DEFERRED_PAYMENT:
                    return "DEFERRED_PAYMENT"
                case  .DEFERRED_PAYMENT_COMPLETION:
                    return "DEFERRED_PAYMENT_COMPLETION"
                case  .VOICE_AUTHORISATION:
                    return "VOICE_AUTHORISATION"
                case  .CARDHOLDER_DETECTION:
                    return "CARDHOLDER_DETECTION"
                case  .TOKEN_REQUEST:
                    return "TOKEN_REQUEST"
                case  .VERIFICATION:
                    return "VERIFICATION"
                case .PARSE_UNKNOWN(let rawValue):
                    return rawValue            
            }
        }
    }
}