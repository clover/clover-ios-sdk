/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Payments {

    public class GiftCard: Codable {

        /// Track 2 Card Data
        public var track2: String?
        /// Embossed Card Number
        public var cardNumber: String?
        /// Was Account Number Manually Entered
        public var isManuallyEntered: Bool?
        public var deviceSerial: String?
        /// Is this a virtual gift card
        public var virtual: Bool?
        /// Virtual Promo Code
        public var promoCode: String?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case track2
            case cardNumber
            case isManuallyEntered
            case deviceSerial
            case virtual
            case promoCode
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.track2 = try rootContainer.decodeIfPresent(String.self, forKey: .track2)
            } catch {
                decodeError.append(error)
            }
            do {
                self.cardNumber = try rootContainer.decodeIfPresent(String.self, forKey: .cardNumber)
            } catch {
                decodeError.append(error)
            }
            do {
                self.isManuallyEntered = try rootContainer.decodeIfPresent(Bool.self, forKey: .isManuallyEntered)
            } catch {
                decodeError.append(error)
            }
            do {
                self.deviceSerial = try rootContainer.decodeIfPresent(String.self, forKey: .deviceSerial)
            } catch {
                decodeError.append(error)
            }
            do {
                self.virtual = try rootContainer.decodeIfPresent(Bool.self, forKey: .virtual)
            } catch {
                decodeError.append(error)
            }
            do {
                self.promoCode = try rootContainer.decodeIfPresent(String.self, forKey: .promoCode)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (track2 != nil) { try container.encode(track2, forKey: .track2) }
            if (cardNumber != nil) { try container.encode(cardNumber, forKey: .cardNumber) }
            if (isManuallyEntered != nil) { try container.encode(isManuallyEntered, forKey: .isManuallyEntered) }
            if (deviceSerial != nil) { try container.encode(deviceSerial, forKey: .deviceSerial) }
            if (virtual != nil) { try container.encode(virtual, forKey: .virtual) }
            if (promoCode != nil) { try container.encode(promoCode, forKey: .promoCode) }
        }
    }

}