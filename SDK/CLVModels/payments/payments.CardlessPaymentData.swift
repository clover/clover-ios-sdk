/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
    Data for a payment that is processed using a QR code or barcode.
*/

import Foundation

extension CLVModels.Payments {

    public class CardlessPaymentData: Codable {

        /// Payment network
        public var paymentNetwork: CLVModels.Payments.CardlessPaymentNetwork?
        /// Payment method
        public var paymentType: CLVModels.Payments.CardlessPaymentDataType?
        /// QR code or barcode data
        public var paymentData: String?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case paymentNetwork
            case paymentType
            case paymentData
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.paymentNetwork = try rootContainer.decodeIfPresent(CLVModels.Payments.CardlessPaymentNetwork.self, forKey: .paymentNetwork)
            } catch {
                decodeError.append(error)
            }
            do {
                self.paymentType = try rootContainer.decodeIfPresent(CLVModels.Payments.CardlessPaymentDataType.self, forKey: .paymentType)
            } catch {
                decodeError.append(error)
            }
            do {
                self.paymentData = try rootContainer.decodeIfPresent(String.self, forKey: .paymentData)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (paymentNetwork != nil) { try container.encode(paymentNetwork, forKey: .paymentNetwork) }
            if (paymentType != nil) { try container.encode(paymentType, forKey: .paymentType) }
            if (paymentData != nil) { try container.encode(paymentData, forKey: .paymentData) }
        }
    }

}