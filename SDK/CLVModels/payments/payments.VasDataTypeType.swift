/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

extension CLVModels.Payments {

    public enum VasDataTypeType: Codable {
        case ALL
        case LOYALTY
        case OFFER
        case GIFT_CARD
        case PRIVATE_LABEL_CARD
        case CUSTOMER
        case VAS_DATA
        case PARSE_UNKNOWN(String)

        enum Key: CodingKey {
            case rawValue
        }

        public init(rawValue:String) {
            switch rawValue {
                case  "ALL":
                    self = .ALL
                case  "LOYALTY":
                    self = .LOYALTY
                case  "OFFER":
                    self = .OFFER
                case  "GIFT_CARD":
                    self = .GIFT_CARD
                case  "PRIVATE_LABEL_CARD":
                    self = .PRIVATE_LABEL_CARD
                case  "CUSTOMER":
                    self = .CUSTOMER
                case  "VAS_DATA":
                    self = .VAS_DATA
                default:
                    self = .PARSE_UNKNOWN(rawValue)
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self.init(rawValue: rawValue)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(toString)
        }

        public var toString: String {
            switch self {
                case  .ALL:
                    return "ALL"
                case  .LOYALTY:
                    return "LOYALTY"
                case  .OFFER:
                    return "OFFER"
                case  .GIFT_CARD:
                    return "GIFT_CARD"
                case  .PRIVATE_LABEL_CARD:
                    return "PRIVATE_LABEL_CARD"
                case  .CUSTOMER:
                    return "CUSTOMER"
                case  .VAS_DATA:
                    return "VAS_DATA"
                case .PARSE_UNKNOWN(let rawValue):
                    return rawValue            
            }
        }
    }
}