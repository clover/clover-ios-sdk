/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Payments {

    public class PaymentResponseFraudSetting: Codable {

        /// Unique identifier
        public var id: String?
        public var cardType: CLVModels.Payments.CardType?
        public var responseCode: String?
        /// Type of response code: avs or cvv
        public var responseCodeType: CLVModels.Payments.FraudResponseCodeType?
        /// Type of fraud response action: whether to void transaction, prompt user whether he/she wants to void it or ignore - do nothing
        public var action: CLVModels.Payments.FraudResponseAction?
        public var settingName: String?
        public var createdTime: Date?
        public var modifiedTime: Date?
        public var deletedTime: Date?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case cardType
            case responseCode
            case responseCodeType
            case action
            case settingName
            case createdTime
            case modifiedTime
            case deletedTime
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.cardType = try rootContainer.decodeIfPresent(CLVModels.Payments.CardType.self, forKey: .cardType)
            } catch {
                decodeError.append(error)
            }
            do {
                self.responseCode = try rootContainer.decodeIfPresent(String.self, forKey: .responseCode)
            } catch {
                decodeError.append(error)
            }
            do {
                self.responseCodeType = try rootContainer.decodeIfPresent(CLVModels.Payments.FraudResponseCodeType.self, forKey: .responseCodeType)
            } catch {
                decodeError.append(error)
            }
            do {
                self.action = try rootContainer.decodeIfPresent(CLVModels.Payments.FraudResponseAction.self, forKey: .action)
            } catch {
                decodeError.append(error)
            }
            do {
                self.settingName = try rootContainer.decodeIfPresent(String.self, forKey: .settingName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.createdTime = try rootContainer.decodeIfPresent(Date.self, forKey: .createdTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.modifiedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .modifiedTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.deletedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .deletedTime)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (cardType != nil) { try container.encode(cardType, forKey: .cardType) }
            if (responseCode != nil) { try container.encode(responseCode, forKey: .responseCode) }
            if (responseCodeType != nil) { try container.encode(responseCodeType, forKey: .responseCodeType) }
            if (action != nil) { try container.encode(action, forKey: .action) }
            if (settingName != nil) { try container.encode(settingName, forKey: .settingName) }
            if (createdTime != nil) { try container.encode(createdTime, forKey: .createdTime) }
            if (modifiedTime != nil) { try container.encode(modifiedTime, forKey: .modifiedTime) }
            if (deletedTime != nil) { try container.encode(deletedTime, forKey: .deletedTime) }
        }
    }

}