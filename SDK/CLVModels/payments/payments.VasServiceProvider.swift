/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Payments {

    public class VasServiceProvider: Codable {

        /// Unique package name identifier of provider
        public var providerPackage: String?
        public var protocolId: CLVModels.Payments.VasProtocol?
        /// Service types supported by this provider.
        public var supportedServices: [CLVModels.Payments.VasDataType]?
        /// protocol specific configuration
        public var protocolConfig: [String:String]?
        /// Populated for push use cases (e.g. send signup URL).
        public var pushUrl: String?
        /// Optionally populated for vas push use cases (e.g. send signup URL).
        public var pushTitle: String?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case providerPackage
            case protocolId
            case supportedServices
            case protocolConfig
            case pushUrl
            case pushTitle
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.providerPackage = try rootContainer.decodeIfPresent(String.self, forKey: .providerPackage)
            } catch {
                decodeError.append(error)
            }
            do {
                self.protocolId = try rootContainer.decodeIfPresent(CLVModels.Payments.VasProtocol.self, forKey: .protocolId)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.supportedServices)) {
                do {
                    let supportedServicesContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .supportedServices)
                    self.supportedServices = try supportedServicesContainer.decodeIfPresent([CLVModels.Payments.VasDataType].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            do {
                self.protocolConfig = try rootContainer.decodeIfPresent([String:String].self, forKey: .protocolConfig)
            } catch {
                decodeError.append(error)
            }
            do {
                self.pushUrl = try rootContainer.decodeIfPresent(String.self, forKey: .pushUrl)
            } catch {
                decodeError.append(error)
            }
            do {
                self.pushTitle = try rootContainer.decodeIfPresent(String.self, forKey: .pushTitle)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (providerPackage != nil) { try container.encode(providerPackage, forKey: .providerPackage) }
            if (protocolId != nil) { try container.encode(protocolId, forKey: .protocolId) }
            if (supportedServices != nil) { try container.encode(supportedServices, forKey: .supportedServices) }
            if (protocolConfig != nil) { try container.encode(protocolConfig, forKey: .protocolConfig) }
            if (pushUrl != nil) { try container.encode(pushUrl, forKey: .pushUrl) }
            if (pushTitle != nil) { try container.encode(pushTitle, forKey: .pushTitle) }
        }
    }

}