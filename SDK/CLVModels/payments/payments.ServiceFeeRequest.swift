/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Payments {

    public class ServiceFeeRequest: Codable {

        /// amount (cents) of the service fee
        public var amount: Int64?
        /// Unique identifier of the order with which this payment is associated (will be auto-populated by client connector)
        public var orderId: String?
        /// Unique identifier of the primary payment the serivce fee is associated with
        public var sourcePaymentId: String?
        /// Vaulted card to use to bill the service fee
        public var vaultedCard: CLVModels.Payments.VaultedCard?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case amount
            case orderId
            case sourcePaymentId
            case vaultedCard
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.amount = try rootContainer.decodeIfPresent(Int64.self, forKey: .amount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.orderId = try rootContainer.decodeIfPresent(String.self, forKey: .orderId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.sourcePaymentId = try rootContainer.decodeIfPresent(String.self, forKey: .sourcePaymentId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.vaultedCard = try rootContainer.decodeIfPresent(CLVModels.Payments.VaultedCard.self, forKey: .vaultedCard)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (amount != nil) { try container.encode(amount, forKey: .amount) }
            if (orderId != nil) { try container.encode(orderId, forKey: .orderId) }
            if (sourcePaymentId != nil) { try container.encode(sourcePaymentId, forKey: .sourcePaymentId) }
            if (vaultedCard != nil) { try container.encode(vaultedCard, forKey: .vaultedCard) }
        }
    }

}