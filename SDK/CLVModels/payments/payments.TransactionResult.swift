/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

extension CLVModels.Payments {

    public enum TransactionResult: Codable {
        case APPROVED
        case DECLINED
        case ABORTED
        case VOICE_AUTHORISATION
        case PAYMENT_PART_ONLY
        case PARTIALLY_APPROVED
        case NONE
        case PARSE_UNKNOWN(String)

        enum Key: CodingKey {
            case rawValue
        }

        public init(rawValue:String) {
            switch rawValue {
                case  "APPROVED":
                    self = .APPROVED
                case  "DECLINED":
                    self = .DECLINED
                case  "ABORTED":
                    self = .ABORTED
                case  "VOICE_AUTHORISATION":
                    self = .VOICE_AUTHORISATION
                case  "PAYMENT_PART_ONLY":
                    self = .PAYMENT_PART_ONLY
                case  "PARTIALLY_APPROVED":
                    self = .PARTIALLY_APPROVED
                case  "NONE":
                    self = .NONE
                default:
                    self = .PARSE_UNKNOWN(rawValue)
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self.init(rawValue: rawValue)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(toString)
        }

        public var toString: String {
            switch self {
                case  .APPROVED:
                    return "APPROVED"
                case  .DECLINED:
                    return "DECLINED"
                case  .ABORTED:
                    return "ABORTED"
                case  .VOICE_AUTHORISATION:
                    return "VOICE_AUTHORISATION"
                case  .PAYMENT_PART_ONLY:
                    return "PAYMENT_PART_ONLY"
                case  .PARTIALLY_APPROVED:
                    return "PARTIALLY_APPROVED"
                case  .NONE:
                    return "NONE"
                case .PARSE_UNKNOWN(let rawValue):
                    return rawValue            
            }
        }
    }
}