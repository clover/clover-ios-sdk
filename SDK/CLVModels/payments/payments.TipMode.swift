/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

extension CLVModels.Payments {

    public enum TipMode: Codable {
        case TIP_PROVIDED
        case ON_SCREEN_BEFORE_PAYMENT
        case ON_SCREEN_AFTER_PAYMENT
        case ON_PAPER
        case NO_TIP
        case PARSE_UNKNOWN(String)

        enum Key: CodingKey {
            case rawValue
        }

        public init(rawValue:String) {
            switch rawValue {
                case  "TIP_PROVIDED":
                    self = .TIP_PROVIDED
                case  "ON_SCREEN_BEFORE_PAYMENT":
                    self = .ON_SCREEN_BEFORE_PAYMENT
                case  "ON_SCREEN_AFTER_PAYMENT":
                    self = .ON_SCREEN_AFTER_PAYMENT
                case  "ON_PAPER":
                    self = .ON_PAPER
                case  "NO_TIP":
                    self = .NO_TIP
                default:
                    self = .PARSE_UNKNOWN(rawValue)
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self.init(rawValue: rawValue)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(toString)
        }

        public var toString: String {
            switch self {
                case  .TIP_PROVIDED:
                    return "TIP_PROVIDED"
                case  .ON_SCREEN_BEFORE_PAYMENT:
                    return "ON_SCREEN_BEFORE_PAYMENT"
                case  .ON_SCREEN_AFTER_PAYMENT:
                    return "ON_SCREEN_AFTER_PAYMENT"
                case  .ON_PAPER:
                    return "ON_PAPER"
                case  .NO_TIP:
                    return "NO_TIP"
                case .PARSE_UNKNOWN(let rawValue):
                    return rawValue            
            }
        }
    }
}