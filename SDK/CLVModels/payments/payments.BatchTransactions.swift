/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Payments {

    public class BatchTransactions: Codable {

        /// List of payments in the batch
        public var paymentIds: [String]?
        /// List of refunds in the batch
        public var refundIds: [String]?
        /// List of credits in the batch
        public var creditIds: [String]?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case paymentIds
            case refundIds
            case creditIds
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            if (rootContainer.contains(.paymentIds)) {
                do {
                    let paymentIdsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .paymentIds)
                    self.paymentIds = try paymentIdsContainer.decodeIfPresent([String].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            if (rootContainer.contains(.refundIds)) {
                do {
                    let refundIdsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .refundIds)
                    self.refundIds = try refundIdsContainer.decodeIfPresent([String].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            if (rootContainer.contains(.creditIds)) {
                do {
                    let creditIdsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .creditIds)
                    self.creditIds = try creditIdsContainer.decodeIfPresent([String].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (paymentIds != nil) { try container.encode(paymentIds, forKey: .paymentIds) }
            if (refundIds != nil) { try container.encode(refundIds, forKey: .refundIds) }
            if (creditIds != nil) { try container.encode(creditIds, forKey: .creditIds) }
        }
    }

}