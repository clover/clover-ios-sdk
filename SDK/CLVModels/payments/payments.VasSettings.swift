/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Payments {

    public class VasSettings: Codable {

        /// Populated per tx.  If not passed PAY_ONLY is the default behavior
        public var vasMode: CLVModels.Payments.VasMode?
        /// Vas service types of interest for this txn
        public var serviceTypes: [CLVModels.Payments.VasDataType]?
        /// Additional context relevant extras such as EXTRA_ORDER_ID
        public var extras: [String:String]?
        /// Indicates if vas is push url only, no push, or push in addition to GET
        public var pushMode: CLVModels.Payments.VasPushMode?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case vasMode
            case serviceTypes
            case extras
            case pushMode
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.vasMode = try rootContainer.decodeIfPresent(CLVModels.Payments.VasMode.self, forKey: .vasMode)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.serviceTypes)) {
                do {
                    let serviceTypesContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .serviceTypes)
                    self.serviceTypes = try serviceTypesContainer.decodeIfPresent([CLVModels.Payments.VasDataType].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            do {
                self.extras = try rootContainer.decodeIfPresent([String:String].self, forKey: .extras)
            } catch {
                decodeError.append(error)
            }
            do {
                self.pushMode = try rootContainer.decodeIfPresent(CLVModels.Payments.VasPushMode.self, forKey: .pushMode)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (vasMode != nil) { try container.encode(vasMode, forKey: .vasMode) }
            if (serviceTypes != nil) { try container.encode(serviceTypes, forKey: .serviceTypes) }
            if (extras != nil) { try container.encode(extras, forKey: .extras) }
            if (pushMode != nil) { try container.encode(pushMode, forKey: .pushMode) }
        }
    }

}