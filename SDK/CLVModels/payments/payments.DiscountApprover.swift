/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
    The information related to a discount and who approved it for a specific line item on an order or entire order. Used for reporting. 
*/

import Foundation

extension CLVModels.Payments {

    public class DiscountApprover: Codable {

        /// The discount ID and UUID
        public var discount: CLVModels.Base.Reference?
        public var merchant: CLVModels.Base.Reference?
        /// Employee who approved the discount
        public var approvedBy: CLVModels.Base.Reference?
        /// The order with which the discount is associated.
        public var order: CLVModels.Base.Reference?
        /// The lineItem with which the discount is associated
        public var lineItem: CLVModels.Variant?
        public var createdTime: Date?
        /// Which environment was this recorded in
        public var environment: CLVModels.Variant?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case discount
            case merchant
            case approvedBy
            case order
            case lineItem
            case createdTime
            case environment
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.discount = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .discount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.merchant = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .merchant)
            } catch {
                decodeError.append(error)
            }
            do {
                self.approvedBy = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .approvedBy)
            } catch {
                decodeError.append(error)
            }
            do {
                self.order = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .order)
            } catch {
                decodeError.append(error)
            }
            do {
                self.lineItem = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .lineItem)
            } catch {
                decodeError.append(error)
            }
            do {
                self.createdTime = try rootContainer.decodeIfPresent(Date.self, forKey: .createdTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.environment = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .environment)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (discount != nil) { try container.encode(discount, forKey: .discount) }
            if (merchant != nil) { try container.encode(merchant, forKey: .merchant) }
            if (approvedBy != nil) { try container.encode(approvedBy, forKey: .approvedBy) }
            if (order != nil) { try container.encode(order, forKey: .order) }
            if (lineItem != nil) { try container.encode(lineItem, forKey: .lineItem) }
            if (createdTime != nil) { try container.encode(createdTime, forKey: .createdTime) }
            if (environment != nil) { try container.encode(environment, forKey: .environment) }
        }
    }

}