/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

extension CLVModels.Payments {

    public enum CvmResult: Codable {
        case NO_CVM_REQUIRED
        case SIGNATURE
        case SIGNATURE_VERIFIED
        case SIGNATURE_ON_PAPER
        case SIGNATURE_REJECTED
        case PIN
        case ONLINE_PIN
        case SIGNATURE_AND_PIN
        case CVM_FAILED
        case DEVICE
        case PARSE_UNKNOWN(String)

        enum Key: CodingKey {
            case rawValue
        }

        public init(rawValue:String) {
            switch rawValue {
                case  "NO_CVM_REQUIRED":
                    self = .NO_CVM_REQUIRED
                case  "SIGNATURE":
                    self = .SIGNATURE
                case  "SIGNATURE_VERIFIED":
                    self = .SIGNATURE_VERIFIED
                case  "SIGNATURE_ON_PAPER":
                    self = .SIGNATURE_ON_PAPER
                case  "SIGNATURE_REJECTED":
                    self = .SIGNATURE_REJECTED
                case  "PIN":
                    self = .PIN
                case  "ONLINE_PIN":
                    self = .ONLINE_PIN
                case  "SIGNATURE_AND_PIN":
                    self = .SIGNATURE_AND_PIN
                case  "CVM_FAILED":
                    self = .CVM_FAILED
                case  "DEVICE":
                    self = .DEVICE
                default:
                    self = .PARSE_UNKNOWN(rawValue)
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self.init(rawValue: rawValue)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(toString)
        }

        public var toString: String {
            switch self {
                case  .NO_CVM_REQUIRED:
                    return "NO_CVM_REQUIRED"
                case  .SIGNATURE:
                    return "SIGNATURE"
                case  .SIGNATURE_VERIFIED:
                    return "SIGNATURE_VERIFIED"
                case  .SIGNATURE_ON_PAPER:
                    return "SIGNATURE_ON_PAPER"
                case  .SIGNATURE_REJECTED:
                    return "SIGNATURE_REJECTED"
                case  .PIN:
                    return "PIN"
                case  .ONLINE_PIN:
                    return "ONLINE_PIN"
                case  .SIGNATURE_AND_PIN:
                    return "SIGNATURE_AND_PIN"
                case  .CVM_FAILED:
                    return "CVM_FAILED"
                case  .DEVICE:
                    return "DEVICE"
                case .PARSE_UNKNOWN(let rawValue):
                    return rawValue            
            }
        }
    }
}