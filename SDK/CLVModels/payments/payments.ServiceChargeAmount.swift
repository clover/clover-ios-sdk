/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Payments {

    public class ServiceChargeAmount: Codable {

        public var id: String?
        public var name: String?
        public var amount: Int64?
        /// The payment with which the payment tax rate is associated
        public var paymentRef: CLVModels.Base.Reference?
        /// The refund with which the refund tax rate is associated
        public var refundRef: CLVModels.Base.Reference?
        /// The service_charge.percentage_decimal of the service_charge where service_charge.id=payment_service_charge.service_charge_id. 1% = 10000L
        public var percentage: Int64?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case name
            case amount
            case paymentRef
            case refundRef
            case percentage
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.name = try rootContainer.decodeIfPresent(String.self, forKey: .name)
            } catch {
                decodeError.append(error)
            }
            do {
                self.amount = try rootContainer.decodeIfPresent(Int64.self, forKey: .amount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.paymentRef = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .paymentRef)
            } catch {
                decodeError.append(error)
            }
            do {
                self.refundRef = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .refundRef)
            } catch {
                decodeError.append(error)
            }
            do {
                self.percentage = try rootContainer.decodeIfPresent(Int64.self, forKey: .percentage)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (name != nil) { try container.encode(name, forKey: .name) }
            if (amount != nil) { try container.encode(amount, forKey: .amount) }
            if (paymentRef != nil) { try container.encode(paymentRef, forKey: .paymentRef) }
            if (refundRef != nil) { try container.encode(refundRef, forKey: .refundRef) }
            if (percentage != nil) { try container.encode(percentage, forKey: .percentage) }
        }
    }

}