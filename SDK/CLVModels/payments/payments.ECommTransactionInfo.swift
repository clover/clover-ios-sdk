/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Payments {

    public class ECommTransactionInfo: Codable {

        public var ecommIndicator: CLVModels.Ecomm.EcommerceIndicator?
        /// Details about the stored credentials.
        public var storedCredentials: CLVModels.Ecomm.StoredCredentials?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case ecommIndicator
            case storedCredentials
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.ecommIndicator = try rootContainer.decodeIfPresent(CLVModels.Ecomm.EcommerceIndicator.self, forKey: .ecommIndicator)
            } catch {
                decodeError.append(error)
            }
            do {
                self.storedCredentials = try rootContainer.decodeIfPresent(CLVModels.Ecomm.StoredCredentials.self, forKey: .storedCredentials)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (ecommIndicator != nil) { try container.encode(ecommIndicator, forKey: .ecommIndicator) }
            if (storedCredentials != nil) { try container.encode(storedCredentials, forKey: .storedCredentials) }
        }
    }

}