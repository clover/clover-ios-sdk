/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Payments {

    public class EndpointTotalStats: Codable {

        /// Indicates if the closeout for terminalId/endpointName/batchNumber was successfully performed or not
        public var success: Bool?
        /// Name for the given endpoint
        public var endpointName: String?
        /// The batchNumber for this endpoint
        public var batchNumber: String?
        /// The terminal id for this endpoint & batch details
        public var terminalId: String?
        /// Total count of endpoint transactions
        public var count: Int64?
        /// Total amount for transactions
        public var total: Int64?
        public var cardTotals: [CLVModels.Payments.BatchCardTotal]?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case success
            case endpointName
            case batchNumber
            case terminalId
            case count
            case total
            case cardTotals
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.success = try rootContainer.decodeIfPresent(Bool.self, forKey: .success)
            } catch {
                decodeError.append(error)
            }
            do {
                self.endpointName = try rootContainer.decodeIfPresent(String.self, forKey: .endpointName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.batchNumber = try rootContainer.decodeIfPresent(String.self, forKey: .batchNumber)
            } catch {
                decodeError.append(error)
            }
            do {
                self.terminalId = try rootContainer.decodeIfPresent(String.self, forKey: .terminalId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.count = try rootContainer.decodeIfPresent(Int64.self, forKey: .count)
            } catch {
                decodeError.append(error)
            }
            do {
                self.total = try rootContainer.decodeIfPresent(Int64.self, forKey: .total)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.cardTotals)) {
                do {
                    let cardTotalsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .cardTotals)
                    self.cardTotals = try cardTotalsContainer.decodeIfPresent([CLVModels.Payments.BatchCardTotal].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (success != nil) { try container.encode(success, forKey: .success) }
            if (endpointName != nil) { try container.encode(endpointName, forKey: .endpointName) }
            if (batchNumber != nil) { try container.encode(batchNumber, forKey: .batchNumber) }
            if (terminalId != nil) { try container.encode(terminalId, forKey: .terminalId) }
            if (count != nil) { try container.encode(count, forKey: .count) }
            if (total != nil) { try container.encode(total, forKey: .total) }
            if (cardTotals != nil) { try container.encode(cardTotals, forKey: .cardTotals) }
        }
    }

}