/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

extension CLVModels.Payments {

    public enum AVSResult: Codable {
        case SUCCESS
        case ZIP_CODE_MATCH
        case ZIP_CODE_MATCH_ADDRESS_NOT_CHECKED
        case ADDRESS_MATCH
        case ADDRESS_MATCH_ZIP_NOT_CHECKED
        case NEITHER_MATCH
        case SERVICE_FAILURE
        case SERVICE_UNAVAILABLE
        case NOT_CHECKED
        case ZIP_CODE_NOT_MATCHED_ADDRESS_NOT_CHECKED
        case ADDRESS_NOT_MATCHED_ZIP_CODE_NOT_CHECKED
        case PARSE_UNKNOWN(String)

        enum Key: CodingKey {
            case rawValue
        }

        public init(rawValue:String) {
            switch rawValue {
                case  "SUCCESS":
                    self = .SUCCESS
                case  "ZIP_CODE_MATCH":
                    self = .ZIP_CODE_MATCH
                case  "ZIP_CODE_MATCH_ADDRESS_NOT_CHECKED":
                    self = .ZIP_CODE_MATCH_ADDRESS_NOT_CHECKED
                case  "ADDRESS_MATCH":
                    self = .ADDRESS_MATCH
                case  "ADDRESS_MATCH_ZIP_NOT_CHECKED":
                    self = .ADDRESS_MATCH_ZIP_NOT_CHECKED
                case  "NEITHER_MATCH":
                    self = .NEITHER_MATCH
                case  "SERVICE_FAILURE":
                    self = .SERVICE_FAILURE
                case  "SERVICE_UNAVAILABLE":
                    self = .SERVICE_UNAVAILABLE
                case  "NOT_CHECKED":
                    self = .NOT_CHECKED
                case  "ZIP_CODE_NOT_MATCHED_ADDRESS_NOT_CHECKED":
                    self = .ZIP_CODE_NOT_MATCHED_ADDRESS_NOT_CHECKED
                case  "ADDRESS_NOT_MATCHED_ZIP_CODE_NOT_CHECKED":
                    self = .ADDRESS_NOT_MATCHED_ZIP_CODE_NOT_CHECKED
                default:
                    self = .PARSE_UNKNOWN(rawValue)
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self.init(rawValue: rawValue)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(toString)
        }

        public var toString: String {
            switch self {
                case  .SUCCESS:
                    return "SUCCESS"
                case  .ZIP_CODE_MATCH:
                    return "ZIP_CODE_MATCH"
                case  .ZIP_CODE_MATCH_ADDRESS_NOT_CHECKED:
                    return "ZIP_CODE_MATCH_ADDRESS_NOT_CHECKED"
                case  .ADDRESS_MATCH:
                    return "ADDRESS_MATCH"
                case  .ADDRESS_MATCH_ZIP_NOT_CHECKED:
                    return "ADDRESS_MATCH_ZIP_NOT_CHECKED"
                case  .NEITHER_MATCH:
                    return "NEITHER_MATCH"
                case  .SERVICE_FAILURE:
                    return "SERVICE_FAILURE"
                case  .SERVICE_UNAVAILABLE:
                    return "SERVICE_UNAVAILABLE"
                case  .NOT_CHECKED:
                    return "NOT_CHECKED"
                case  .ZIP_CODE_NOT_MATCHED_ADDRESS_NOT_CHECKED:
                    return "ZIP_CODE_NOT_MATCHED_ADDRESS_NOT_CHECKED"
                case  .ADDRESS_NOT_MATCHED_ZIP_CODE_NOT_CHECKED:
                    return "ADDRESS_NOT_MATCHED_ZIP_CODE_NOT_CHECKED"
                case .PARSE_UNKNOWN(let rawValue):
                    return rawValue            
            }
        }
    }
}