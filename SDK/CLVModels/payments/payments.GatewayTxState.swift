/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

extension CLVModels.Payments {

    public enum GatewayTxState: Codable {
        case INITIATED
        case INITIATED_ON_AUTH
        case ACKNOWLEDGED
        case CONNECT_FAILED
        case TIMEOUT
        case FAILED
        case REVERSE_INITIATED
        case REVERSE_INITIATED_ON_AUTH
        case REVERSED
        case REVERSAL_FAILED
        case EXTERNAL
        case PARSE_UNKNOWN(String)

        enum Key: CodingKey {
            case rawValue
        }

        public init(rawValue:String) {
            switch rawValue {
                case  "INITIATED":
                    self = .INITIATED
                case  "INITIATED_ON_AUTH":
                    self = .INITIATED_ON_AUTH
                case  "ACKNOWLEDGED":
                    self = .ACKNOWLEDGED
                case  "CONNECT_FAILED":
                    self = .CONNECT_FAILED
                case  "TIMEOUT":
                    self = .TIMEOUT
                case  "FAILED":
                    self = .FAILED
                case  "REVERSE_INITIATED":
                    self = .REVERSE_INITIATED
                case  "REVERSE_INITIATED_ON_AUTH":
                    self = .REVERSE_INITIATED_ON_AUTH
                case  "REVERSED":
                    self = .REVERSED
                case  "REVERSAL_FAILED":
                    self = .REVERSAL_FAILED
                case  "EXTERNAL":
                    self = .EXTERNAL
                default:
                    self = .PARSE_UNKNOWN(rawValue)
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self.init(rawValue: rawValue)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(toString)
        }

        public var toString: String {
            switch self {
                case  .INITIATED:
                    return "INITIATED"
                case  .INITIATED_ON_AUTH:
                    return "INITIATED_ON_AUTH"
                case  .ACKNOWLEDGED:
                    return "ACKNOWLEDGED"
                case  .CONNECT_FAILED:
                    return "CONNECT_FAILED"
                case  .TIMEOUT:
                    return "TIMEOUT"
                case  .FAILED:
                    return "FAILED"
                case  .REVERSE_INITIATED:
                    return "REVERSE_INITIATED"
                case  .REVERSE_INITIATED_ON_AUTH:
                    return "REVERSE_INITIATED_ON_AUTH"
                case  .REVERSED:
                    return "REVERSED"
                case  .REVERSAL_FAILED:
                    return "REVERSAL_FAILED"
                case  .EXTERNAL:
                    return "EXTERNAL"
                case .PARSE_UNKNOWN(let rawValue):
                    return rawValue            
            }
        }
    }
}