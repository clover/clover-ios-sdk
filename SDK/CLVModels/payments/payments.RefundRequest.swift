/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Payments {

    public class RefundRequest: Codable {

        public var refund: CLVModels.Variant?
        public var card: CLVModels.Variant?
        public var isAdjustment: Bool?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case refund
            case card
            case isAdjustment
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.refund = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .refund)
            } catch {
                decodeError.append(error)
            }
            do {
                self.card = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .card)
            } catch {
                decodeError.append(error)
            }
            do {
                self.isAdjustment = try rootContainer.decodeIfPresent(Bool.self, forKey: .isAdjustment)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (refund != nil) { try container.encode(refund, forKey: .refund) }
            if (card != nil) { try container.encode(card, forKey: .card) }
            if (isAdjustment != nil) { try container.encode(isAdjustment, forKey: .isAdjustment) }
        }
    }

}