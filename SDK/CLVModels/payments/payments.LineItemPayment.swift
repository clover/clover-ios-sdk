/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Payments {

    public class LineItemPayment: Codable {

        /// Unique identifier; TBD this is confusing because it's used as either line item id or payment id
        public var id: String?
        /// The line item with which the line item payment is associated
        public var lineItemRef: CLVModels.Base.Reference?
        /// The payment with which the line item payment is associated
        public var paymentRef: CLVModels.Base.Reference?
        /// Percent of this line item covered by this payment
        public var percentage: Int64?
        /// Bin this line item payment was for
        public var binName: CLVModels.Variant?
        /// Payment has been refunded
        public var refunded: Bool?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case lineItemRef
            case paymentRef
            case percentage
            case binName
            case refunded
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.lineItemRef = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .lineItemRef)
            } catch {
                decodeError.append(error)
            }
            do {
                self.paymentRef = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .paymentRef)
            } catch {
                decodeError.append(error)
            }
            do {
                self.percentage = try rootContainer.decodeIfPresent(Int64.self, forKey: .percentage)
            } catch {
                decodeError.append(error)
            }
            do {
                self.binName = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .binName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.refunded = try rootContainer.decodeIfPresent(Bool.self, forKey: .refunded)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (lineItemRef != nil) { try container.encode(lineItemRef, forKey: .lineItemRef) }
            if (paymentRef != nil) { try container.encode(paymentRef, forKey: .paymentRef) }
            if (percentage != nil) { try container.encode(percentage, forKey: .percentage) }
            if (binName != nil) { try container.encode(binName, forKey: .binName) }
            if (refunded != nil) { try container.encode(refunded, forKey: .refunded) }
        }
    }

}