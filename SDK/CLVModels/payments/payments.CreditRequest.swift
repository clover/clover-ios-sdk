/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Payments {

    public class CreditRequest: Codable {

        /// Unique identifier of the order with which this payment is associated
        public var orderId: String?
        public var credit: CLVModels.Variant?
        public var paymentCard: CLVModels.Variant?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case orderId
            case credit
            case paymentCard
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.orderId = try rootContainer.decodeIfPresent(String.self, forKey: .orderId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.credit = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .credit)
            } catch {
                decodeError.append(error)
            }
            do {
                self.paymentCard = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .paymentCard)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (orderId != nil) { try container.encode(orderId, forKey: .orderId) }
            if (credit != nil) { try container.encode(credit, forKey: .credit) }
            if (paymentCard != nil) { try container.encode(paymentCard, forKey: .paymentCard) }
        }
    }

}