/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Payments {

    public class VasPayload: Codable {

        /// List of vas data elements returned during tx
        public var payloadElements: [CLVModels.Payments.VasPayloadElement]?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case payloadElements
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            if (rootContainer.contains(.payloadElements)) {
                do {
                    let payloadElementsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .payloadElements)
                    self.payloadElements = try payloadElementsContainer.decodeIfPresent([CLVModels.Payments.VasPayloadElement].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (payloadElements != nil) { try container.encode(payloadElements, forKey: .payloadElements) }
        }
    }

}