/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Payments {

    public class Transaction: Codable {

        /// The time when the transaction was recorded on the server
        public var createdTime: Date?
        /// The time when the transaction was recorded on the client
        public var clientCreatedTime: Date?
        public var payment: CLVModels.Payments.Payment?
        public var refund: CLVModels.Payments.Refund?
        public var credit: CLVModels.Payments.Credit?
        public var creditRefund: CLVModels.Payments.CreditRefund?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case createdTime
            case clientCreatedTime
            case payment
            case refund
            case credit
            case creditRefund
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.createdTime = try rootContainer.decodeIfPresent(Date.self, forKey: .createdTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.clientCreatedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .clientCreatedTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.payment = try rootContainer.decodeIfPresent(CLVModels.Payments.Payment.self, forKey: .payment)
            } catch {
                decodeError.append(error)
            }
            do {
                self.refund = try rootContainer.decodeIfPresent(CLVModels.Payments.Refund.self, forKey: .refund)
            } catch {
                decodeError.append(error)
            }
            do {
                self.credit = try rootContainer.decodeIfPresent(CLVModels.Payments.Credit.self, forKey: .credit)
            } catch {
                decodeError.append(error)
            }
            do {
                self.creditRefund = try rootContainer.decodeIfPresent(CLVModels.Payments.CreditRefund.self, forKey: .creditRefund)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (createdTime != nil) { try container.encode(createdTime, forKey: .createdTime) }
            if (clientCreatedTime != nil) { try container.encode(clientCreatedTime, forKey: .clientCreatedTime) }
            if (payment != nil) { try container.encode(payment, forKey: .payment) }
            if (refund != nil) { try container.encode(refund, forKey: .refund) }
            if (credit != nil) { try container.encode(credit, forKey: .credit) }
            if (creditRefund != nil) { try container.encode(creditRefund, forKey: .creditRefund) }
        }
    }

}