/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
    different types of error code
*/
extension CLVModels.Tokens {

    public enum ErrorCode: Codable {
        case amount_too_large
        case amount_too_small
        case api_key_expired
        case card_declined
        case charge_already_captured
        case charge_already_refunded
        case charge_disputed
        case charge_exceeds_source_limit
        case charge_expired_for_capture
        case country_unsupported
        case email_invalid
        case expired_card
        case incorrect_address
        case incorrect_cvc
        case incorrect_number
        case incorrect_zip
        case invalid_card_type
        case invalid_wallet_type
        case invalid_charge_amount
        case invalid_tip_amount
        case invalid_tax_amount
        case invalid_convenience_fee
        case invalid_cvc
        case invalid_expiry_month
        case invalid_expiry_year
        case invalid_number
        case missing
        case order_creation_failed
        case order_required_settings
        case order_status_invalid
        case parameter_invalid_empty
        case parameter_invalid_integer
        case parameter_invalid_string_blank
        case parameter_invalid_string_empty
        case parameter_missing
        case parameter_unknown
        case postal_code_invalid
        case processing_error
        case rate_limit
        case resource_missing
        case token_already_used
        case invalid_request
        case card_on_file_missing
        case order_already_paid
        case PARSE_UNKNOWN(String)

        enum Key: CodingKey {
            case rawValue
        }

        public init(rawValue:String) {
            switch rawValue {
                case  "amount_too_large":
                    self = .amount_too_large
                case  "amount_too_small":
                    self = .amount_too_small
                case  "api_key_expired":
                    self = .api_key_expired
                case  "card_declined":
                    self = .card_declined
                case  "charge_already_captured":
                    self = .charge_already_captured
                case  "charge_already_refunded":
                    self = .charge_already_refunded
                case  "charge_disputed":
                    self = .charge_disputed
                case  "charge_exceeds_source_limit":
                    self = .charge_exceeds_source_limit
                case  "charge_expired_for_capture":
                    self = .charge_expired_for_capture
                case  "country_unsupported":
                    self = .country_unsupported
                case  "email_invalid":
                    self = .email_invalid
                case  "expired_card":
                    self = .expired_card
                case  "incorrect_address":
                    self = .incorrect_address
                case  "incorrect_cvc":
                    self = .incorrect_cvc
                case  "incorrect_number":
                    self = .incorrect_number
                case  "incorrect_zip":
                    self = .incorrect_zip
                case  "invalid_card_type":
                    self = .invalid_card_type
                case  "invalid_wallet_type":
                    self = .invalid_wallet_type
                case  "invalid_charge_amount":
                    self = .invalid_charge_amount
                case  "invalid_tip_amount":
                    self = .invalid_tip_amount
                case  "invalid_tax_amount":
                    self = .invalid_tax_amount
                case  "invalid_convenience_fee":
                    self = .invalid_convenience_fee
                case  "invalid_cvc":
                    self = .invalid_cvc
                case  "invalid_expiry_month":
                    self = .invalid_expiry_month
                case  "invalid_expiry_year":
                    self = .invalid_expiry_year
                case  "invalid_number":
                    self = .invalid_number
                case  "missing":
                    self = .missing
                case  "order_creation_failed":
                    self = .order_creation_failed
                case  "order_required_settings":
                    self = .order_required_settings
                case  "order_status_invalid":
                    self = .order_status_invalid
                case  "parameter_invalid_empty":
                    self = .parameter_invalid_empty
                case  "parameter_invalid_integer":
                    self = .parameter_invalid_integer
                case  "parameter_invalid_string_blank":
                    self = .parameter_invalid_string_blank
                case  "parameter_invalid_string_empty":
                    self = .parameter_invalid_string_empty
                case  "parameter_missing":
                    self = .parameter_missing
                case  "parameter_unknown":
                    self = .parameter_unknown
                case  "postal_code_invalid":
                    self = .postal_code_invalid
                case  "processing_error":
                    self = .processing_error
                case  "rate_limit":
                    self = .rate_limit
                case  "resource_missing":
                    self = .resource_missing
                case  "token_already_used":
                    self = .token_already_used
                case  "invalid_request":
                    self = .invalid_request
                case  "card_on_file_missing":
                    self = .card_on_file_missing
                case  "order_already_paid":
                    self = .order_already_paid
                default:
                    self = .PARSE_UNKNOWN(rawValue)
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self.init(rawValue: rawValue)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(toString)
        }

        public var toString: String {
            switch self {
                case  .amount_too_large:
                    return "amount_too_large"
                case  .amount_too_small:
                    return "amount_too_small"
                case  .api_key_expired:
                    return "api_key_expired"
                case  .card_declined:
                    return "card_declined"
                case  .charge_already_captured:
                    return "charge_already_captured"
                case  .charge_already_refunded:
                    return "charge_already_refunded"
                case  .charge_disputed:
                    return "charge_disputed"
                case  .charge_exceeds_source_limit:
                    return "charge_exceeds_source_limit"
                case  .charge_expired_for_capture:
                    return "charge_expired_for_capture"
                case  .country_unsupported:
                    return "country_unsupported"
                case  .email_invalid:
                    return "email_invalid"
                case  .expired_card:
                    return "expired_card"
                case  .incorrect_address:
                    return "incorrect_address"
                case  .incorrect_cvc:
                    return "incorrect_cvc"
                case  .incorrect_number:
                    return "incorrect_number"
                case  .incorrect_zip:
                    return "incorrect_zip"
                case  .invalid_card_type:
                    return "invalid_card_type"
                case  .invalid_wallet_type:
                    return "invalid_wallet_type"
                case  .invalid_charge_amount:
                    return "invalid_charge_amount"
                case  .invalid_tip_amount:
                    return "invalid_tip_amount"
                case  .invalid_tax_amount:
                    return "invalid_tax_amount"
                case  .invalid_convenience_fee:
                    return "invalid_convenience_fee"
                case  .invalid_cvc:
                    return "invalid_cvc"
                case  .invalid_expiry_month:
                    return "invalid_expiry_month"
                case  .invalid_expiry_year:
                    return "invalid_expiry_year"
                case  .invalid_number:
                    return "invalid_number"
                case  .missing:
                    return "missing"
                case  .order_creation_failed:
                    return "order_creation_failed"
                case  .order_required_settings:
                    return "order_required_settings"
                case  .order_status_invalid:
                    return "order_status_invalid"
                case  .parameter_invalid_empty:
                    return "parameter_invalid_empty"
                case  .parameter_invalid_integer:
                    return "parameter_invalid_integer"
                case  .parameter_invalid_string_blank:
                    return "parameter_invalid_string_blank"
                case  .parameter_invalid_string_empty:
                    return "parameter_invalid_string_empty"
                case  .parameter_missing:
                    return "parameter_missing"
                case  .parameter_unknown:
                    return "parameter_unknown"
                case  .postal_code_invalid:
                    return "postal_code_invalid"
                case  .processing_error:
                    return "processing_error"
                case  .rate_limit:
                    return "rate_limit"
                case  .resource_missing:
                    return "resource_missing"
                case  .token_already_used:
                    return "token_already_used"
                case  .invalid_request:
                    return "invalid_request"
                case  .card_on_file_missing:
                    return "card_on_file_missing"
                case  .order_already_paid:
                    return "order_already_paid"
                case .PARSE_UNKNOWN(let rawValue):
                    return rawValue            
            }
        }
    }
}