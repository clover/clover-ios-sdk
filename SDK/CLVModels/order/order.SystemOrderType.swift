/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Order {

    public class SystemOrderType: Codable {

        /// Unique identifier
        public var id: String?
        /// Label Key
        public var labelKey: String?
        /// Is for quick service restraunts?
        public var isQsr: Bool?
        /// Is for full service restraunts?
        public var isFsr: Bool?
        /// Is for retail stores?
        public var isRetail: Bool?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case labelKey
            case isQsr
            case isFsr
            case isRetail
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.labelKey = try rootContainer.decodeIfPresent(String.self, forKey: .labelKey)
            } catch {
                decodeError.append(error)
            }
            do {
                self.isQsr = try rootContainer.decodeIfPresent(Bool.self, forKey: .isQsr)
            } catch {
                decodeError.append(error)
            }
            do {
                self.isFsr = try rootContainer.decodeIfPresent(Bool.self, forKey: .isFsr)
            } catch {
                decodeError.append(error)
            }
            do {
                self.isRetail = try rootContainer.decodeIfPresent(Bool.self, forKey: .isRetail)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (labelKey != nil) { try container.encode(labelKey, forKey: .labelKey) }
            if (isQsr != nil) { try container.encode(isQsr, forKey: .isQsr) }
            if (isFsr != nil) { try container.encode(isFsr, forKey: .isFsr) }
            if (isRetail != nil) { try container.encode(isRetail, forKey: .isRetail) }
        }
    }

}