/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
    Summary of removed items by employee
*/

import Foundation

extension CLVModels.Order {

    public class VoidedLineItemEmployeeData: Codable {

        /// The employee who performed the event
        public var employee: CLVModels.Employees.Employee?
        /// sum of price of all the items multiplied with quantity and includes modifiers.
        public var priceWithQuantityAndModifiersOfRemovedItems: Int64?
        /// gross sale of employee over the reporting period
        public var grossSaleOfEmployee: Int64?
        /// removal rate of the employee
        public var itemsRemovalRate: Double?
        /// String to indicate if this employee belongs to current period or previous
        public var period: String?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case employee
            case priceWithQuantityAndModifiersOfRemovedItems
            case grossSaleOfEmployee
            case itemsRemovalRate
            case period
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.employee = try rootContainer.decodeIfPresent(CLVModels.Employees.Employee.self, forKey: .employee)
            } catch {
                decodeError.append(error)
            }
            do {
                self.priceWithQuantityAndModifiersOfRemovedItems = try rootContainer.decodeIfPresent(Int64.self, forKey: .priceWithQuantityAndModifiersOfRemovedItems)
            } catch {
                decodeError.append(error)
            }
            do {
                self.grossSaleOfEmployee = try rootContainer.decodeIfPresent(Int64.self, forKey: .grossSaleOfEmployee)
            } catch {
                decodeError.append(error)
            }
            do {
                self.itemsRemovalRate = try rootContainer.decodeIfPresent(Double.self, forKey: .itemsRemovalRate)
            } catch {
                decodeError.append(error)
            }
            do {
                self.period = try rootContainer.decodeIfPresent(String.self, forKey: .period)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (employee != nil) { try container.encode(employee, forKey: .employee) }
            if (priceWithQuantityAndModifiersOfRemovedItems != nil) { try container.encode(priceWithQuantityAndModifiersOfRemovedItems, forKey: .priceWithQuantityAndModifiersOfRemovedItems) }
            if (grossSaleOfEmployee != nil) { try container.encode(grossSaleOfEmployee, forKey: .grossSaleOfEmployee) }
            if (itemsRemovalRate != nil) { try container.encode(itemsRemovalRate, forKey: .itemsRemovalRate) }
            if (period != nil) { try container.encode(period, forKey: .period) }
        }
    }

}