/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Order {

    public class Discount: Codable {

        /// Unique identifier
        public var id: String?
        /// The order with which the discount is associated
        public var orderRef: CLVModels.Variant?
        /// The lineItem with which the discount is associated
        public var lineItemRef: CLVModels.Variant?
        /// If this item is based on a standard discount, this will point to the appropriate inventory.Discount
        public var discount: CLVModels.Variant?
        /// The person that authorized a discount
        public var approver: CLVModels.Variant?
        /// Name of the discount
        public var name: String?
        /// Discount amount in fraction of currency unit (e.g. cents) based on currency fraction digits supported
        public var amount: CLVModels.Variant?
        /// Discount amount in percent
        public var percentage: CLVModels.Variant?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case orderRef
            case lineItemRef
            case discount
            case approver
            case name
            case amount
            case percentage
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.orderRef = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .orderRef)
            } catch {
                decodeError.append(error)
            }
            do {
                self.lineItemRef = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .lineItemRef)
            } catch {
                decodeError.append(error)
            }
            do {
                self.discount = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .discount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.approver = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .approver)
            } catch {
                decodeError.append(error)
            }
            do {
                self.name = try rootContainer.decodeIfPresent(String.self, forKey: .name)
            } catch {
                decodeError.append(error)
            }
            do {
                self.amount = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .amount)
            } catch {
                decodeError.append(error)
            }
            do {
                self.percentage = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .percentage)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (orderRef != nil) { try container.encode(orderRef, forKey: .orderRef) }
            if (lineItemRef != nil) { try container.encode(lineItemRef, forKey: .lineItemRef) }
            if (discount != nil) { try container.encode(discount, forKey: .discount) }
            if (approver != nil) { try container.encode(approver, forKey: .approver) }
            if (name != nil) { try container.encode(name, forKey: .name) }
            if (amount != nil) { try container.encode(amount, forKey: .amount) }
            if (percentage != nil) { try container.encode(percentage, forKey: .percentage) }
        }
    }

}