/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
    Summary shown on dashboard
*/

import Foundation

extension CLVModels.Order {

    public class VoidedItemsDashboardSummary: Codable {

        /// sum of price of all the items, in cents of merchant currency multiplied by quantity.
        public var priceWithQuantity: Int64?
        /// sum of price of all the items multiplied with quantity and includes modifiers.
        public var priceWithQuantityAndModifiers: Int64?
        /// Beginning of the time period for this summary
        public var startTimestamp: Date?
        /// End of the time period for this summary
        public var endTimestamp: Date?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case priceWithQuantity
            case priceWithQuantityAndModifiers
            case startTimestamp
            case endTimestamp
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.priceWithQuantity = try rootContainer.decodeIfPresent(Int64.self, forKey: .priceWithQuantity)
            } catch {
                decodeError.append(error)
            }
            do {
                self.priceWithQuantityAndModifiers = try rootContainer.decodeIfPresent(Int64.self, forKey: .priceWithQuantityAndModifiers)
            } catch {
                decodeError.append(error)
            }
            do {
                self.startTimestamp = try rootContainer.decodeIfPresent(Date.self, forKey: .startTimestamp)
            } catch {
                decodeError.append(error)
            }
            do {
                self.endTimestamp = try rootContainer.decodeIfPresent(Date.self, forKey: .endTimestamp)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (priceWithQuantity != nil) { try container.encode(priceWithQuantity, forKey: .priceWithQuantity) }
            if (priceWithQuantityAndModifiers != nil) { try container.encode(priceWithQuantityAndModifiers, forKey: .priceWithQuantityAndModifiers) }
            if (startTimestamp != nil) { try container.encode(startTimestamp, forKey: .startTimestamp) }
            if (endTimestamp != nil) { try container.encode(endTimestamp, forKey: .endTimestamp) }
        }
    }

}