/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Order {

    public class DisplayOrder: Codable {

        /// Unique identifier
        public var id: String?
        /// Currency of this order
        public var currency: String?
        /// The employee associated with this order
        public var employee: String?
        /// Formatted subtotal of the order
        public var subtotal: String?
        /// Formatted tax of the order
        public var tax: String?
        /// Formatted total of the order
        public var total: String?
        public var title: CLVModels.Variant?
        public var note: CLVModels.Variant?
        /// This order was created by merchant with VAT enabled.
        public var isVat: Bool?
        /// Optional service charge name (gratuity) applied to this order
        public var serviceChargeName: CLVModels.Variant?
        /// Optional service charge amount (gratuity) applied to this order
        public var serviceChargeAmount: CLVModels.Variant?
        public var discounts: [CLVModels.Order.DisplayDiscount]?
        public var lineItems: [CLVModels.Order.DisplayLineItem]?
        /// Formatted amount remaining
        public var amountRemaining: String?
        /// Payments that were made for this order
        public var payments: [CLVModels.Order.DisplayPayment]?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case currency
            case employee
            case subtotal
            case tax
            case total
            case title
            case note
            case isVat
            case serviceChargeName
            case serviceChargeAmount
            case discounts
            case lineItems
            case amountRemaining
            case payments
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.currency = try rootContainer.decodeIfPresent(String.self, forKey: .currency)
            } catch {
                decodeError.append(error)
            }
            do {
                self.employee = try rootContainer.decodeIfPresent(String.self, forKey: .employee)
            } catch {
                decodeError.append(error)
            }
            do {
                self.subtotal = try rootContainer.decodeIfPresent(String.self, forKey: .subtotal)
            } catch {
                decodeError.append(error)
            }
            do {
                self.tax = try rootContainer.decodeIfPresent(String.self, forKey: .tax)
            } catch {
                decodeError.append(error)
            }
            do {
                self.total = try rootContainer.decodeIfPresent(String.self, forKey: .total)
            } catch {
                decodeError.append(error)
            }
            do {
                self.title = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .title)
            } catch {
                decodeError.append(error)
            }
            do {
                self.note = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .note)
            } catch {
                decodeError.append(error)
            }
            do {
                self.isVat = try rootContainer.decodeIfPresent(Bool.self, forKey: .isVat)
            } catch {
                decodeError.append(error)
            }
            do {
                self.serviceChargeName = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .serviceChargeName)
            } catch {
                decodeError.append(error)
            }
            do {
                self.serviceChargeAmount = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .serviceChargeAmount)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.discounts)) {
                do {
                    let discountsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .discounts)
                    self.discounts = try discountsContainer.decodeIfPresent([CLVModels.Order.DisplayDiscount].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            if (rootContainer.contains(.lineItems)) {
                do {
                    let lineItemsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .lineItems)
                    self.lineItems = try lineItemsContainer.decodeIfPresent([CLVModels.Order.DisplayLineItem].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            do {
                self.amountRemaining = try rootContainer.decodeIfPresent(String.self, forKey: .amountRemaining)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.payments)) {
                do {
                    let paymentsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .payments)
                    self.payments = try paymentsContainer.decodeIfPresent([CLVModels.Order.DisplayPayment].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (currency != nil) { try container.encode(currency, forKey: .currency) }
            if (employee != nil) { try container.encode(employee, forKey: .employee) }
            if (subtotal != nil) { try container.encode(subtotal, forKey: .subtotal) }
            if (tax != nil) { try container.encode(tax, forKey: .tax) }
            if (total != nil) { try container.encode(total, forKey: .total) }
            if (title != nil) { try container.encode(title, forKey: .title) }
            if (note != nil) { try container.encode(note, forKey: .note) }
            if (isVat != nil) { try container.encode(isVat, forKey: .isVat) }
            if (serviceChargeName != nil) { try container.encode(serviceChargeName, forKey: .serviceChargeName) }
            if (serviceChargeAmount != nil) { try container.encode(serviceChargeAmount, forKey: .serviceChargeAmount) }
            if (discounts != nil) { try container.encode(discounts, forKey: .discounts) }
            if (lineItems != nil) { try container.encode(lineItems, forKey: .lineItems) }
            if (amountRemaining != nil) { try container.encode(amountRemaining, forKey: .amountRemaining) }
            if (payments != nil) { try container.encode(payments, forKey: .payments) }
        }
    }

}