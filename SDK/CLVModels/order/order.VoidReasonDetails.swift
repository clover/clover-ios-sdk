/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
    Detailed explanation on why the transaction is getting voided.
*/

import Foundation

extension CLVModels.Order {

    public class VoidReasonDetails: Codable {

        /// Transaction Error byte in hex
        public var txError: String?
        /// Detailed Reason code
        public var voidReasonCode: CLVModels.Order.VoidReasonCode?
        /// More detailed reason for voiding the transaction
        public var description_: String?
        /// Pay Failure Message
        public var payFailureMessage: String?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case txError
            case voidReasonCode
            case description
            case payFailureMessage
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.txError = try rootContainer.decodeIfPresent(String.self, forKey: .txError)
            } catch {
                decodeError.append(error)
            }
            do {
                self.voidReasonCode = try rootContainer.decodeIfPresent(CLVModels.Order.VoidReasonCode.self, forKey: .voidReasonCode)
            } catch {
                decodeError.append(error)
            }
            do {
                self.description_ = try rootContainer.decodeIfPresent(String.self, forKey: .description)
            } catch {
                decodeError.append(error)
            }
            do {
                self.payFailureMessage = try rootContainer.decodeIfPresent(String.self, forKey: .payFailureMessage)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (txError != nil) { try container.encode(txError, forKey: .txError) }
            if (voidReasonCode != nil) { try container.encode(voidReasonCode, forKey: .voidReasonCode) }
            if (description_ != nil) { try container.encode(description_, forKey: .description) }
            if (payFailureMessage != nil) { try container.encode(payFailureMessage, forKey: .payFailureMessage) }
        }
    }

}