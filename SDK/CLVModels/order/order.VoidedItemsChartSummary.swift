/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
    Summary of voided line items chart data
*/

import Foundation

extension CLVModels.Order {

    public class VoidedItemsChartSummary: Codable {

        /// flag to indicate if any line item has modifiers
        public var hasModifiers: Bool?
        /// revenue classes data
        public var chartData: [CLVModels.Order.VoidedItemsChartData]?
        /// totals of all the chart data
        public var chartTotals: CLVModels.Order.VoidedItemsChartData?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case hasModifiers
            case chartData
            case chartTotals
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.hasModifiers = try rootContainer.decodeIfPresent(Bool.self, forKey: .hasModifiers)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.chartData)) {
                do {
                    let chartDataContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .chartData)
                    self.chartData = try chartDataContainer.decodeIfPresent([CLVModels.Order.VoidedItemsChartData].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            do {
                self.chartTotals = try rootContainer.decodeIfPresent(CLVModels.Order.VoidedItemsChartData.self, forKey: .chartTotals)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (hasModifiers != nil) { try container.encode(hasModifiers, forKey: .hasModifiers) }
            if (chartData != nil) { try container.encode(chartData, forKey: .chartData) }
            if (chartTotals != nil) { try container.encode(chartTotals, forKey: .chartTotals) }
        }
    }

}