/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
    Summary of voided line items
*/

import Foundation

extension CLVModels.Order {

    public class VoidedItemsSummary: Codable {

        /// number of printed line items deleted
        public var printed: Int64?
        /// number of unprinted line items deleted
        public var unprinted: Int64?
        /// sum of price of all the items, in cents of merchant currency.
        public var price: Int64?
        /// sum of price of all the items, in cents of merchant currency multiplied by quantity.
        public var priceWithQuantity: Int64?
        /// sum of price of all the items multiplied with quantity and includes modifiers.
        public var priceWithQuantityAndModifiers: Int64?
        /// number of orders deleted
        public var deletedOrders: Int64?
        /// number of line items deleted
        public var deletedItems: Int64?
        /// summary of the chart data
        public var chartSummary: CLVModels.Order.VoidedItemsChartSummary?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case printed
            case unprinted
            case price
            case priceWithQuantity
            case priceWithQuantityAndModifiers
            case deletedOrders
            case deletedItems
            case chartSummary
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.printed = try rootContainer.decodeIfPresent(Int64.self, forKey: .printed)
            } catch {
                decodeError.append(error)
            }
            do {
                self.unprinted = try rootContainer.decodeIfPresent(Int64.self, forKey: .unprinted)
            } catch {
                decodeError.append(error)
            }
            do {
                self.price = try rootContainer.decodeIfPresent(Int64.self, forKey: .price)
            } catch {
                decodeError.append(error)
            }
            do {
                self.priceWithQuantity = try rootContainer.decodeIfPresent(Int64.self, forKey: .priceWithQuantity)
            } catch {
                decodeError.append(error)
            }
            do {
                self.priceWithQuantityAndModifiers = try rootContainer.decodeIfPresent(Int64.self, forKey: .priceWithQuantityAndModifiers)
            } catch {
                decodeError.append(error)
            }
            do {
                self.deletedOrders = try rootContainer.decodeIfPresent(Int64.self, forKey: .deletedOrders)
            } catch {
                decodeError.append(error)
            }
            do {
                self.deletedItems = try rootContainer.decodeIfPresent(Int64.self, forKey: .deletedItems)
            } catch {
                decodeError.append(error)
            }
            do {
                self.chartSummary = try rootContainer.decodeIfPresent(CLVModels.Order.VoidedItemsChartSummary.self, forKey: .chartSummary)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (printed != nil) { try container.encode(printed, forKey: .printed) }
            if (unprinted != nil) { try container.encode(unprinted, forKey: .unprinted) }
            if (price != nil) { try container.encode(price, forKey: .price) }
            if (priceWithQuantity != nil) { try container.encode(priceWithQuantity, forKey: .priceWithQuantity) }
            if (priceWithQuantityAndModifiers != nil) { try container.encode(priceWithQuantityAndModifiers, forKey: .priceWithQuantityAndModifiers) }
            if (deletedOrders != nil) { try container.encode(deletedOrders, forKey: .deletedOrders) }
            if (deletedItems != nil) { try container.encode(deletedItems, forKey: .deletedItems) }
            if (chartSummary != nil) { try container.encode(chartSummary, forKey: .chartSummary) }
        }
    }

}