/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Order {

    public class SendReceiptRequest: Codable {

        /// The order of the requested receipt.
        public var orderRef: CLVModels.Base.Reference?
        /// The payment of the requested receipt.
        public var payment: CLVModels.Variant?
        /// The refund of the requested receipt.
        public var refund: CLVModels.Variant?
        /// The credit of the requested receipt.
        public var credit: CLVModels.Variant?
        /// List of email addresses to send the receipt to.
        public var emailAddresses: [String]?
        /// List of phone numbers to send the receipt to.
        public var phoneNumbers: [String]?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case orderRef
            case payment
            case refund
            case credit
            case emailAddresses
            case phoneNumbers
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.orderRef = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .orderRef)
            } catch {
                decodeError.append(error)
            }
            do {
                self.payment = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .payment)
            } catch {
                decodeError.append(error)
            }
            do {
                self.refund = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .refund)
            } catch {
                decodeError.append(error)
            }
            do {
                self.credit = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .credit)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.emailAddresses)) {
                do {
                    let emailAddressesContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .emailAddresses)
                    self.emailAddresses = try emailAddressesContainer.decodeIfPresent([String].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            if (rootContainer.contains(.phoneNumbers)) {
                do {
                    let phoneNumbersContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .phoneNumbers)
                    self.phoneNumbers = try phoneNumbersContainer.decodeIfPresent([String].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (orderRef != nil) { try container.encode(orderRef, forKey: .orderRef) }
            if (payment != nil) { try container.encode(payment, forKey: .payment) }
            if (refund != nil) { try container.encode(refund, forKey: .refund) }
            if (credit != nil) { try container.encode(credit, forKey: .credit) }
            if (emailAddresses != nil) { try container.encode(emailAddresses, forKey: .emailAddresses) }
            if (phoneNumbers != nil) { try container.encode(phoneNumbers, forKey: .phoneNumbers) }
        }
    }

}