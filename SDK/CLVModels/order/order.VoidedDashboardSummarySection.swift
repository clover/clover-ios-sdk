/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
    Combines a collection of rows with a total to form a section in reporting voided items api response.
*/

import Foundation

extension CLVModels.Order {

    public class VoidedDashboardSummarySection: Codable {

        /// The detail rows of a particular section of voided items
        public var rows: [CLVModels.Order.VoidedItemsDashboardSummary]?
        /// The sum of the above rows.
        public var total: CLVModels.Order.VoidedItemsDashboardSummary?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case rows
            case total
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            if (rootContainer.contains(.rows)) {
                do {
                    let rowsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .rows)
                    self.rows = try rowsContainer.decodeIfPresent([CLVModels.Order.VoidedItemsDashboardSummary].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            do {
                self.total = try rootContainer.decodeIfPresent(CLVModels.Order.VoidedItemsDashboardSummary.self, forKey: .total)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (rows != nil) { try container.encode(rows, forKey: .rows) }
            if (total != nil) { try container.encode(total, forKey: .total) }
        }
    }

}