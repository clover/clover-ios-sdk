/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Hours {

    public class HoursSet: Codable {

        /// Unique identifier
        public var id: String?
        /// Friendly name to describe the hours
        public var name: String?
        public var reference: CLVModels.Variant?
        public var sunday: [CLVModels.Hours.HourRange]?
        public var monday: [CLVModels.Hours.HourRange]?
        public var tuesday: [CLVModels.Hours.HourRange]?
        public var wednesday: [CLVModels.Hours.HourRange]?
        public var thursday: [CLVModels.Hours.HourRange]?
        public var friday: [CLVModels.Hours.HourRange]?
        public var saturday: [CLVModels.Hours.HourRange]?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case name
            case reference
            case sunday
            case monday
            case tuesday
            case wednesday
            case thursday
            case friday
            case saturday
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.name = try rootContainer.decodeIfPresent(String.self, forKey: .name)
            } catch {
                decodeError.append(error)
            }
            do {
                self.reference = try rootContainer.decodeIfPresent(CLVModels.Variant.self, forKey: .reference)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.sunday)) {
                do {
                    let sundayContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .sunday)
                    self.sunday = try sundayContainer.decodeIfPresent([CLVModels.Hours.HourRange].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            if (rootContainer.contains(.monday)) {
                do {
                    let mondayContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .monday)
                    self.monday = try mondayContainer.decodeIfPresent([CLVModels.Hours.HourRange].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            if (rootContainer.contains(.tuesday)) {
                do {
                    let tuesdayContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .tuesday)
                    self.tuesday = try tuesdayContainer.decodeIfPresent([CLVModels.Hours.HourRange].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            if (rootContainer.contains(.wednesday)) {
                do {
                    let wednesdayContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .wednesday)
                    self.wednesday = try wednesdayContainer.decodeIfPresent([CLVModels.Hours.HourRange].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            if (rootContainer.contains(.thursday)) {
                do {
                    let thursdayContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .thursday)
                    self.thursday = try thursdayContainer.decodeIfPresent([CLVModels.Hours.HourRange].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            if (rootContainer.contains(.friday)) {
                do {
                    let fridayContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .friday)
                    self.friday = try fridayContainer.decodeIfPresent([CLVModels.Hours.HourRange].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            if (rootContainer.contains(.saturday)) {
                do {
                    let saturdayContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .saturday)
                    self.saturday = try saturdayContainer.decodeIfPresent([CLVModels.Hours.HourRange].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (name != nil) { try container.encode(name, forKey: .name) }
            if (reference != nil) { try container.encode(reference, forKey: .reference) }
            if (sunday != nil) { try container.encode(sunday, forKey: .sunday) }
            if (monday != nil) { try container.encode(monday, forKey: .monday) }
            if (tuesday != nil) { try container.encode(tuesday, forKey: .tuesday) }
            if (wednesday != nil) { try container.encode(wednesday, forKey: .wednesday) }
            if (thursday != nil) { try container.encode(thursday, forKey: .thursday) }
            if (friday != nil) { try container.encode(friday, forKey: .friday) }
            if (saturday != nil) { try container.encode(saturday, forKey: .saturday) }
        }
    }

}