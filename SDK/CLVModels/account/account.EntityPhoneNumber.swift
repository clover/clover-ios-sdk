/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Account {

    public class EntityPhoneNumber: Codable {

        /// The id of the entity a phone number account is related to.
        public var entityUuid: String?
        /// The id of the phone number record this relation is related to.
        public var phoneNumberUuid: String?
        /// Timestamp of when this record was marked deleted
        public var deletedTime: Date?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case entityUuid
            case phoneNumberUuid
            case deletedTime
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.entityUuid = try rootContainer.decodeIfPresent(String.self, forKey: .entityUuid)
            } catch {
                decodeError.append(error)
            }
            do {
                self.phoneNumberUuid = try rootContainer.decodeIfPresent(String.self, forKey: .phoneNumberUuid)
            } catch {
                decodeError.append(error)
            }
            do {
                self.deletedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .deletedTime)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (entityUuid != nil) { try container.encode(entityUuid, forKey: .entityUuid) }
            if (phoneNumberUuid != nil) { try container.encode(phoneNumberUuid, forKey: .phoneNumberUuid) }
            if (deletedTime != nil) { try container.encode(deletedTime, forKey: .deletedTime) }
        }
    }

}