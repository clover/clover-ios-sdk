/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Account {

    public class AuthFactor: Codable {

        /// Unique identifier
        public var id: String?
        public var type_: CLVModels.Account.AuthFactorType?
        public var phoneNumber: String?
        /// The ISO 3166 Country Code for a locale. Specifying this permits correct formatting of the phoneNumber for SMS.
        public var countryCode: String?
        public var backupCodes: String?
        public var totpKey: String?
        public var createdTime: Date?
        /// Date/time this auth factor was deleted.
        public var deletedTime: Date?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case type
            case phoneNumber
            case countryCode
            case backupCodes
            case totpKey
            case createdTime
            case deletedTime
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.type_ = try rootContainer.decodeIfPresent(CLVModels.Account.AuthFactorType.self, forKey: .type)
            } catch {
                decodeError.append(error)
            }
            do {
                self.phoneNumber = try rootContainer.decodeIfPresent(String.self, forKey: .phoneNumber)
            } catch {
                decodeError.append(error)
            }
            do {
                self.countryCode = try rootContainer.decodeIfPresent(String.self, forKey: .countryCode)
            } catch {
                decodeError.append(error)
            }
            do {
                self.backupCodes = try rootContainer.decodeIfPresent(String.self, forKey: .backupCodes)
            } catch {
                decodeError.append(error)
            }
            do {
                self.totpKey = try rootContainer.decodeIfPresent(String.self, forKey: .totpKey)
            } catch {
                decodeError.append(error)
            }
            do {
                self.createdTime = try rootContainer.decodeIfPresent(Date.self, forKey: .createdTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.deletedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .deletedTime)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (type_ != nil) { try container.encode(type_, forKey: .type) }
            if (phoneNumber != nil) { try container.encode(phoneNumber, forKey: .phoneNumber) }
            if (countryCode != nil) { try container.encode(countryCode, forKey: .countryCode) }
            if (backupCodes != nil) { try container.encode(backupCodes, forKey: .backupCodes) }
            if (totpKey != nil) { try container.encode(totpKey, forKey: .totpKey) }
            if (createdTime != nil) { try container.encode(createdTime, forKey: .createdTime) }
            if (deletedTime != nil) { try container.encode(deletedTime, forKey: .deletedTime) }
        }
    }

}