/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

/*
    A simple representation of account that does not permit the attachment of non-account information.
*/

import Foundation

extension CLVModels.Account {

    public class AccountRecord: Codable {

        public var id: String?
        public var email: String?
        public var name: String?
        public var claimCode: String?
        public var oauthProvider: CLVModels.Account.OAuthProvider?
        /// a hash of the password used to attest access to this account.
        public var passwordHash: String?
        public var lockedOut: Bool?
        public var passwordUpdatedTime: Date?
        public var isActive: Bool?
        public var createdTime: Date?
        public var claimedTime: Date?
        public var lastLogin: Int64?
        public var inviteSent: Bool?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case email
            case name
            case claimCode
            case oauthProvider
            case passwordHash
            case lockedOut
            case passwordUpdatedTime
            case isActive
            case createdTime
            case claimedTime
            case lastLogin
            case inviteSent
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.email = try rootContainer.decodeIfPresent(String.self, forKey: .email)
            } catch {
                decodeError.append(error)
            }
            do {
                self.name = try rootContainer.decodeIfPresent(String.self, forKey: .name)
            } catch {
                decodeError.append(error)
            }
            do {
                self.claimCode = try rootContainer.decodeIfPresent(String.self, forKey: .claimCode)
            } catch {
                decodeError.append(error)
            }
            do {
                self.oauthProvider = try rootContainer.decodeIfPresent(CLVModels.Account.OAuthProvider.self, forKey: .oauthProvider)
            } catch {
                decodeError.append(error)
            }
            do {
                self.passwordHash = try rootContainer.decodeIfPresent(String.self, forKey: .passwordHash)
            } catch {
                decodeError.append(error)
            }
            do {
                self.lockedOut = try rootContainer.decodeIfPresent(Bool.self, forKey: .lockedOut)
            } catch {
                decodeError.append(error)
            }
            do {
                self.passwordUpdatedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .passwordUpdatedTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.isActive = try rootContainer.decodeIfPresent(Bool.self, forKey: .isActive)
            } catch {
                decodeError.append(error)
            }
            do {
                self.createdTime = try rootContainer.decodeIfPresent(Date.self, forKey: .createdTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.claimedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .claimedTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.lastLogin = try rootContainer.decodeIfPresent(Int64.self, forKey: .lastLogin)
            } catch {
                decodeError.append(error)
            }
            do {
                self.inviteSent = try rootContainer.decodeIfPresent(Bool.self, forKey: .inviteSent)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (email != nil) { try container.encode(email, forKey: .email) }
            if (name != nil) { try container.encode(name, forKey: .name) }
            if (claimCode != nil) { try container.encode(claimCode, forKey: .claimCode) }
            if (oauthProvider != nil) { try container.encode(oauthProvider, forKey: .oauthProvider) }
            if (passwordHash != nil) { try container.encode(passwordHash, forKey: .passwordHash) }
            if (lockedOut != nil) { try container.encode(lockedOut, forKey: .lockedOut) }
            if (passwordUpdatedTime != nil) { try container.encode(passwordUpdatedTime, forKey: .passwordUpdatedTime) }
            if (isActive != nil) { try container.encode(isActive, forKey: .isActive) }
            if (createdTime != nil) { try container.encode(createdTime, forKey: .createdTime) }
            if (claimedTime != nil) { try container.encode(claimedTime, forKey: .claimedTime) }
            if (lastLogin != nil) { try container.encode(lastLogin, forKey: .lastLogin) }
            if (inviteSent != nil) { try container.encode(inviteSent, forKey: .inviteSent) }
        }
    }

}