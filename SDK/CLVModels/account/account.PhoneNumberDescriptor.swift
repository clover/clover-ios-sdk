/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Account {

    public class PhoneNumberDescriptor: Codable {

        /// Unique identifier
        public var id: String?
        /// The id of the phone number record to which this descriptor corresponds to.
        public var phoneNumberId: Int64?
        /// Identifier of what this phone number is used for within Clover
        public var descriptor: String?
        /// Permissions related to the descriptor
        public var permissions: [CLVModels.Account.DescriptorPermission]?
        /// Timestamp when this record was created
        public var createdTime: Date?
        /// Timestamp when this record was modified
        public var modifiedTime: Date?
        /// Timestamp of when this record was marked deleted
        public var deletedTime: Date?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case id
            case phoneNumberId
            case descriptor
            case permissions
            case createdTime
            case modifiedTime
            case deletedTime
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.id = try rootContainer.decodeIfPresent(String.self, forKey: .id)
            } catch {
                decodeError.append(error)
            }
            do {
                self.phoneNumberId = try rootContainer.decodeIfPresent(Int64.self, forKey: .phoneNumberId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.descriptor = try rootContainer.decodeIfPresent(String.self, forKey: .descriptor)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.permissions)) {
                do {
                    let permissionsContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .permissions)
                    self.permissions = try permissionsContainer.decodeIfPresent([CLVModels.Account.DescriptorPermission].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            do {
                self.createdTime = try rootContainer.decodeIfPresent(Date.self, forKey: .createdTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.modifiedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .modifiedTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.deletedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .deletedTime)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (id != nil) { try container.encode(id, forKey: .id) }
            if (phoneNumberId != nil) { try container.encode(phoneNumberId, forKey: .phoneNumberId) }
            if (descriptor != nil) { try container.encode(descriptor, forKey: .descriptor) }
            if (permissions != nil) { try container.encode(permissions, forKey: .permissions) }
            if (createdTime != nil) { try container.encode(createdTime, forKey: .createdTime) }
            if (modifiedTime != nil) { try container.encode(modifiedTime, forKey: .modifiedTime) }
            if (deletedTime != nil) { try container.encode(deletedTime, forKey: .deletedTime) }
        }
    }

}