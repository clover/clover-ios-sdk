/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Account {

    public class TermsCondition: Codable {

        public var accountId: Int64?
        public var merchantId: Int64?
        /// Terms and conditions types
        public var types: [CLVModels.Account.TermsType]?
        /// Terms and conditions
        public var source: CLVModels.Account.Source?
        /// Timestamp when this record was created
        public var createdTime: Date?
        /// Timestamp of when this record was marked deleted
        public var deletedTime: Date?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case accountId
            case merchantId
            case types
            case source
            case createdTime
            case deletedTime
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.accountId = try rootContainer.decodeIfPresent(Int64.self, forKey: .accountId)
            } catch {
                decodeError.append(error)
            }
            do {
                self.merchantId = try rootContainer.decodeIfPresent(Int64.self, forKey: .merchantId)
            } catch {
                decodeError.append(error)
            }
            if (rootContainer.contains(.types)) {
                do {
                    let typesContainer = try rootContainer.nestedContainer(keyedBy: CLVModels.ElementsKey.self, forKey: .types)
                    self.types = try typesContainer.decodeIfPresent([CLVModels.Account.TermsType].self, forKey: .elements)
                } catch {
                    decodeError.append(error)
                }
            }
            do {
                self.source = try rootContainer.decodeIfPresent(CLVModels.Account.Source.self, forKey: .source)
            } catch {
                decodeError.append(error)
            }
            do {
                self.createdTime = try rootContainer.decodeIfPresent(Date.self, forKey: .createdTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.deletedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .deletedTime)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (accountId != nil) { try container.encode(accountId, forKey: .accountId) }
            if (merchantId != nil) { try container.encode(merchantId, forKey: .merchantId) }
            if (types != nil) { try container.encode(types, forKey: .types) }
            if (source != nil) { try container.encode(source, forKey: .source) }
            if (createdTime != nil) { try container.encode(createdTime, forKey: .createdTime) }
            if (deletedTime != nil) { try container.encode(deletedTime, forKey: .deletedTime) }
        }
    }

}