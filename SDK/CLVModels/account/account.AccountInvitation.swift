/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Account {

    public class AccountInvitation: Codable {

        /// Reference to an account this invitation is associated with
        public var accountRef: CLVModels.Base.Reference?
        /// Email associated with new account
        public var email: String?
        /// Indicates whether new account is for developer
        public var isDeveloper: Bool?
        /// Indicates whether merchant is for test
        public var isTestMerchant: Bool?
        /// Indicates if it ignores company while claiming account
        public var ignoreCompany: Bool?
        public var claimCode: String?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case accountRef
            case email
            case isDeveloper
            case isTestMerchant
            case ignoreCompany
            case claimCode
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.accountRef = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .accountRef)
            } catch {
                decodeError.append(error)
            }
            do {
                self.email = try rootContainer.decodeIfPresent(String.self, forKey: .email)
            } catch {
                decodeError.append(error)
            }
            do {
                self.isDeveloper = try rootContainer.decodeIfPresent(Bool.self, forKey: .isDeveloper)
            } catch {
                decodeError.append(error)
            }
            do {
                self.isTestMerchant = try rootContainer.decodeIfPresent(Bool.self, forKey: .isTestMerchant)
            } catch {
                decodeError.append(error)
            }
            do {
                self.ignoreCompany = try rootContainer.decodeIfPresent(Bool.self, forKey: .ignoreCompany)
            } catch {
                decodeError.append(error)
            }
            do {
                self.claimCode = try rootContainer.decodeIfPresent(String.self, forKey: .claimCode)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (accountRef != nil) { try container.encode(accountRef, forKey: .accountRef) }
            if (email != nil) { try container.encode(email, forKey: .email) }
            if (isDeveloper != nil) { try container.encode(isDeveloper, forKey: .isDeveloper) }
            if (isTestMerchant != nil) { try container.encode(isTestMerchant, forKey: .isTestMerchant) }
            if (ignoreCompany != nil) { try container.encode(ignoreCompany, forKey: .ignoreCompany) }
            if (claimCode != nil) { try container.encode(claimCode, forKey: .claimCode) }
        }
    }

}