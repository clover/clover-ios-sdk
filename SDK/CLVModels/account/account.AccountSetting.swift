/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


import Foundation

extension CLVModels.Account {

    public class AccountSetting: Codable {

        public var accountRef: CLVModels.Base.Reference?
        /// The type of setting for the account
        public var name: CLVModels.Account.SettingName?
        /// The value of the setting for the account
        public var value: String?
        /// The created time for the setting for the account
        public var createdTime: Date?
        /// The modified time for the setting for the account
        public var modifiedTime: Date?
        /// The deleted time for the setting for the account
        public var deletedTime: Date?

        public var decodeError:[Swift.Error] = [Swift.Error]()

        enum CodingKeys: CodingKey {
            case accountRef
            case name
            case value
            case createdTime
            case modifiedTime
            case deletedTime
        }

        public init() {}

        required public init(from decoder: Decoder) throws {
            let rootContainer = try decoder.container(keyedBy: CodingKeys.self)
            do {
                self.accountRef = try rootContainer.decodeIfPresent(CLVModels.Base.Reference.self, forKey: .accountRef)
            } catch {
                decodeError.append(error)
            }
            do {
                self.name = try rootContainer.decodeIfPresent(CLVModels.Account.SettingName.self, forKey: .name)
            } catch {
                decodeError.append(error)
            }
            do {
                self.value = try rootContainer.decodeIfPresent(String.self, forKey: .value)
            } catch {
                decodeError.append(error)
            }
            do {
                self.createdTime = try rootContainer.decodeIfPresent(Date.self, forKey: .createdTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.modifiedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .modifiedTime)
            } catch {
                decodeError.append(error)
            }
            do {
                self.deletedTime = try rootContainer.decodeIfPresent(Date.self, forKey: .deletedTime)
            } catch {
                decodeError.append(error)
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            if (accountRef != nil) { try container.encode(accountRef, forKey: .accountRef) }
            if (name != nil) { try container.encode(name, forKey: .name) }
            if (value != nil) { try container.encode(value, forKey: .value) }
            if (createdTime != nil) { try container.encode(createdTime, forKey: .createdTime) }
            if (modifiedTime != nil) { try container.encode(modifiedTime, forKey: .modifiedTime) }
            if (deletedTime != nil) { try container.encode(deletedTime, forKey: .deletedTime) }
        }
    }

}