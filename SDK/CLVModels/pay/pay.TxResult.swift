/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

extension CLVModels.Pay {

    public enum TxResult: Codable {
        case ERROR
        case MSR
        case EMV_OFFLINE_APPROVED
        case EMV_OFFLINE_DECLINED
        case EMV_GO_ONLINE
        case EMV_APPROVED_ONLINE
        case EMV_DECLINED_ONLINE
        case RFID_OFFLINE_APPROVED
        case RFID_OFFLINE_DECLINED
        case RFID_GO_ONLINE
        case RFID_TERMINATED
        case RFID_MSR
        case MANUAL
        case PARSE_UNKNOWN(String)

        enum Key: CodingKey {
            case rawValue
        }

        public init(rawValue:String) {
            switch rawValue {
                case  "ERROR":
                    self = .ERROR
                case  "MSR":
                    self = .MSR
                case  "EMV_OFFLINE_APPROVED":
                    self = .EMV_OFFLINE_APPROVED
                case  "EMV_OFFLINE_DECLINED":
                    self = .EMV_OFFLINE_DECLINED
                case  "EMV_GO_ONLINE":
                    self = .EMV_GO_ONLINE
                case  "EMV_APPROVED_ONLINE":
                    self = .EMV_APPROVED_ONLINE
                case  "EMV_DECLINED_ONLINE":
                    self = .EMV_DECLINED_ONLINE
                case  "RFID_OFFLINE_APPROVED":
                    self = .RFID_OFFLINE_APPROVED
                case  "RFID_OFFLINE_DECLINED":
                    self = .RFID_OFFLINE_DECLINED
                case  "RFID_GO_ONLINE":
                    self = .RFID_GO_ONLINE
                case  "RFID_TERMINATED":
                    self = .RFID_TERMINATED
                case  "RFID_MSR":
                    self = .RFID_MSR
                case  "MANUAL":
                    self = .MANUAL
                default:
                    self = .PARSE_UNKNOWN(rawValue)
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self.init(rawValue: rawValue)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(toString)
        }

        public var toString: String {
            switch self {
                case  .ERROR:
                    return "ERROR"
                case  .MSR:
                    return "MSR"
                case  .EMV_OFFLINE_APPROVED:
                    return "EMV_OFFLINE_APPROVED"
                case  .EMV_OFFLINE_DECLINED:
                    return "EMV_OFFLINE_DECLINED"
                case  .EMV_GO_ONLINE:
                    return "EMV_GO_ONLINE"
                case  .EMV_APPROVED_ONLINE:
                    return "EMV_APPROVED_ONLINE"
                case  .EMV_DECLINED_ONLINE:
                    return "EMV_DECLINED_ONLINE"
                case  .RFID_OFFLINE_APPROVED:
                    return "RFID_OFFLINE_APPROVED"
                case  .RFID_OFFLINE_DECLINED:
                    return "RFID_OFFLINE_DECLINED"
                case  .RFID_GO_ONLINE:
                    return "RFID_GO_ONLINE"
                case  .RFID_TERMINATED:
                    return "RFID_TERMINATED"
                case  .RFID_MSR:
                    return "RFID_MSR"
                case  .MANUAL:
                    return "MANUAL"
                case .PARSE_UNKNOWN(let rawValue):
                    return rawValue            
            }
        }
    }
}