/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

extension CLVModels.Pay {

    public enum ServiceCode3: Codable {
        case NO_RESTRICTIONS_PIN_REQUIRED
        case NO_RESTRICTIONS
        case GOODS_AND_SERVICES_ONLY_NO_CASH
        case ATM_ONLY_PIN_REQUIRED
        case CASH_ONLY
        case GOODS_AND_SERVICES_ONLY_NO_CASH_PIN_REQUIRED
        case NO_RESTRICTIONS_USE_PIN_WHERE_FEASIBLE
        case GOODS_AND_SERVICES_ONLY_NO_CASH_USE_PIN_WHERE_FEASIBLE
        case UNDEFINED
        case PARSE_UNKNOWN(String)

        enum Key: CodingKey {
            case rawValue
        }

        public init(rawValue:String) {
            switch rawValue {
                case  "NO_RESTRICTIONS_PIN_REQUIRED":
                    self = .NO_RESTRICTIONS_PIN_REQUIRED
                case  "NO_RESTRICTIONS":
                    self = .NO_RESTRICTIONS
                case  "GOODS_AND_SERVICES_ONLY_NO_CASH":
                    self = .GOODS_AND_SERVICES_ONLY_NO_CASH
                case  "ATM_ONLY_PIN_REQUIRED":
                    self = .ATM_ONLY_PIN_REQUIRED
                case  "CASH_ONLY":
                    self = .CASH_ONLY
                case  "GOODS_AND_SERVICES_ONLY_NO_CASH_PIN_REQUIRED":
                    self = .GOODS_AND_SERVICES_ONLY_NO_CASH_PIN_REQUIRED
                case  "NO_RESTRICTIONS_USE_PIN_WHERE_FEASIBLE":
                    self = .NO_RESTRICTIONS_USE_PIN_WHERE_FEASIBLE
                case  "GOODS_AND_SERVICES_ONLY_NO_CASH_USE_PIN_WHERE_FEASIBLE":
                    self = .GOODS_AND_SERVICES_ONLY_NO_CASH_USE_PIN_WHERE_FEASIBLE
                case  "UNDEFINED":
                    self = .UNDEFINED
                default:
                    self = .PARSE_UNKNOWN(rawValue)
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self.init(rawValue: rawValue)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(toString)
        }

        public var toString: String {
            switch self {
                case  .NO_RESTRICTIONS_PIN_REQUIRED:
                    return "NO_RESTRICTIONS_PIN_REQUIRED"
                case  .NO_RESTRICTIONS:
                    return "NO_RESTRICTIONS"
                case  .GOODS_AND_SERVICES_ONLY_NO_CASH:
                    return "GOODS_AND_SERVICES_ONLY_NO_CASH"
                case  .ATM_ONLY_PIN_REQUIRED:
                    return "ATM_ONLY_PIN_REQUIRED"
                case  .CASH_ONLY:
                    return "CASH_ONLY"
                case  .GOODS_AND_SERVICES_ONLY_NO_CASH_PIN_REQUIRED:
                    return "GOODS_AND_SERVICES_ONLY_NO_CASH_PIN_REQUIRED"
                case  .NO_RESTRICTIONS_USE_PIN_WHERE_FEASIBLE:
                    return "NO_RESTRICTIONS_USE_PIN_WHERE_FEASIBLE"
                case  .GOODS_AND_SERVICES_ONLY_NO_CASH_USE_PIN_WHERE_FEASIBLE:
                    return "GOODS_AND_SERVICES_ONLY_NO_CASH_USE_PIN_WHERE_FEASIBLE"
                case  .UNDEFINED:
                    return "UNDEFINED"
                case .PARSE_UNKNOWN(let rawValue):
                    return rawValue            
            }
        }
    }
}