/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

extension CLVModels.Pay {

    public enum ServiceCode1: Codable {
        case INTERNATIONAL_INTERCHANGE_OK
        case INTERNATIONAL_INTERCHANGE_USE_IC_CHIP_WHERE_FEASIBLE
        case NATIONAL_INTERCHANGE_ONLY_EXCEPT_UNDER_BILATERAL_AGREEMENT
        case NATIONAL_INTERCHANGE_ONLY_EXCEPT_UNDER_BILATERAL_AGREEMENT_USE_IC_CHIP_WHERE_FEASIBLE
        case NO_INTERCHANGE_EXCEPT_UNDER_BILATERAL_AGREEMENT
        case TEST
        case UNDEFINED
        case PARSE_UNKNOWN(String)

        enum Key: CodingKey {
            case rawValue
        }

        public init(rawValue:String) {
            switch rawValue {
                case  "INTERNATIONAL_INTERCHANGE_OK":
                    self = .INTERNATIONAL_INTERCHANGE_OK
                case  "INTERNATIONAL_INTERCHANGE_USE_IC_CHIP_WHERE_FEASIBLE":
                    self = .INTERNATIONAL_INTERCHANGE_USE_IC_CHIP_WHERE_FEASIBLE
                case  "NATIONAL_INTERCHANGE_ONLY_EXCEPT_UNDER_BILATERAL_AGREEMENT":
                    self = .NATIONAL_INTERCHANGE_ONLY_EXCEPT_UNDER_BILATERAL_AGREEMENT
                case  "NATIONAL_INTERCHANGE_ONLY_EXCEPT_UNDER_BILATERAL_AGREEMENT_USE_IC_CHIP_WHERE_FEASIBLE":
                    self = .NATIONAL_INTERCHANGE_ONLY_EXCEPT_UNDER_BILATERAL_AGREEMENT_USE_IC_CHIP_WHERE_FEASIBLE
                case  "NO_INTERCHANGE_EXCEPT_UNDER_BILATERAL_AGREEMENT":
                    self = .NO_INTERCHANGE_EXCEPT_UNDER_BILATERAL_AGREEMENT
                case  "TEST":
                    self = .TEST
                case  "UNDEFINED":
                    self = .UNDEFINED
                default:
                    self = .PARSE_UNKNOWN(rawValue)
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(String.self)
            self.init(rawValue: rawValue)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encode(toString)
        }

        public var toString: String {
            switch self {
                case  .INTERNATIONAL_INTERCHANGE_OK:
                    return "INTERNATIONAL_INTERCHANGE_OK"
                case  .INTERNATIONAL_INTERCHANGE_USE_IC_CHIP_WHERE_FEASIBLE:
                    return "INTERNATIONAL_INTERCHANGE_USE_IC_CHIP_WHERE_FEASIBLE"
                case  .NATIONAL_INTERCHANGE_ONLY_EXCEPT_UNDER_BILATERAL_AGREEMENT:
                    return "NATIONAL_INTERCHANGE_ONLY_EXCEPT_UNDER_BILATERAL_AGREEMENT"
                case  .NATIONAL_INTERCHANGE_ONLY_EXCEPT_UNDER_BILATERAL_AGREEMENT_USE_IC_CHIP_WHERE_FEASIBLE:
                    return "NATIONAL_INTERCHANGE_ONLY_EXCEPT_UNDER_BILATERAL_AGREEMENT_USE_IC_CHIP_WHERE_FEASIBLE"
                case  .NO_INTERCHANGE_EXCEPT_UNDER_BILATERAL_AGREEMENT:
                    return "NO_INTERCHANGE_EXCEPT_UNDER_BILATERAL_AGREEMENT"
                case  .TEST:
                    return "TEST"
                case  .UNDEFINED:
                    return "UNDEFINED"
                case .PARSE_UNKNOWN(let rawValue):
                    return rawValue            
            }
        }
    }
}